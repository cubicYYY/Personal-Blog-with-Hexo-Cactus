{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"hackergame\" tag",
    "description": "CTF, life, thoughts and waifus.\n\n I'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\n Learning: Violin and electric guitar\n ❤❤❤ Engaging CTF competitions, writing toy projects, watching anime\n ✖✖✖ Technological supremacy\n ✔✔✔ Independent thinking\n Resume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/",
            "url": "http://cubicy.icu/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/",
            "title": "Hackergame2021 部分WriteUp",
            "date_published": "2021-10-30T08:11:00.000Z",
            "content_html": "<h1 id=\"yyyのWriteUp\"><a href=\"#yyyのWriteUp\" class=\"headerlink\" title=\"yyyのWriteUp\"></a>yyyのWriteUp</h1><hr>\n<h2 id=\"一点碎碎念\"><a href=\"#一点碎碎念\" class=\"headerlink\" title=\"一点碎碎念\"></a>一点碎碎念</h2><p>这是我的第一次Hackergame&#x2F;CTF比赛，感觉很有意思。前几天心态有点崩，好在调整过来了。大家还是要把Hackergame当做game。最开心的是认识了好多大佬，抱大腿.jpg  </p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030161203937-1693462675.png\" loading=\"lazy\"></p>\n<p>对自己的吐槽：EasyRSA差点做出来，扩展欧几里得写错弃疗了；RAID0卡在软件没有激活码不让保存；和各种小测撞；各种体调不良，饮食睡眠不佳；晚上学校断电没法做，我又是大夜猫子……奇奇怪怪挡路的东西一直不少，归根结底还是太菜了啦。<br>总之非常感谢@TonyCrane大佬、GodSpeed大佬及群内各成员的鼓励支持帮助（膜不算）。<br>希望我能早日学会binary和math。  </p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>这题二分一下page参数即可。<br><del>鼠标连点器</del>  </p>\n<hr>\n<h2 id=\"进制十六——参上\"><a href=\"#进制十六——参上\" class=\"headerlink\" title=\"进制十六——参上\"></a>进制十六——参上</h2><p>使用Hex Editor Neo直接新建文件抄写即可。当然OCR识别也行吧。</p>\n<hr>\n<h2 id=\"去吧！追寻自由的电波\"><a href=\"#去吧！追寻自由的电波\" class=\"headerlink\" title=\"去吧！追寻自由的电波\"></a>去吧！追寻自由的电波</h2><p>下载音频后可以听出是一段人声，但是语速极快。于是使用Adobe Audition CC打开，效果-&gt;伸缩与变调放慢速度，适当调节音高就能开始听写了。可以发现这是<strong>NATO Phonetic Alphabet</strong>：</p>\n<blockquote>\n<p>A ALPHA<br>B BRAVO<br>C CHARLIE<br>D DELTA<br>E ECHO<br>F FOXTROT<br>G GOLF<br>H HOTEL<br>I INDIA<br>J JULIET<br>K KILO<br>L LIMA<br>M MIKE<br>N NOVEMBER<br>O OSCAR<br>P PAPA<br>Q QUEBEC<br>R ROMEO<br>S SIERRA<br>T TANGO<br>U UNIFORM<br>V VICTOR<br>W WHISKEY<br>X X-RAY<br>Y YANKEE<br>Z ZULU  </p>\n</blockquote>\n<hr>\n<h2 id=\"猫咪问答-Pro-Max\"><a href=\"#猫咪问答-Pro-Max\" class=\"headerlink\" title=\"猫咪问答 Pro Max\"></a>猫咪问答 Pro Max</h2><p>General× 杂技√  </p>\n<h4 id=\"1-经典WebArchive-第一行就有答案-20150504\"><a href=\"#1-经典WebArchive-第一行就有答案-20150504\" class=\"headerlink\" title=\"1. 经典WebArchive 第一行就有答案:20150504\"></a>1. <a href=\"http://web.archive.org/web/20181004003308/http://sec.ustc.edu.cn/doku.php/codes\">经典WebArchive</a> 第一行就有答案:20150504</h4><h4 id=\"2-https-lug-ustc-edu-cn-wiki-intro\"><a href=\"#2-https-lug-ustc-edu-cn-wiki-intro\" class=\"headerlink\" title=\"2. https://lug.ustc.edu.cn/wiki/intro/\"></a>2. <a href=\"https://lug.ustc.edu.cn/wiki/intro/\">https://lug.ustc.edu.cn/wiki/intro/</a></h4><blockquote>\n<p>此处资料显示是4次，但并非最新，我后来手动尝试才得知是5</p>\n</blockquote>\n<h4 id=\"3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久\"><a href=\"#3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久\" class=\"headerlink\" title=\"3. FTP服务器 Obviously，答案是Development Team of Library 后来得知网站首页news头图就有，我还找了好久\"></a>3. <a href=\"https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2016.06.16_%E6%B4%BB%E5%8A%A8%E5%AE%A4%E6%90%AC%E8%BF%81/IMG_20160616_133655.jpg\">FTP服务器</a> Obviously，答案是Development Team of Library <del>后来得知网站首页news头图就有，我还找了好久</del></h4><h4 id=\"4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13\"><a href=\"#4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13\" class=\"headerlink\" title=\"4. 谷歌关键词SIGBOVIK2021 Newcomb-Benford直接就能找到原论文http://sigbovik.org/2021/proceedings.pdf 直接Ctrl+F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13\"></a>4. 谷歌关键词<code>SIGBOVIK2021</code> <code>Newcomb-Benford</code>直接就能找到原论文<a href=\"http://sigbovik.org/2021/proceedings.pdf\">http://sigbovik.org/2021/proceedings.pdf</a> 直接<code>Ctrl+F</code>找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13</h4><h4 id=\"5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html\"><a href=\"#5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html\" class=\"headerlink\" title=\"5. 谷歌关键词protocol report 找到https://www.rfc-editor.org/rfc/rfc8962.html\"></a>5. 谷歌关键词<code>protocol</code> <code>report</code> 找到<a href=\"https://www.rfc-editor.org/rfc/rfc8962.html\">https://www.rfc-editor.org/rfc/rfc8962.html</a></h4><blockquote>\n<p> 6.Reporting Offenses<br>Send all your reports of possible violations and all tips about wrongdoing to <strong>&#x2F;dev&#x2F;null</strong>. The Protocol Police are listening and will take care of it.</p>\n</blockquote>\n<p><del>还挺幽默，一开始还真以为有police在listening</del></p>\n<hr>\n<h2 id=\"卖瓜\"><a href=\"#卖瓜\" class=\"headerlink\" title=\"卖瓜\"></a>卖瓜</h2><p>20不是3的倍数，乍看似乎不可能用6和9加和得到。但随便试了试，发现9斤的瓜很多很多时会溢出为-9223372036854775808，据此判断为int64溢出，判断应当在此处加以利用。<br>我们需要让这个数字稍微溢出一点，不能溢出太多。也就是略大于floor(9223372036854775808&#x2F;9)，使得溢出为-9223372036854775808以外的数字，并且让该数字到20的距离能被3整除。之后直接加回20就行（简单小学(?)算数，屡有即将做出来时加过头超过20的惨剧hhh）<br>灵感来源：<a href=\"https://www.bbsmax.com/A/pRdByjq65n/\">CTF 两道web整数溢出题目(猫咪银行和ltshop)</a>  </p>\n<hr>\n<h2 id=\"透明的文件\"><a href=\"#透明的文件\" class=\"headerlink\" title=\"透明的文件\"></a>透明的文件</h2><p>根据题面和文件会发现这是终端的颜色代码，网络搜索终端颜色代码格式后将所有<code>[</code>前补上一个<code>\\e</code>，然后<code>echo -e &quot;&#123;内容&#125;&quot;</code>就行啦。记得执行前把终端先用字符填满，不然可能画不完整。<br><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154901529-149476643.jpg\" loading=\"lazy\"></p>\n<hr>\n<h2 id=\"旅行照片\"><a href=\"#旅行照片\" class=\"headerlink\" title=\"旅行照片\"></a>旅行照片</h2><p><del>简简单单开个盒</del><br>旅游，海滩，汉字，说明这是国内一个海边旅游景点。<br>蓝色KFC？这可不常见，应该有不少人打卡了吧。<br>百度搜索<code>蓝色KFC</code>，第一项就是某红书的<code>秦皇岛蒂凡尼蓝秦皇岛网红打卡|国内唯一蒂芙尼蓝色肯德基</code><br>百度地图定位发现这家店是某海底世界分店，直接得到电话号码。<br><a href=\"https://www.earthol.org/\">https://www.earthol.org/</a>上通过街景发现三个汉字“海|豚|馆”<br><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154657507-2019993326.jpg\" loading=\"lazy\"></p>\n<p>对照地图，视线和海岸线大约成45°，推测应当在东南方向。进而发现影子西斜，应当在下午&#x2F;傍晚<br>通过绘制各个水平线找出灭点可以推测楼层（知乎有些文章有详细说明）。我的方法是找到对面楼“最矩形”变形最少的窗户判断为同一楼层，然后数，发现是13层左右（经尝试发现是14层）</p>\n<hr>\n<h2 id=\"FLAG助力大红包\"><a href=\"#FLAG助力大红包\" class=\"headerlink\" title=\"FLAG助力大红包\"></a>FLAG助力大红包</h2><p>既然是和ip有关，第一时间想到的就是<code>X-Forwarded-For</code>，果然成功了。因为每个<code>/8</code>ip段（也就是例如255.0.0.0-255.255.255.255）都只能算一次，我们使用BurpSuite的Intruder，将Post数据中的ip和<code>X-Forwarded-For</code>的ip首段打上标记，选择<code>Battering Ram</code>模式（让两处参数一致），构造0~255的字典，自动化访问<code>0.114.114.114</code>、<code>1.114.114.114</code>、<code>2.114.114.114</code>……<code>255.114.114.114</code>达成刚好256个助力获得flag。由于每次间隔2s，2s*256&#x3D;512s，小于题目时长限制10min&#x3D;600s所以是可行的。</p>\n<hr>\n<h2 id=\"Amnesia-轻度失忆\"><a href=\"#Amnesia-轻度失忆\" class=\"headerlink\" title=\"Amnesia-轻度失忆\"></a>Amnesia-轻度失忆</h2><p>直接<code>putchar()</code>逐个打印绕过即可。</p>\n<hr>\n<h2 id=\"图之上的信息\"><a href=\"#图之上的信息\" class=\"headerlink\" title=\"图之上的信息\"></a>图之上的信息</h2><p>GraphQL的利用。访问<code>/graphql?query=&#123;&#125;</code>发现存在利用可能。查阅<a href=\"https://mp.weixin.qq.com/s/gp2jGrLPllsh5xn7vn9BwQ\">资料</a>后得知可以利用内省注入。没有UI界面我直接地址栏输入。换行替换为<code>%0A</code>后，访问<code>/graphql?query=&#123;__schema%0A&#123;types%0A&#123;name&#125;&#125;&#125;</code>得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;data&quot;:&#123;&quot;__schema&quot;:&#123;&quot;types&quot;:[&#123;&quot;name&quot;:&quot;Query&quot;&#125;,&#123;&quot;name&quot;:&quot;GNote&quot;&#125;,&#123;&quot;name&quot;:&quot;Int&quot;&#125;,&#123;&quot;name&quot;:&quot;String&quot;&#125;,&#123;&quot;name&quot;:&quot;GUser&quot;&#125;,&#123;&quot;name&quot;:&quot;Boolean&quot;&#125;,&#123;&quot;name&quot;:&quot;__Schema&quot;&#125;,&#123;&quot;name&quot;:&quot;__Type&quot;&#125;,&#123;&quot;name&quot;:&quot;__TypeKind&quot;&#125;,&#123;&quot;name&quot;:&quot;__Field&quot;&#125;,&#123;&quot;name&quot;:&quot;__InputValue&quot;&#125;,&#123;&quot;name&quot;:&quot;__EnumValue&quot;&#125;,&#123;&quot;name&quot;:&quot;__Directive&quot;&#125;,&#123;&quot;name&quot;:&quot;__DirectiveLocation&quot;&#125;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>发现有个<code>GUser</code>类型。接下来访问<code>/graphql?query=&#123;__type(name:&quot;GUser&quot;)&#123;name%0Afields&#123;name%0Atype&#123;name,kind&#125;&#125;&#125;&#125;</code>爆出字段名<code>privateEmail</code>，然后直接<code>/graphql?query=&#123;user(id:1)&#123;id,privateEmail&#125;&#125;</code>得到flag.</p>\n<hr>\n<h2 id=\"赛博厨房\"><a href=\"#赛博厨房\" class=\"headerlink\" title=\"赛博厨房\"></a>赛博厨房</h2><ul>\n<li>Level0：直接写</li>\n<li>Level1：复制粘贴发现有长度限制 goto优化行数<br> 然后不会了。</li>\n</ul>\n<hr>\n<p>##阵列恢复大师-RAID5<br>直接丢进RAID Reconstructor 5里面跑得到镜像文件。Windows上并没法直接读，于是丢进Diskinternals Linux Reader里读文件导出。执行getflag.py却提示<code>Did you recover my data correctly?</code>，疑惑之下换WSL(Kali Linux)执行就成功了。<br><del>吐槽：RAID0的XFS需要注册码没法搞。WSL也mount不上，看来还是虚拟机靠谱。</del></p>\n<hr>\n<h2 id=\"助记词-第一顿大餐\"><a href=\"#助记词-第一顿大餐\" class=\"headerlink\" title=\"助记词-第一顿大餐\"></a>助记词-第一顿大餐</h2><p>代码审计后发现目的是延迟尽可能高。用BurpSuite改包在POST数据里复制出来很多行注记词提交就有了flag1。就像这样：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &quot;necessary science growth addition&quot;,</span><br><span class=\"line\">    &quot;necessary science growth addition&quot;,</span><br><span class=\"line\">    （重复好多好多次）</span><br><span class=\"line\">    &quot;necessary science growth addition&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>如果不行CLEAR再试试。<br><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030155443141-1922071122.jpg\" loading=\"lazy\"></p>\n<p>小坑：token要跟上才能拿到flag，不过有时自动获取的token无效，使得flag只显示为true，因为加号没有URLEncode转义，不知道是不是bug.  </p>\n<hr>\n<h2 id=\"马赛克\"><a href=\"#马赛克\" class=\"headerlink\" title=\"马赛克\"></a>马赛克</h2><p>模拟题。大概思路是先扫一遍，把能确定的先确定下来。之后再dfs剩下的块（不需要全部求出，毕竟这题的二维码纠错拉满了）。<br>代码很丑对吧QAQ（当时不熟悉ndarray操作，全部当做list做一遍）  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># import scipy</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">SIZE = <span class=\"number\">627</span></span><br><span class=\"line\">MSBLOCK = <span class=\"number\">23</span></span><br><span class=\"line\">QRBLOCK = <span class=\"number\">11</span></span><br><span class=\"line\">X, Y = <span class=\"number\">103</span>, <span class=\"number\">137</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ImageToMatrix</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 读取图片</span></span><br><span class=\"line\">    im = Image.<span class=\"built_in\">open</span>(filename)</span><br><span class=\"line\">    <span class=\"comment\"># 显示图片</span></span><br><span class=\"line\"><span class=\"comment\">#     im.show()  </span></span><br><span class=\"line\">    width,height = im.size</span><br><span class=\"line\">    im = im.convert(<span class=\"string\">&quot;L&quot;</span>) </span><br><span class=\"line\">    data = im.getdata()</span><br><span class=\"line\">    data = np.matrix(data,dtype=<span class=\"string\">&#x27;float&#x27;</span>)/<span class=\"number\">255.0</span></span><br><span class=\"line\">    new_data = np.reshape(data,(width,height))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_data</span><br><span class=\"line\"><span class=\"comment\">#     new_im = Image.fromarray(new_data)</span></span><br><span class=\"line\"><span class=\"comment\">#     # 显示图片</span></span><br><span class=\"line\"><span class=\"comment\">#     new_im.show()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">MatrixToImage</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    data = data*<span class=\"number\">255</span></span><br><span class=\"line\">    new_im = Image.fromarray(data.astype(np.uint8))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_im</span><br><span class=\"line\">    </span><br><span class=\"line\">pre_arr =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)]</span><br><span class=\"line\">res_arr =  [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)]</span><br><span class=\"line\">kimeta =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)]<span class=\"comment\">#钦定了</span></span><br><span class=\"line\">EACH = <span class=\"built_in\">int</span>(math.ceil(MSBLOCK/QRBLOCK)) <span class=\"comment\">#EACH=3</span></span><br><span class=\"line\">filename = <span class=\"string\">&#x27;pixelated_qrcode.bmp&#x27;</span></span><br><span class=\"line\">data = ImageToMatrix(filename)</span><br><span class=\"line\">np.set_printoptions(threshold=<span class=\"number\">1145141919810</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">            pre_arr[i][j]=data[i].tolist()[<span class=\"number\">0</span>][j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i%QRBLOCK==<span class=\"number\">0</span> <span class=\"keyword\">and</span> j%QRBLOCK==<span class=\"number\">0</span>:</span><br><span class=\"line\">                res_arr[i//QRBLOCK][j//QRBLOCK]=<span class=\"built_in\">int</span>(data.tolist()[i][j])</span><br><span class=\"line\"><span class=\"comment\"># print(pre_arr)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span>  <span class=\"title function_\">check</span>(<span class=\"params\">i,j,now</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&lt;=<span class=\"number\">9</span> <span class=\"keyword\">or</span> i&gt;=<span class=\"number\">51</span> <span class=\"keyword\">or</span> j&lt;=<span class=\"number\">12</span> <span class=\"keyword\">or</span> j&gt;=<span class=\"number\">54</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (pre_arr[i*QRBLOCK+<span class=\"number\">3</span>][j*QRBLOCK+<span class=\"number\">3</span>] == now):<span class=\"comment\">#随便写的offset</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kimeta[i][j] <span class=\"keyword\">or</span> vis[i][j]) <span class=\"keyword\">and</span> res_arr[i][j]!=now:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getRange</span>(<span class=\"params\">i,j</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i*QRBLOCK,j*QRBLOCK,(i+<span class=\"number\">1</span>)*QRBLOCK-<span class=\"number\">1</span>,(j+<span class=\"number\">1</span>)*QRBLOCK-<span class=\"number\">1</span> <span class=\"comment\">#x1,y1,x2,y2</span></span><br><span class=\"line\"></span><br><span class=\"line\">vis =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)]</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calcDelta</span>(<span class=\"params\">Mi,Mj,fillN,comp,LUR,LUC</span>):</span><br><span class=\"line\">    fn = fillN</span><br><span class=\"line\">    <span class=\"keyword\">for</span> xx <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> yy <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> check(xx,yy,fn&amp;<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">114514</span></span><br><span class=\"line\">            fn = fn&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">    avr = <span class=\"number\">0</span></span><br><span class=\"line\">    qx1,qy1,qx2,qy2 = X+Mi*MSBLOCK,Y+Mj*MSBLOCK,X+(Mi+<span class=\"number\">1</span>)*MSBLOCK-<span class=\"number\">1</span>,Y+(Mj+<span class=\"number\">1</span>)*MSBLOCK-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fillN&amp;<span class=\"number\">1</span>):</span><br><span class=\"line\">                x1,y1,x2,y2 = getRange(x,y)</span><br><span class=\"line\">                inx1,iny1,inx2,iny2 = <span class=\"built_in\">max</span>(x1,qx1),<span class=\"built_in\">max</span>(y1,qy1),<span class=\"built_in\">min</span>(x2,qx2),<span class=\"built_in\">min</span>(y2,qy2)</span><br><span class=\"line\">                avr = avr + (iny2-iny1+<span class=\"number\">1</span>)*(inx2-inx1+<span class=\"number\">1</span>)</span><br><span class=\"line\">            fillN = fillN &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    newres = avr/(MSBLOCK*MSBLOCK)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newres &lt; comp-<span class=\"number\">0.1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1919810</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(math.floor((avr/(MSBLOCK*MSBLOCK))*<span class=\"number\">255</span>)/<span class=\"number\">255</span>-comp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">putRec</span>(<span class=\"params\">i,j</span>):<span class=\"comment\">#放置识别码块</span></span><br><span class=\"line\">    kimeta[i][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i][j]=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kimeta[i][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i+<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i+<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i-<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i-<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i-<span class=\"number\">2</span>,i+<span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j-<span class=\"number\">2</span>,j+<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(x-i)==<span class=\"number\">2</span> <span class=\"keyword\">or</span> <span class=\"built_in\">abs</span>(y-j)==<span class=\"number\">2</span>:</span><br><span class=\"line\">                kimeta[x][y]=<span class=\"number\">1</span></span><br><span class=\"line\">                res_arr[x][y]=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">putRec(<span class=\"number\">28</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">putRec(<span class=\"number\">28</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">putRec(<span class=\"number\">50</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">putRec(<span class=\"number\">50</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>,<span class=\"number\">52</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>,<span class=\"number\">55</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==<span class=\"number\">9</span> <span class=\"keyword\">or</span> i==<span class=\"number\">51</span> <span class=\"keyword\">or</span> j==<span class=\"number\">12</span> <span class=\"keyword\">or</span> j==<span class=\"number\">54</span>:</span><br><span class=\"line\">            kimeta[i][j]=<span class=\"number\">1</span></span><br><span class=\"line\">            res_arr[i][j]=pre_arr[i*QRBLOCK+<span class=\"number\">3</span>][j*QRBLOCK+<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">new_arr =  [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)]</span><br><span class=\"line\">fked =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">cntt = <span class=\"number\">0</span></span><br><span class=\"line\">savecnt=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">i,j</span>):<span class=\"comment\">#从马赛克块的i行j列开始</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> cntt,savecnt</span><br><span class=\"line\">    cntt = cntt+<span class=\"number\">1</span></span><br><span class=\"line\">    LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK</span><br><span class=\"line\">    <span class=\"comment\">#落在哪个二维码方块上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cntt==<span class=\"number\">200000</span>):<span class=\"comment\">#保存中途结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">                    new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]</span><br><span class=\"line\">        MatrixToImage(np.array(new_arr)).save(<span class=\"string\">&#x27;mid%s.bmp&#x27;</span>%savecnt)</span><br><span class=\"line\">        savecnt = savecnt + <span class=\"number\">1</span></span><br><span class=\"line\">        cntt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> i&gt;=<span class=\"number\">20</span> <span class=\"keyword\">or</span> j&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> j&gt;=<span class=\"number\">20</span> <span class=\"keyword\">or</span> fked[i][j]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    fked[i][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    nowMin , nowSol = <span class=\"number\">114514191981.0</span> , (<span class=\"number\">1</span>&lt;&lt;(EACH*EACH))-<span class=\"number\">1</span></span><br><span class=\"line\">    tmpp =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            tmpp[x-LUR][y-LUC]=vis[x][y]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filN <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>&lt;&lt;(EACH*EACH)):<span class=\"comment\">#枚举每个马赛克块影响到的3*3=9个QR块</span></span><br><span class=\"line\">        tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+<span class=\"number\">2</span>][Y+j*MSBLOCK+<span class=\"number\">2</span>],LUR,LUC)<span class=\"comment\">#同样是乱写的offset+2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; <span class=\"number\">0.00000001</span>:</span><br><span class=\"line\">            nowSol = filN</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">                <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">                    vis[x][y] = <span class=\"number\">1</span></span><br><span class=\"line\">                    res_arr[x][y]=nowSol&amp;<span class=\"number\">1</span></span><br><span class=\"line\">                    nowSol = nowSol&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((i+<span class=\"number\">1</span>&lt;<span class=\"number\">20</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i+<span class=\"number\">1</span>][j]) <span class=\"keyword\">and</span> dfs(i+<span class=\"number\">1</span>,j)) <span class=\"keyword\">or</span> (j+<span class=\"number\">1</span>&lt;<span class=\"number\">20</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i][j+<span class=\"number\">1</span>]) <span class=\"keyword\">and</span> dfs(i,j+<span class=\"number\">1</span>)) <span class=\"keyword\">or</span> (i-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i-<span class=\"number\">1</span>][j]) <span class=\"keyword\">and</span> dfs(i-<span class=\"number\">1</span>,j)) <span class=\"keyword\">or</span> (j-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i][j-<span class=\"number\">1</span>]) <span class=\"keyword\">and</span> dfs(i,j-<span class=\"number\">1</span>))):</span><br><span class=\"line\">                fked[i][j]=<span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">                        vis[x][y] = tmpp[x-LUR][y-LUC]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    fked[i][j]=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            vis[x][y] = tmpp[x-LUR][y-LUC]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#预先扫描，把能确定的、没有多解的先填上</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">20</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">20</span>):</span><br><span class=\"line\">        LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK</span><br><span class=\"line\">        succnt = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> filN <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>&lt;&lt;(EACH*EACH)):</span><br><span class=\"line\">                tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+<span class=\"number\">2</span>][Y+j*MSBLOCK+<span class=\"number\">2</span>],LUR,LUC)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> tmp &lt; <span class=\"number\">0.00000001</span>:</span><br><span class=\"line\">                    succnt = succnt + <span class=\"number\">1</span></span><br><span class=\"line\">                    nowSol = filN</span><br><span class=\"line\">        <span class=\"keyword\">if</span> succnt == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">                <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">                    kimeta[x][y] = <span class=\"number\">1</span></span><br><span class=\"line\">                    res_arr[x][y]=nowSol&amp;<span class=\"number\">1</span></span><br><span class=\"line\">                    nowSol = nowSol&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">dfs(<span class=\"number\">5</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">        new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]</span><br><span class=\"line\">MatrixToImage(np.array(new_arr)).save(<span class=\"string\">&#x27;resu.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>最终效果：<img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030160204036-1937509495.jpg\" alt=\"QRCode\" loading=\"lazy\"></p>\n<hr>\n<h2 id=\"minecRaft\"><a href=\"#minecRaft\" class=\"headerlink\" title=\"minecRaft\"></a>minecRaft</h2><p>web× reverse√<br>打开网页查看js，找到flag.js，在<a href=\"http://jsnice.org/\">jsnice.org</a>反混淆后自己手动再替换下几个迷人眼的常量，之后进行代码审计，会发现这是个TEA加密。如何发现是TEA呢？我搜了好久，后来有人告诉我只需要搜常量就行（还需要学习一个人生经验）。<br>我们需要找到一个字符串s，使得s.encrypt(“{那串数字密钥}”)&#x3D;&#x3D;&#x3D; “6f……0c”<br>把密文切片避免转换后数字过大，在题目页面下<code>F12</code>，进入Console里执行：</p>\n<pre><code class=\"javascript\">window.btoa(LongToStr4(Base16ToLong(&#39;6fbde674&#39;))+LongToStr4(Base16ToLong(&#39;819a59bf&#39;))+LongToStr4(Base16ToLong(&#39;a1209256&#39;))+LongToStr4(Base16ToLong(&#39;5b4ca2a7&#39;))+LongToStr4(Base16ToLong(&#39;a11dc670&#39;))+LongToStr4(Base16ToLong(&#39;c678681d&#39;))+LongToStr4(Base16ToLong(&#39;af4afb67&#39;))+LongToStr4(Base16ToLong(&#39;04b82f0c&#39;)))\n</code></pre>\n<p>得到密文dOa9b79ZmoFWkiChp6JMW3DGHaEdaHjGZ&#x2F;tKrwwvuAQ&#x3D;<br>谷歌<code>TEA decryption online</code>，进入<a href=\"https://www.mefancy.com/obfuscation/encryption-generator.php\">https://www.mefancy.com/obfuscation/encryption-generator.php</a>把上面那串数字密钥（13…）还有密文丢进去就出flag了。</p>\n<hr>\n<h2 id=\"p😭q\"><a href=\"#p😭q\" class=\"headerlink\" title=\"p😭q\"></a>p😭q</h2><p>老外大奥流泪.gif  早知道，还是原道.jpg<br>先把gif的帧提取出来方便处理：</p>\n<pre><code class=\"python\">import os\nimport sys\nfrom PIL import Image\n\ndef extractFrames(inGif, outFolder):\n    frame = Image.open(inGif)\n    nframes = 0\n    while frame:\n        frame.save(&#39;./dest/%s.png&#39; % (nframes))\n        nframes += 1\n        try:\n            frame.seek(nframes)\n        except EOFError:\n            break;\n    return True\n\nif __name__ == &#39;__main__&#39;:\n    image = os.path.abspath(sys.argv[1])\n    dest = os.path.join(os.path.dirname(image), &quot;dest&quot;)\n    if not os.path.exists(dest):\n        os.mkdir(dest)\n    extractFrames(image, dest)\n</code></pre>\n<p>然后原题给啥库就用啥库，逆回去：</p>\n<pre><code class=\"python\">from array2gif import write_gif  # version: 1.0.4\nimport librosa  # version: 0.8.1\nimport numpy as np  # version: 1.19.5\nimport soundfile as sf\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\ndef ImageToMatrix(filename):\n    im = Image.open(filename)\n    height,width = im.size\n    im = im.convert(&#39;L&#39;)\n    data = im.getdata()\n    data = np.matrix(data,dtype=&#39;float&#39;)/255.0\n    new_data = np.reshape(data,(width,height))\n    return new_data\nnp.set_printoptions(threshold=1145141919810)\nnum_freqs = 32\nquantize = 2\nmin_db = -60\nmax_db = 30\nfft_window_size = 2048\nframe_step_size = 512\nwindow_function_type = &#39;hann&#39;\nred_pixel = [255, 0, 0]\nwhite_pixel = [255, 255, 255]\nsample_rate = 22050\nlis =  [[0.0 for col in range(587)] for row in range(32)]\nimgg = [[0.0 for col in range(130)] for row in range(92)]\nfor ii in range (0,587):\n    filename = &#39;./dest/%s.png&#39;%ii\n    print(filename)\n    data = ImageToMatrix(filename)\n    for i in range(0,92):\n        for j in range(0,130):\n            imgg[i][j]=data.tolist()[i][j]\n    for xpos in range(0,32):\n        for scan in range(0,92):\n            if imgg[scan][xpos*4+2]&lt;1.0:  \n                lis[xpos][ii]=float((91-scan)-60)\n                break\n\nspectrogram =  np.array(lis)\naudio_signal = librosa.feature.inverse.mel_to_audio(librosa.db_to_power(spectrogram), sr=sample_rate, n_fft=fft_window_size*2, hop_length=frame_step_size, window=window_function_type)\nsf.write(&#39;newnew.wav&#39;, audio_signal, sample_rate) \n</code></pre>\n<p>最后在Adobe Audition CC里随便处理处理，勉强能听了，开始努力听写：<br><code>Theflagis f,l,a,g ......</code>  </p>\n",
            "tags": [
                "Write-Up",
                "Hackergame"
            ]
        }
    ]
}