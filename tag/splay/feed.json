{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"splay\" tag",
    "description": "CTF, life, thoughts and waifus.\n\n I'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\n Learning: Violin and electric guitar\n ❤❤❤ Engaging CTF competitions, writing toy projects, watching anime\n ✖✖✖ Technological supremacy\n ✔✔✔ Independent thinking\n Resume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/",
            "url": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/",
            "title": "洛谷:P3384 [HNOI2004]宠物收养场",
            "date_published": "2018-04-09T14:05:00.000Z",
            "content_html": "<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P3384</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一些序列<strong>（没有重复数字）</strong>，每个序列支持：<br>给定一些数k<strong>（对于每个序列不重复）</strong>，每次在序列里找到最接近k的数删除（如果有2个数字与k差一样，即分别是k-b和k+b，则选择较小的k-b），累加与k的差，输出。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>其实关键就是维护一个有序序列，支持插入，查询前继后继，删除指定数字。<br>自然我们会想到手打平衡树，Treap&#x2F;Splay皆可。（这里只有旋转实现的Treap，非旋Treap（Split+Merge）和Splay日后加上）<br>Tips:为了防止越界等问题以及方便提取区间（尤其是Splay），序列前后一般塞上一个-INF和INF<br>然而作为C++选手，我们应该妙用STL。set可以实现这样的功能，内部是红黑树实现的也很快。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ol>\n<li>旋转实现的Treap(160ms,3.03MB)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF=<span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">randad</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">114514</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">2147483647</span>);<span class=\"comment\">//48271使得随机数有完全周期，即2147483647内取遍不重复 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> delta=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pri,val,ch[<span class=\"number\">2</span>],size,tot;</span><br><span class=\"line\"><span class=\"comment\">//pri:Treap的随机数</span></span><br><span class=\"line\"><span class=\"comment\">//val:数字</span></span><br><span class=\"line\"><span class=\"comment\">//ch[0,1]:左孩子右孩子</span></span><br><span class=\"line\"><span class=\"comment\">//size:以该节点为根的子树里有几个数字</span></span><br><span class=\"line\"><span class=\"comment\">//tot:这个数字出现了几次（本题无用）</span></span><br><span class=\"line\">&#125;T[<span class=\"number\">111111</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> k,size=<span class=\"number\">0</span>,ANS,ans;<span class=\"comment\">//k:根节点，size:树的大小,ANS:临时，ans:赶走了几个人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;T[k].size=T[T[k].ch[<span class=\"number\">0</span>]].size+T[T[k].ch[<span class=\"number\">1</span>]].size+T[k].tot;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rturn</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//右旋，把k旋到右边，k左孩子提到根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=T[k].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">    T[k].ch[<span class=\"number\">0</span>]=T[t].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[t].ch[<span class=\"number\">1</span>]=k;</span><br><span class=\"line\">    T[t].size=T[k].size;</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(k);</span><br><span class=\"line\">    k=t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lturn</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//左旋，把k旋到左边，k右孩子提到根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=T[k].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[k].ch[<span class=\"number\">1</span>]=T[t].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">    T[t].ch[<span class=\"number\">0</span>]=k;</span><br><span class=\"line\">    T[t].size=T[k].size;</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(k);</span><br><span class=\"line\">    k=t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> val)</span> <span class=\"comment\">//插入</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        k=size;</span><br><span class=\"line\">        T[k].pri=<span class=\"built_in\">randad</span>();</span><br><span class=\"line\">        T[k].val=val;</span><br><span class=\"line\">        T[k].size=T[k].tot=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T[k].size++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T[k].val==val) T[k].tot++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val&gt;T[k].val) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(T[k].ch[<span class=\"number\">1</span>],val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[T[k].ch[<span class=\"number\">1</span>]].pri&lt;T[k].pri) <span class=\"built_in\">lturn</span>(k);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(T[k].ch[<span class=\"number\">0</span>],val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[T[k].ch[<span class=\"number\">0</span>]].pri&lt;T[k].pri) <span class=\"built_in\">rturn</span>(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> val)</span><span class=\"comment\">//删除值为val的数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T[k].val==val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[k].tot&gt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            T[k].tot--;</span><br><span class=\"line\">            T[k].size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[k].ch[<span class=\"number\">0</span>]==<span class=\"number\">0</span>||T[k].ch[<span class=\"number\">1</span>]==<span class=\"number\">0</span>) k=T[k].ch[<span class=\"number\">0</span>]+T[k].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T[T[k].ch[<span class=\"number\">0</span>]].pri&lt;T[T[k].ch[<span class=\"number\">1</span>]].pri) <span class=\"built_in\">rturn</span>(k),<span class=\"built_in\">del</span>(k,val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">lturn</span>(k),<span class=\"built_in\">del</span>(k,val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val&gt;T[k].val) T[k].size--,<span class=\"built_in\">del</span>(T[k].ch[<span class=\"number\">1</span>],val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> T[k].size--,<span class=\"built_in\">del</span>(T[k].ch[<span class=\"number\">0</span>],val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">xth</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询第x小的数是什么 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>||x==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=T[T[k].ch[<span class=\"number\">0</span>]].size) <span class=\"keyword\">return</span> <span class=\"built_in\">xth</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;T[T[k].ch[<span class=\"number\">0</span>]].size+T[k].tot) <span class=\"keyword\">return</span> <span class=\"built_in\">xth</span>(T[k].ch[<span class=\"number\">1</span>],x-T[T[k].ch[<span class=\"number\">0</span>]].size-T[k].tot);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> T[k].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询第x小数在树中位置 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>||x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=T[T[k].ch[<span class=\"number\">0</span>]].size)<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==T[T[k].ch[<span class=\"number\">0</span>]].size+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(T[k].ch[<span class=\"number\">1</span>],x-T[T[k].ch[<span class=\"number\">0</span>]].size<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询不比x大的且最接近x的数所在位置（x前继）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[k].val&lt;x) ANS=k,<span class=\"built_in\">pre</span>(T[k].ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">pre</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询不比x小的且最接近x的数所在位置（x后继）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[k].val&gt;x) ANS=k,<span class=\"built_in\">next</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">next</span>(T[k].ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Catch</span><span class=\"params\">(<span class=\"type\">int</span> num)</span><span class=\"comment\">//匹配宠物和饲养人</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">pre</span>(k,num),a=T[ANS].val; </span><br><span class=\"line\">    <span class=\"built_in\">next</span>(k,num), b=T[ANS].val;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num-a&lt;=b-num &amp;&amp; a != -INF) &#123;</span><br><span class=\"line\">            ans += num-a;</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(k,a);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans += b-num;</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(k,b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans %= <span class=\"number\">1000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"type\">int</span> cur;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(k,-INF),<span class=\"built_in\">ins</span>(k,INF);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[k].size == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                cur=a;<span class=\"comment\">//cur：当前是宠物等人认领还是人在等着接受宠物（看原题，不然谁看得懂啊= =）</span></span><br><span class=\"line\">                <span class=\"built_in\">ins</span>(k,b);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a == cur) <span class=\"built_in\">ins</span>(k,b);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">Catch</span>(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"number\">2.</span> set实现(<span class=\"number\">304</span>ms,<span class=\"number\">2.57</span>MB)  </span><br><span class=\"line\">```cpp</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1111111</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">1000000000</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, ans;</span><br><span class=\"line\">set &lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt;::iterator left=--s.<span class=\"built_in\">lower_bound</span>(x),right=s.<span class=\"built_in\">lower_bound</span>(x);<span class=\"comment\">//lower_bound的实现是二分查找，迭代器指向不比x小的且最接近x的数的位置，所以left就是前继，right就是后继</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x-*left&lt;=*right-x&amp;&amp;*left!=-INF) &#123;</span><br><span class=\"line\">        ans+=x-*left;</span><br><span class=\"line\">        s.<span class=\"built_in\">erase</span>(left);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ans+=*right-x;</span><br><span class=\"line\">        s.<span class=\"built_in\">erase</span>(right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans%=<span class=\"number\">1000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"type\">int</span> cur;</span><br><span class=\"line\">    s.<span class=\"built_in\">insert</span>(-INF),s.<span class=\"built_in\">insert</span>(INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">size</span>()==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            cur=a;</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(b);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==cur) s.<span class=\"built_in\">insert</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Treap",
                "Splay"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/",
            "url": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/",
            "title": "洛谷:P3391 【模板】文艺平衡树（Splay）",
            "date_published": "2018-02-22T15:43:00.000Z",
            "content_html": "<p>原题地址:<a href=\"//www.luogu.org/problemnew/show/P3391\">https://www.luogu.org/problemnew/show/P3391</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：<br>翻转一个区间，例如原有序序列是5 4 3 2 1，翻转区间是[2,4]的话，结果是5 2 3 4 1</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>Splay是一种二叉搜索树。如果不知道的话……    </p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172651966-1911354100.png\" alt=\"百度啊\" loading=\"lazy\"><br>百度百科对BST的介绍：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。</span><br></pre></td></tr></table></figure>\n<p>首先明白Splay比起线段树能多干什么：</p>\n<ul>\n<li>可以在一个有序序列中任意数后面动态插入一串数（不能比a后面一个数还大）  </li>\n<li>可以删除一段区间</li>\n</ul>\n<p>可能描述不是很清楚，具体看这里面给的论文链接：<a href=\"//www.cnblogs.com/yyy2015c01/p/8457795.html\">信息学竞赛相关优秀文章合集</a><br>或者直接看这里：<a href=\"//files.cnblogs.com/files/yyy2015c01/%E8%BF%90%E7%94%A8%E4%BC%B8%E5%B1%95%E6%A0%91%E8%A7%A3%E5%86%B3%E6%95%B0%E5%88%97%E7%BB%B4%E6%8A%A4%E9%97%AE%E9%A2%98.pdf\">运用伸展树解决数列维护问题.pdf</a><br>如果搞不懂左旋右旋是什么，可以先看<a href=\"//www.cnblogs.com/yyy2015c01/p/8457795.html\">信息学竞赛相关优秀文章合集</a>里的AVL树介绍。<br>对于AVL树是一种为了防止树结构不够优导致深度过深时间复杂度退化，在保持二叉搜索树性质不变的前提下进行的一种变换。简单说就是把往一边沉的树弄的两边平衡些。<br>而在Splay中，将特定点旋转到一定位置可以进行提取区间等操作，同时各种旋转间接的使树**基本平衡(是的，可以构造数据卡掉。Treap树对此表示同情)**。  </p>\n<hr>\n<p>左旋（下面代码里的表达:把S往上转一次）→<img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235430206-1994690340.gif\" alt=\"左旋\" loading=\"lazy\">  </p>\n<hr>\n<p>右旋（下面代码里的表达:把E往上转一次）→<img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235503124-141509937.gif\" alt=\"右旋\" loading=\"lazy\">  </p>\n<hr>\n<p>图片来源：<a href=\"//blog.csdn.net/sun_tttt/article/details/65445754\">http://blog.csdn.net/sun_tttt&#x2F;article&#x2F;details&#x2F;65445754</a><br>(文章是介绍红黑树的但是这个左旋右旋操作二叉搜索树通用)<br>论文里讲的很详细~<br>具体到这道题，引用一下zcysky在题解里给出的解释：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Splay可以用来维护序列。这样的话是把Splay当作一棵区间树。  </span><br><span class=\"line\">所谓区间树和权值树的区别，大概就是区间树每个节点代表的是一段区间（典型代表就是一般的线段树）  </span><br><span class=\"line\">权值树好理解一点，就是每个点真的代表一个点。  </span><br><span class=\"line\">至于翻转操作我们可以利用Splay的过程实现。详见代码。(Splay能维护序列反转也是它作为LCT的辅助树的条件之一)</span><br></pre></td></tr></table></figure>\n<p>作为模板题没什么好说的。这边文章主要记录板子用。感谢zcysky的板子。   </p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172902355-916514534.gif\" loading=\"lazy\"></h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m; </span><br><span class=\"line\"><span class=\"type\">int</span> fa[N],ch[N][<span class=\"number\">2</span>],size[N],rev[N],rt;<span class=\"comment\">//fa[a]表示a的父亲</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span><span class=\"comment\">//维护节点大小</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    size[x]=size[ch[x][<span class=\"number\">0</span>]]+size[ch[x][<span class=\"number\">1</span>]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> x)</span><span class=\"comment\">//标记下传</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rev[x])&#123;<span class=\"comment\">//是否翻转了区间</span></span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ch[x][<span class=\"number\">0</span>],ch[x][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        rev[ch[x][<span class=\"number\">0</span>]]^=<span class=\"number\">1</span>;rev[ch[x][<span class=\"number\">1</span>]]^=<span class=\"number\">1</span>;rev[x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">isLeft</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> ch[fa[x]][<span class=\"number\">0</span>] == x;&#125;<span class=\"comment\">//判断x是不是左儿子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//旋转</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=fa[x],z=fa[y];</span><br><span class=\"line\">\t<span class=\"type\">int</span> kind=<span class=\"built_in\">isLeft</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y==k)</span><br><span class=\"line\">        k=x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ch[z][!<span class=\"built_in\">isLeft</span>(y)]=x;</span><br><span class=\"line\">    ch[y][!kind]=ch[x][kind];</span><br><span class=\"line\">    </span><br><span class=\"line\">    fa[ch[y][!kind]]=y;</span><br><span class=\"line\">    ch[x][kind]=y;</span><br><span class=\"line\">    fa[y]=x;fa[x]=z;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);<span class=\"built_in\">pushup</span>(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//伸展操作，将x一直旋转直到x就是k</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x!=k)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=fa[x],z=fa[y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y!=k)</span><br><span class=\"line\">        \t<span class=\"built_in\">isLeft</span>(x)^<span class=\"built_in\">isLeft</span>(y) ? <span class=\"built_in\">rotate</span>(x,k):<span class=\"built_in\">rotate</span>(y,k);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//该节点与父亲分别是他们爸的左孩子\\右孩子或者是右孩子\\左孩子旋转2次x</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//该节点与父亲同是他们爸的左孩子或同是右孩子先旋转一次y再旋转一次x</span></span><br><span class=\"line\">        <span class=\"built_in\">rotate</span>(x,k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> f)</span> <span class=\"comment\">//建立一颗完全平衡的二叉树</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    ch[f][!(mid&lt;f)]=mid;</span><br><span class=\"line\">    fa[mid]=f;</span><br><span class=\"line\">    size[mid]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,mid<span class=\"number\">-1</span>,mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(mid+<span class=\"number\">1</span>,r,mid);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(mid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span><span class=\"comment\">//寻找以x为根的子树里第k大的</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> s=size[ch[x][<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==s+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(ch[x][<span class=\"number\">0</span>],k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(ch[x][<span class=\"number\">1</span>],k-s<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rever</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span><span class=\"comment\">//关于如何从Splay中提取区间请看上文思路中的论文</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"built_in\">find</span>(rt,l),y=<span class=\"built_in\">find</span>(rt,r+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,rt);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(y,ch[x][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"type\">int</span> z=ch[y][<span class=\"number\">0</span>];</span><br><span class=\"line\">    rev[z]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    rt=(n+<span class=\"number\">3</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">2</span>,rt);<span class=\"comment\">//区间左右各多加1个数方便提取区间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> L,R;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;L,&amp;R);</span><br><span class=\"line\">        <span class=\"built_in\">rever</span>(L,R);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n+<span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,<span class=\"built_in\">find</span>(rt,i)<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Splay"
            ]
        }
    ]
}