<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Cubic Y³ • Posts by &#34;code&#34; tag</title>
        <link>http://cubicy.icu</link>
        <description>CTF, life, thoughts and waifus.

 I&#39;m CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.
 Learning: Violin and electric guitar
 ❤❤❤ CTF, toy projects, anime
 ✖✖✖ Technological supremacy
 ✔✔✔ Independent thinking
 Resume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&amp;target=resume.tex&amp;command=xelatex).</description>
        <language>zh-CN</language>
        <pubDate>Tue, 05 Sep 2023 00:14:45 +0800</pubDate>
        <lastBuildDate>Tue, 05 Sep 2023 00:14:45 +0800</lastBuildDate>
        <category>Misc</category>
        <category>Write-Up</category>
        <category>出题</category>
        <category>CISCN</category>
        <category>web</category>
        <category>Hackergame</category>
        <category>SchoolBus</category>
        <category>Foo</category>
        <category>Bar</category>
        <category>冰菓</category>
        <category>古籍研究社</category>
        <category>晚安短信</category>
        <category>Treap</category>
        <category>BST</category>
        <category>Stack</category>
        <category>图论</category>
        <category>Kruskal</category>
        <category>Splay</category>
        <category>数链剖分</category>
        <category>持久化</category>
        <category>线段树</category>
        <category>树状数组</category>
        <category>LCA</category>
        <category>分块</category>
        <category>哈希</category>
        <category>Phar</category>
        <category>反序列化</category>
        <category>PHP</category>
        <category>Life</category>
        <category>Rust</category>
        <category>Lifetime</category>
        <category>Code</category>
        <category>ProgrammingLanguage</category>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2023/09/05/rust-lifetime/</guid>
            <title>Rust类型系统中的生命周期</title>
            <link>http://cubicy.icu/2023/09/05/rust-lifetime/</link>
            <category>Rust</category>
            <category>Lifetime</category>
            <category>Code</category>
            <category>ProgrammingLanguage</category>
            <pubDate>Tue, 05 Sep 2023 00:14:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Rust类型系统中的生命周期&#34;&gt;&lt;a href=&#34;#Rust类型系统中的生命周期&#34; class=&#34;headerlink&#34; title=&#34;Rust类型系统中的生命周期&#34;&gt;&lt;/a&gt;Rust类型系统中的生命周期&lt;/h1&gt;&lt;p&gt;Rust的生命周期应被视为类型系统的一部分。这是我的粗浅理解，理解错误难免，若发现恳请斧正！&lt;br&gt;以下几节试图渐进地、但从不同角度理解该问题；只要看懂一节也许就足够了，所以可以都看看？&lt;br&gt;&lt;strong&gt;提示：如果您有函数式编程基础，这篇文章看起来会很幼稚。“不就是一堆monad吗？”&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一开始看到生命周期和泛型写在一起也许会感到诧异：但事实上生命周期就是类型系统的一部分，泛型指明某一值能进行什么运算，生命周期指明某一值在什么区间内才有效、才可以参与运算。既然能接受泛型加入类型系统并参与类型的运算，生命周期也应同理。&lt;br&gt;贴段代码大伙大概感受一下：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; std::fmt::Display;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;longest_with_an_announcement&lt;/span&gt;&amp;lt;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;, T&amp;gt;(x: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;, y: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;, ann: T) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; T: Display&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;println!&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Announcement! &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, ann);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;gt; y.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;x,y是字符串slice，在C&amp;#x2F;C++中对应字符串指针；在C语言中，这样的&lt;strong&gt;指针在字符串失效后有可能仍被调用（悬垂指针）&lt;/strong&gt;，就带来危险。而Rust如何解决这一问题呢？答案是通过所有权机制和生命周期，确认值的有效期究竟何时开始，何时结束（这就称为&lt;strong&gt;生命周期&lt;/strong&gt;），禁止在值的生命周期外进行引用、读取、修改等操作。&lt;br&gt;Rust里没有“赋值”，只有“绑定”：我们把一个变量名绑定到一个值上，因此这些生命周期注解，仍旧针对的是值：它是一些实际存在的值的固有属性，不是虚无缥缈的。  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;根据现代Rust自带的一些约束推导规则，~95%的情况下生命周期注解能被编译器自动推断。但手动的注解有时无法避免：尤其是结构体中。  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，由于这个if的存在，Rust编译器无法判断返回值的有效期到底和x一样还是和y一样。&lt;br&gt;我们要添加类型推断（是的，生命周期也是一种泛型），x、y具有同名的生命周期注解’a，根据规则’a取x和y生命周期的交集：x,y都有效时，返回值一定有效！这样就避免了C&amp;#x2F;C++中悬垂指针带来的危险。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;也许有人会问，为什么调用该函数时，如果传入的参数生命周期不同，会取较短的？&lt;br&gt;我们要在集合论的角度考虑：我们说想要一只动物，那么给一只可爱小猫是可以接受的，因为猫属于动物。事实上，属于（∈）&lt;strong&gt;是&lt;/strong&gt;一种偏序关系。而生命周期也&lt;strong&gt;存在&lt;/strong&gt;一种偏序关系：我们把&lt;strong&gt;这种关系叫subtype&lt;/strong&gt;。假设对于两个生命周期L1和生命周期L2，且有L1是L2的subtype，那我们就记作L1&amp;lt;:L2，&lt;em&gt;vice versa&lt;/em&gt;.&lt;br&gt;&lt;strong&gt;显然，生命周期越长越“好”。所以一开始我们就知道&lt;code&gt;&amp;#39;long&amp;lt;:&amp;#39;short&lt;/code&gt;，也就是长寿的可以自裁(cast过去)变成短命的，但是短命的没法强行续命变成长命的。&lt;/strong&gt;&lt;br&gt;什么意思呢？&lt;strong&gt;简而言之，L1的约束比L2更松&lt;/strong&gt;。我们看一个例子，讨论&lt;strong&gt;函数间&lt;/strong&gt;的偏序关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设有函数f1(x)和f2(x)，唯一的区别是f1对x的生命周期的要求更长，那么能用f1的地方就能用f2，但能用f2的地方不一定能用f1，因此f2≼f1，长是短的一种subtype&lt;/li&gt;
&lt;li&gt;假设有函数f1()-&amp;gt;x和f2()-&amp;gt;x，唯一的区别是f1的返回值x的已知生命周期比f2长，那么能用f2返回值的地方就能用f1的返回值，但能用f1的地方不一定能用f2，因此f1≼f2，短是长的一种subtype&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;就像int32可以转int64一样，subtype可以向上cast；但向下是不安全的。因此在需要用到生命周期的地方，最严格的限制会被应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;因此，约束关系推导出来的最终生命周期是最严格的，宁可错杀一千也不会放过一个；就是可能有些人工检查过，可以保证安全的操作会被笨笨的生命周期约束拦下：这时就需要你动用unsafe黑魔法了&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;所以现在我们要把生命周期理解为类型系统的一部分。&lt;strong&gt;就像不同规格的整形之间安全的类型转换需要有单调的cast方向一样，生命周期的转换也有一定的方向。&lt;/strong&gt;&lt;br&gt;困惑可能来源于为什么不像整形一样规则简单（小int永远是大int的subtype），而包含生命周期的类型系统则有时并不如此：可能不存在这个偏序关系，也可能反过来下克上。&lt;br&gt;&lt;strong&gt;我们要明确，函数签名之类的是对类型进行的一种运算&lt;/strong&gt;。你可以理解为函数对值运算，而函数签名对类型进行运算。是不是有点像物理上的&lt;strong&gt;量纲分析！&lt;/strong&gt;。&lt;br&gt;因此，我们可以把上一节的&lt;code&gt;f1&lt;/code&gt; &lt;code&gt;f2&lt;/code&gt;都拆开来看，当作一种运算，看看他对生命周期做了什么。&lt;br&gt;例如，对于函数参数，参数受较短生命周期的约束，如上一节分析的那样&lt;code&gt;F(&amp;#39;long) &amp;lt;: F(&amp;#39;short)&lt;/code&gt;，而长寿者可以降级为短命者；而对返回值来说，恰恰相反：我们只知道至少可以活多么久，活更长对于使用返回值的表达式来说也一定可以接受，此时&lt;code&gt;(F()-&amp;gt;&amp;#39;short) &amp;lt;: (F()-&amp;gt;&amp;#39;long)&lt;/code&gt;……其中，&lt;code&gt;&amp;lt;:&lt;/code&gt;左右两侧的表达式——或者说函数签名——正对应上一节的&lt;code&gt;f1&lt;/code&gt; &lt;code&gt;f2&lt;/code&gt;，我们只是把&lt;code&gt;≼&lt;/code&gt;换成了&lt;code&gt;&amp;lt;:&lt;/code&gt;。&lt;br&gt;所以上面那个’a其实等效于在a、b固有的、不受约束的生命周期（远古版本rust必须写明所有生命周期，现在能部分自动推导只是语法糖）中添加了两条约束：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;longer&lt;/span&gt;&amp;lt;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;, &lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt;&amp;gt;(s1: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;, s2: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;:&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt;, &lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt;:&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; s2.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;gt; s1.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是对x和y分别绑定的值，其生命周期’a与’b有{‘a≼’b,’b≼’a}，也就是{‘a:’b, ‘b:’a}（显然可以推出’a&amp;#x3D;&amp;#x3D;’b）。&lt;br&gt;因此在手动指定后，在需要用到生命周期的地方，这两个参数以及返回值的生命周期就可以被推导啦。当然，根据上文所述，这样&lt;strong&gt;推导出来的生命周期约束是怎么严格怎么来&lt;/strong&gt;。&lt;br&gt;最后送自己和读者一句话：&lt;strong&gt;如果你被搞晕了，那就相信你的直觉；程序是人设计为人服务的，因此绝大部分情况下生命周期的限制是符合直觉的&lt;/strong&gt;（也就是你可以使用“显然”这一词）。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有没有想过一些运算过后，偏序关系不一定会保留&amp;#x2F;颠倒，还有可能会直接丢失！&lt;br&gt;那么对这种情况，非常推荐阅读关于subtyping, &lt;strong&gt;variance(covariant, invariant, contravariant)&lt;/strong&gt; 的参考资料：&lt;br&gt;&lt;a href=&#34;https://doc.rust-lang.org/nomicon/subtyping.html&#34;&gt;Subtyping and Variance - The Rustonomicon&lt;/a&gt;&lt;br&gt;然后你会发现倒过来（contravariant, 逆变）的其实&lt;strong&gt;就只有&lt;/strong&gt;这个函数返回值。  &lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
