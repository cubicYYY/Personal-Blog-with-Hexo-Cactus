{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"lca\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\n❤❤❤ CTF, toy projects, electric guitar\n✖✖✖ Technological supremacy\n\nRésumé👉 [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/",
            "url": "http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/",
            "title": "洛谷:P3950 部落冲突",
            "date_published": "2018-10-28T12:00:00.000Z",
            "content_html": "<p>原题地址:<a href=\"https://www.luogu.org/problemnew/show/P3950\">https://www.luogu.org/problemnew/show/P3950</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一棵树，每次给定一个操作，有如下两种：  </p>\n<ol>\n<li>将某条边染黑<br>2.询问给定的u,v两点间是否有边被染黑</li>\n</ol>\n<hr>\n<p>###思路<br>询问两点间是否有边被染黑只需要在求LCA时判一下就行。所以直接上树链剖分即可。<br>本题不需要使用线段树，使用树状数组查询路径上是否有任意一段区间和不为0即可。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) x&amp;-x</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">P war[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[maxn], dep[maxn], val[maxn], sz[maxn], top[maxn], son[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> tre[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> tot;</span><br><span class=\"line\"><span class=\"type\">int</span> cntw;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ch, x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>) &amp;&amp; ch != <span class=\"string\">&#x27;-&#x27;</span>) ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    ch == <span class=\"string\">&#x27;-&#x27;</span> ? f = <span class=\"number\">-1</span>, ch = <span class=\"built_in\">getchar</span>() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + ch - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, len, nxt;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>(<span class=\"type\">int</span> _to, <span class=\"type\">int</span> _len, <span class=\"type\">int</span> _nxt):<span class=\"built_in\">to</span>(_to), <span class=\"built_in\">len</span>(_len), <span class=\"built_in\">nxt</span>(_nxt) &#123;&#125;</span><br><span class=\"line\">&#125;E[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> h[maxn], cnte;</span><br><span class=\"line\"><span class=\"type\">int</span> L[maxn], R[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x;i &lt;= maxn; i += <span class=\"built_in\">lowbit</span>(i)) tre[i] += add;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>; <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x; i; i -= <span class=\"built_in\">lowbit</span>(i)) ans += tre[i]; <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    E[++cnte] = <span class=\"built_in\">Edge</span>(v, w, h[u]), h[u] = cnte;</span><br><span class=\"line\">    E[++cnte] = <span class=\"built_in\">Edge</span>(u, w, h[v]), h[v] = cnte;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sz[x] = <span class=\"number\">1</span>; dep[x] = dep[fa[x]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = E[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[to] = x;val[x] = E[i].len;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(to);</span><br><span class=\"line\">        sz[x] += sz[to];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz[to] &gt; sz[son[x]]) son[x] = to;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    L[x] = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == son[fa[x]]) top[x] = top[fa[x]];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> top[x] = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x]) <span class=\"built_in\">dfs2</span>(son[x]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = E[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa[x] || to == son[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    R[x] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L[x] &lt; L[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(L[x], <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L[x] &lt; L[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(L[x], <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">qsum</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;<span class=\"comment\">//其实可以查到有1就退出，不用查完和</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x] != top[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]] &lt; dep[top[y]])<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        ans += (<span class=\"built_in\">query</span>(L[x]) - <span class=\"built_in\">query</span>(L[top[x]] - <span class=\"number\">1</span>));</span><br><span class=\"line\">        x = fa[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x] &lt; dep[y])<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x!=y)</span><br><span class=\"line\">\t\tans += (<span class=\"built_in\">query</span>(L[x]) - <span class=\"built_in\">query</span>(L[y]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) <span class=\"built_in\">add_edge</span>(<span class=\"built_in\">read</span>(), <span class=\"built_in\">read</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> s[<span class=\"number\">50</span>];</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;C&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = <span class=\"built_in\">read</span>(), v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            <span class=\"built_in\">cut</span>(u, v);</span><br><span class=\"line\">            war[++cntw] = <span class=\"built_in\">P</span>(u, v);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;U&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> w = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            <span class=\"built_in\">connect</span>(war[w].first, war[w].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">qsum</span>(<span class=\"built_in\">read</span>(), <span class=\"built_in\">read</span>()) != <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "数链剖分",
                "树状数组",
                "LCA"
            ]
        }
    ]
}