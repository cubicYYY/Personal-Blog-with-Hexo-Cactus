{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"misc\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\nLearning: Electric guitar\n❤❤❤ CTF, toy projects, anime\n✖✖✖ Technological supremacy\n✔✔✔ Independent thinking\nResume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/",
            "url": "http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/",
            "title": "ACTF2022 - FFSK - Official WriteUp",
            "date_published": "2022-07-03T15:43:00.000Z",
            "content_html": "<h1 id=\"FFSK-WriteUp\"><a href=\"#FFSK-WriteUp\" class=\"headerlink\" title=\"FFSK - WriteUp\"></a>FFSK - WriteUp</h1><p><del>众所周知歪歪歪英文很烂求轻喷</del>  </p>\n<h3 id=\"0-Intro\"><a href=\"#0-Intro\" class=\"headerlink\" title=\"0. Intro\"></a>0. Intro</h3><p>In the game period, only one team had solved this problem: MapleBacon, a genius team at the University of British Columbia. I’m happy about their praise, but after checking their solution I think what truly “impressive” is their creativity and persistence.</p>\n<p><strong>Strongly recommend reading their awesome solution: <a href=\"https://maplebacon.org/2022/06/actf-ffsk/\">https://maplebacon.org/2022/06/actf-ffsk/</a></strong></p>\n<p>FSK &#x3D; Frequency-shift keying.</p>\n<p>FFSK &#x3D; Double FSK or Fast FSK, whatever.</p>\n<p>This problem is designed to invite participants to have a look at <em>the principle of communication</em>. </p>\n<h3 id=\"1-Description\"><a href=\"#1-Description\" class=\"headerlink\" title=\"1. Description\"></a>1. Description</h3><p>A journey to solve a misc problem always begins from a problem description. Here’s it:</p>\n<blockquote>\n<p>I’ve bought the <strong>second commercial modem</strong> for computers in a big city of the UK.</p>\n<blockquote>\n<p>激情澎湃的球迷迷恋这个地方。遇上球赛季，酒吧里的热情、呐喊、啤酒、摇滚，足球让这个城市充满活力和希望。<br>从三万英尺的云端望去，往日的生活成了一个遥远微小的地图。<br>阳光明媚的日子，开始出发，北京时间00:50 开始起飞，一个梦的距离，就可以到达荷兰阿姆斯特丹，短暂停留之后，然后转机飞往英国<br>南航的飞机配置完备，全程可以充电，还有wifi，影视屏有面前最新的电影。睡睡醒醒，在飞机上觅到一部《北京爱情故事》，让我在三万英尺的空中哭的稀里哗啦。</p>\n</blockquote>\n</blockquote>\n<p>Just Google it, and you’ll realize what it means:</p>\n<ul>\n<li><p><strong>second commercial modem→Bell 103, corresponds with the file name “modem.wav”</strong></p>\n</li>\n<li><p>a big city in the UK: <strong>Manchester</strong>, which refers to the famous coding method.</p>\n</li>\n<li><p>The source of the long Chinese paragraph: <a href=\"https://kknews.cc/zh-hk/travel/e6yjp34.html\">https://kknews.cc/zh-hk/travel/e6yjp34.html</a></p>\n<p>  It describes a trip to Manchester, which is indeed a big city in the UK.</p>\n</li>\n</ul>\n<h3 id=\"2-Bell-103\"><a href=\"#2-Bell-103\" class=\"headerlink\" title=\"2. Bell 103\"></a>2. Bell 103</h3><p>Here’s an article that shows how the Bell 103 protocol works: <a href=\"https://vigrey.com/blog/emulating-bell-103-modem\">https://vigrey.com/blog/emulating-bell-103-modem</a></p>\n<p>So two key points need your attention. First, characters are stored in ASCII code and are <strong>little-endian;</strong> second, it has 2 channels for communication: one for the server-side(2025&#x2F;2225 Hz), and another for the client-side(1070&#x2F;1270 Hz).</p>\n<p>You can also find it from the spectrogram of the .wav file.</p>\n<h3 id=\"2-Server-channel\"><a href=\"#2-Server-channel\" class=\"headerlink\" title=\"2. Server channel\"></a>2. Server channel</h3><p>Using the <code>minimodem</code>tool (See MapleBacon’s write-up) is functional.</p>\n<p>Also, you can find some useful tools in GitHub: <a href=\"https://github.com/laurenschneider/audiodecoder\">https://github.com/laurenschneider/audiodecoder</a></p>\n<p>It may be a faster way. In fact, the <code>solve.py</code> is based on its code.</p>\n<p>After all, you’ll see this on the server channel:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HINT_Hamming@ddddPdddddddPdddPdPP(20).ECCode; Content: Why do you use such</span><br><span class=\"line\">a slow method with a high Bit Error Ratio for communication? It took me a lot of</span><br><span class=\"line\">effort to correct bit-flips, making sure the communication was less</span><br><span class=\"line\">error-prone...that is 2 say, THE ORIGINAL PROTOCOL IS WRAPPED BY SOME OTHER</span><br><span class=\"line\">TRANSFORMATIONS! Fortunately, we can now communicate properly on another channel</span><br><span class=\"line\">while enjoying a vacation in this BIG CITY--I mean, IEEE 802.3.....Wait, what is</span><br><span class=\"line\">the new protocol? Guess by yourself!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Client-channel\"><a href=\"#3-Client-channel\" class=\"headerlink\" title=\"3. Client channel\"></a>3. Client channel</h3><p>We can extract the bit string on this channel using the same method but just make some tweaks of frequency. You’ll get a bit string of 53640 bits.</p>\n<p>Notice that the bit string contains only “01” “10”, that is what <strong>Manchester is</strong> all about. The <code>IEEE 802.3</code>mentioned in the server channel message is actually to make sure you decode in the right way: there are 2 opposite ways to map 01&#x2F;10 to 1&#x2F;0, but what is widely used is defined in IEEE 802.3, which says “01”→1 and “10”→0</p>\n<p>Then the key problem is to solve Hamming code. From the given information, you’ll realize the block size is 20bits. Implement it by yourself or just Google&#x2F;GitHub&#x2F;StackOverflow it.</p>\n<p>Find every “1” bit in a block, XOR their <strong>positions</strong>, and magically you got the error bit position(0 if no error) which is a well-designed feature of Hamming code, then just flip the bit. </p>\n<p>Actually, every block has, and only has an error bit: that’s an intended design to notify you that you’re on the right way :)</p>\n<h3 id=\"4-Final-Step\"><a href=\"#4-Final-Step\" class=\"headerlink\" title=\"4. Final Step\"></a>4. Final Step</h3><p>Now you’ve got the cipher bit string: just applied Bell 103 decoder to it once again. </p>\n<p>It’ll yield a string that starts with <code>data:image/png;base64,</code></p>\n<p>An experienced CTFer will immediately put it into the browser (like what MapleBacon did). Or you can find a random online converter to recover this Base64-encoded image. It’s a QR Code. Scan it, and got the flag.</p>\n<h3 id=\"5-Hints-Explanation\"><a href=\"#5-Hints-Explanation\" class=\"headerlink\" title=\"5. Hints Explanation\"></a>5. Hints Explanation</h3><ol>\n<li><p><code>所有人都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端。可是当今皇帝的祖父 时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝， 就下了一道敕令，命令全体臣民吃鸡蛋时打破鸡蛋较小的一端，违令者重罚。 老百姓们 对这项命令极为反感。历史告诉我们，由此曾发生过六次叛乱，其中一个皇帝送了命，另 一个丢了王位…关于这一争端，曾出版过几百本大部著作，不过大端派的书一直是受禁的 ，法律也规定该派的任何人不得做官。 ——乔纳森·斯威夫特，《格列佛游记》</code></p>\n<p> It is a quote from Gulliver’s Travels.  Fun fact: this paragraph is <strong>exactly the original source of the 2 words used in modern computer science: “big-endian” &amp; “little-endian”.</strong></p>\n<p> This hint is intended to guide those who are stuck because of their ignorance of the contents(especially the coding method) of the Bell 103 protocol.</p>\n</li>\n<li><p><code>Hamming code block size: 20bits</code></p>\n<p> Noticed that minimodem may yield partly corrupt text and mislead participants. This hint is to make sure they see the hint hidden at the beginning of the service-side channel message.</p>\n</li>\n<li><p><code>Bell 103</code></p>\n<p> For those who ignored the problem description.</p>\n</li>\n</ol>\n<h3 id=\"6-Script-to-Solve\"><a href=\"#6-Script-to-Solve\" class=\"headerlink\" title=\"6. Script to Solve\"></a>6. Script to Solve</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># goertzel.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Module to create a Goertzel filter</span></span><br><span class=\"line\"><span class=\"string\">Original source: https://github.com/laurenschneider/audiodecoder</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Goertzel</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, rate, freq</span>):</span><br><span class=\"line\">        self.normalize = <span class=\"number\">0</span></span><br><span class=\"line\">        self.coeffs = <span class=\"number\">0</span></span><br><span class=\"line\">        self.sample_rate = rate</span><br><span class=\"line\">        self.target_freq = freq</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_coeff</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Precompute coefficients needed for filter equation.</span></span><br><span class=\"line\"><span class=\"string\">        Coeff formulas courtesy of Prof. Massey</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        n = <span class=\"number\">160</span></span><br><span class=\"line\"></span><br><span class=\"line\">        w0 = (<span class=\"number\">2</span> * np.pi * self.target_freq) / self.sample_rate</span><br><span class=\"line\">        self.normalize = np.exp(<span class=\"number\">1j</span> * w0 * n)</span><br><span class=\"line\">        self.coeffs = np.array([np.exp((-<span class=\"number\">1j</span>) * w0 * k) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter</span>(<span class=\"params\">self, samples</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Goertzel filter equation</span></span><br><span class=\"line\"><span class=\"string\">        :param samples: array of samples</span></span><br><span class=\"line\"><span class=\"string\">        :returns: amplitude</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        y = self.normalize * <span class=\"number\">160</span> * np.dot(self.coeffs, samples)</span><br><span class=\"line\">        ampl = np.<span class=\"built_in\">abs</span>(y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ampl</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># decode.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Decode a wav file using a Goertzel filter.</span></span><br><span class=\"line\"><span class=\"string\">Modified from https://github.com/laurenschneider/audiodecoder</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> goertzel <span class=\"keyword\">import</span> Goertzel</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> wavfile</span><br><span class=\"line\"></span><br><span class=\"line\">DATA = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">filepath = os.path.join(DATA, <span class=\"string\">&quot;filename.wav&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Read sample rate and data from audio file</span></span><br><span class=\"line\">rate, data = wavfile.read(filepath)</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">bit_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">mark_freq = <span class=\"number\">2225</span></span><br><span class=\"line\">space_freq = <span class=\"number\">2025</span></span><br><span class=\"line\">mark_filter = Goertzel(rate, mark_freq)</span><br><span class=\"line\">space_filter = Goertzel(rate, space_freq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calculate coefficients for each filter</span></span><br><span class=\"line\">mark_filter.calculate_coeff()</span><br><span class=\"line\">space_filter.calculate_coeff()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(data.size + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># for each chunk of 160 samples</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i%<span class=\"number\">160</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = i - <span class=\"number\">160</span></span><br><span class=\"line\">        end = i</span><br><span class=\"line\">        samples = data[start:end]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get amplitutes of sample set</span></span><br><span class=\"line\">        mark_amp = mark_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\">        space_amp = space_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mark_amp &gt; space_amp:</span><br><span class=\"line\">            <span class=\"comment\"># bit is 1</span></span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># bit is zero</span></span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        bit_string = to_add + bit_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"built_in\">len</span>(bit_string)+<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%<span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = x - <span class=\"number\">9</span></span><br><span class=\"line\">        end = x - <span class=\"number\">1</span></span><br><span class=\"line\">        message = <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bit_string[start:end],<span class=\"number\">2</span>)) + message</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set target frequencies</span></span><br><span class=\"line\">mark_freq = <span class=\"number\">1270</span></span><br><span class=\"line\">space_freq = <span class=\"number\">1070</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create two filters</span></span><br><span class=\"line\">mark_filter = Goertzel(rate, mark_freq)</span><br><span class=\"line\">space_filter = Goertzel(rate, space_freq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calculate coefficients for each filter</span></span><br><span class=\"line\">mark_filter.calculate_coeff()</span><br><span class=\"line\">space_filter.calculate_coeff()</span><br><span class=\"line\"></span><br><span class=\"line\">bit_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">message = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(data.size + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># for each chunk of 160 samples</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i%<span class=\"number\">160</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = i - <span class=\"number\">160</span></span><br><span class=\"line\">        end = i</span><br><span class=\"line\">        samples = data[start:end]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get amplitutes of sample set</span></span><br><span class=\"line\">        mark_amp = mark_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\">        space_amp = space_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mark_amp &gt; space_amp:</span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        bit_string = to_add + bit_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingBolck</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(message)==<span class=\"number\">15</span>)</span><br><span class=\"line\">    message=message[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    code = <span class=\"number\">0</span></span><br><span class=\"line\">    m_pos = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ind+<span class=\"number\">1</span>)&amp;(ind): <span class=\"comment\"># Not parity check bit</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">int</span>(message[m_pos],<span class=\"number\">2</span>):</span><br><span class=\"line\">                code = code ^ (<span class=\"number\">1</span>&lt;&lt;ind)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b1</span>)&lt;&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b10</span>)&lt;&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b100</span>)&lt;&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b1000</span>)&lt;&lt;<span class=\"number\">4</span>)</span><br><span class=\"line\">            m_pos = m_pos + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code = code ^ (<span class=\"number\">1</span>&lt;&lt;random.randint(<span class=\"number\">0</span>,<span class=\"number\">19</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&#123;0:020b&#125;&quot;</span>.<span class=\"built_in\">format</span>(code)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;from &quot;</span>+message+<span class=\"string\">&quot; to &quot;</span>+retStr)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingBolckInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(message)==<span class=\"number\">20</span>)</span><br><span class=\"line\">    code = <span class=\"built_in\">int</span>(message,<span class=\"number\">2</span>)</span><br><span class=\"line\">    wrong = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span>&lt;&lt;ind)&amp;code:</span><br><span class=\"line\">            wrong = wrong ^ (ind+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> wrong:</span><br><span class=\"line\">        code = code ^ (<span class=\"number\">1</span>&lt;&lt;(wrong-<span class=\"number\">1</span>))</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ind+<span class=\"number\">1</span>)&amp;(ind): <span class=\"comment\"># Not parity check bit</span></span><br><span class=\"line\">            retStr = retStr + (<span class=\"string\">&quot;1&quot;</span> <span class=\"keyword\">if</span> code&amp;(<span class=\"number\">1</span>&lt;&lt;ind) <span class=\"keyword\">else</span> <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Hamming</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(message),<span class=\"number\">15</span>):</span><br><span class=\"line\">        retStr = retStr + HammingBolck(message[ind:ind+<span class=\"number\">15</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(message),<span class=\"number\">20</span>):</span><br><span class=\"line\">        retStr = retStr + HammingBolckInv(message[ind:ind+<span class=\"number\">20</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manchester</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> message:</span><br><span class=\"line\">        retStr += <span class=\"string\">&quot;01&quot;</span> <span class=\"keyword\">if</span> char==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manchesterInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(message), <span class=\"number\">2</span>):</span><br><span class=\"line\">        char = message[ind]</span><br><span class=\"line\">        retStr += <span class=\"string\">&quot;0&quot;</span> <span class=\"keyword\">if</span> char==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\">bit_string=bit_string[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">bit_string = HammingInv(manchesterInv(bit_string))[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"built_in\">len</span>(bit_string)+<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%<span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = x - <span class=\"number\">9</span></span><br><span class=\"line\">        end = x - <span class=\"number\">1</span></span><br><span class=\"line\">        message = <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bit_string[start:end],<span class=\"number\">2</span>)) + message</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Final-Words\"><a href=\"#7-Final-Words\" class=\"headerlink\" title=\"7. Final Words\"></a>7. Final Words</h3><p>In my eyes, a good misc problem should not be an annoying puzzle. Steps to solve a misc problem have to be reasonable. For example, in this problem, Manchester coding is applied after the application of Hamming coding: that’s because the former is channel coding, and the latter is source coding. We shouldn’t just pick some random encryption and apply it to plaintext.</p>\n<p> I have made my best to make the solving process more natural. I hope you enjoy digging deep into the problem. You’ll earn much more fun than those who can just use tools written by others without understanding fundamental principles (like me).</p>\n<p>ご武運を！</p>\n",
            "tags": [
                "Misc",
                "Write-Up",
                "出题"
            ]
        }
    ]
}