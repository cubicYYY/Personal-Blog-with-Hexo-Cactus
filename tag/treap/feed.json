{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"treap\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\nLearning: Electric guitar\n❤❤❤ CTF, toy projects, anime\n✖✖✖ Technological supremacy\nResume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "http://cubicy.icu/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "替罪羊树学习笔记",
            "date_published": "2018-08-03T08:53:00.000Z",
            "content_html": "<p>博客咕咕咕了好久……最近会逐步继续恢复更新博客的。<br>最近又在学习二叉搜索树。实测发现替罪羊树快的飞起(时间约Splay的1&#x2F;2)~写起来还比较简单，决定来一波。<br>（那为什么还要用Splay呢？因为Splay是序列之王！还能维护LCT！（你要用非旋Treap（FHQ-Treap）我也没意见））<br>替罪羊树的主要思想就是当出现重量失衡的时候，<strong>把罪魁祸首的那个子树拎出来，重新按最完美的方式（也就是近似完全二叉树）构造一遍再接回去</strong>。<br>如何定义某个子树不平衡：当这个子树的左右子树其中之一的“重量”（节点个数）超过了整个子树的α*100%时，我们认为这个子树不平衡。<br>举例：α&#x3D;0.75时，如果一个子树左子树有4个节点，右子树有1个，这个子树大小就是4+1+1&#x3D;6，左子树占比超过了α*100%（即75%），这个子树不平衡，需要重构。<br>显然，α取值介于0.5至1.0之间，越小树越平衡但重构次数越多，越大重构次数越少但树越不平衡。太大太小都会出事。<strong>一般而言，α取0.75</strong>。如果题目查询次数远大于插入次数，可略微降低α取值（比如α&#x3D;0.70）；若远小于，则略升高（如α&#x3D;0.80）。<br>下面以<a href=\"https://www.luogu.org/problemnew/show/P3369\">洛谷3369【模板】普通平衡树</a>为例：  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个板子有改进之处：比如删除节点可以打上删除懒标记，单个节点可以记录同一数字数量避免多余节点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inf (1&lt;&lt;30)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> maxn (2100000)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> db double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> il inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> db al=<span class=\"number\">0.75</span>;<span class=\"comment\">//α</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> son[<span class=\"number\">2</span>],fa,size,num;<span class=\"comment\">//左右孩子储存地址，节点父亲，以该节点为根子树的重量，该节点储存的数字</span></span><br><span class=\"line\">&#125; t[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n,cnt,root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">bool</span> <span class=\"title\">balance</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>   <span class=\"comment\">//判断子树是否平衡</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (db)(t[id].size*al&gt;=(db)t[ t[id].son[<span class=\"number\">0</span>] ].size) &amp;&amp; (db)( t[id].size*al&gt;=(db)t[t[ id].son[<span class=\"number\">1</span>] ].size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> cur[maxn],sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">recycle</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>    <span class=\"comment\">//压扁，把需要重构的子树拎出来先拍扁成序列</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[id].son[<span class=\"number\">0</span>]) <span class=\"built_in\">recycle</span>(t[id].son[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    cur[++sum]=id;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[id].son[<span class=\"number\">1</span>]) <span class=\"built_in\">recycle</span>(t[id].son[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">build</span><span class=\"params\">(RG <span class=\"type\">int</span> l,RG <span class=\"type\">int</span> r)</span>   <span class=\"comment\">//递归建树，使结构最优</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>,id=cur[mid];</span><br><span class=\"line\">    t[ t[id].son[<span class=\"number\">0</span>]=<span class=\"built_in\">build</span>(l,mid<span class=\"number\">-1</span>) ].fa=id;</span><br><span class=\"line\">    t[ t[id].son[<span class=\"number\">1</span>]=<span class=\"built_in\">build</span>(mid+<span class=\"number\">1</span>,r) ].fa=id;</span><br><span class=\"line\">    t[id].size=t[ t[id].son[<span class=\"number\">0</span>] ].size+t[ t[id].son[<span class=\"number\">1</span>] ].size+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>   <span class=\"comment\">//重构子树，再“接回去”</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">recycle</span>(id);</span><br><span class=\"line\">    RG <span class=\"type\">int</span> fa=t[id].fa,Son=( t[ t[id].fa ].son[<span class=\"number\">1</span>]==id );</span><br><span class=\"line\">    RG <span class=\"type\">int</span> cur=<span class=\"built_in\">build</span>(<span class=\"number\">1</span>,sum);</span><br><span class=\"line\">    t[ t[fa].son[Son]=cur ].fa=fa;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id==root) root=cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span><span class=\"comment\">//插入一个数字x</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root,cur=++cnt;</span><br><span class=\"line\">    t[cur].size=<span class=\"number\">1</span>,t[cur].num=x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123; <span class=\"comment\">//找到适合位置插入</span></span><br><span class=\"line\">        t[now].size++;</span><br><span class=\"line\">        RG <span class=\"type\">bool</span> Son=(x&gt;=t[now].num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( t[now].son[Son] ) now=t[now].son[Son];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            t[ t[now].son[Son]=cur ].fa=now;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=cur; i; i=t[i].fa) <span class=\"keyword\">if</span>(!<span class=\"built_in\">balance</span>(i)) flag=i;<span class=\"comment\">//注意：重建时取深度最浅的，以避免小子树重构完大子树还重构，浪费时间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">rebuild</span>(flag); <span class=\"comment\">//插入往往会导致不平衡,这时需要重建不平衡的子树即可</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">get_num</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span>   <span class=\"comment\">//查询 x 在树中的节点编号（在数组中储存位置下标）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[now].num==x) <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> now=t[now].son[ t[now].num&lt;x ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>   <span class=\"comment\">//删除</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[id].son[<span class=\"number\">0</span>] &amp;&amp; t[id].son[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        RG <span class=\"type\">int</span> cur=t[id].son[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t[cur].son[<span class=\"number\">1</span>]) cur=t[cur].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[id].num=t[cur].num;</span><br><span class=\"line\">        id=cur;</span><br><span class=\"line\">    &#125; <span class=\"comment\">//删除操作需要找到左子树的最后一个节点或右子树的第一个节点来顶替,优先找左子树</span></span><br><span class=\"line\">    RG <span class=\"type\">int</span> Son=(t[id].son[<span class=\"number\">0</span>]) ? t[id].son[<span class=\"number\">0</span>]:t[id].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">    RG <span class=\"type\">int</span> k=( t[ t[id].fa ].son[<span class=\"number\">1</span>]==id );</span><br><span class=\"line\">    t[ t[ t[id].fa ].son[k]=Son ].fa=t[id].fa;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=t[id].fa; i; i=t[i].fa) t[i].size--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id==root) root=Son;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">get_rank</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span>   <span class=\"comment\">//查 x 的排名</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(now) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[now].num&lt;x) ans+=t[ t[now].son[<span class=\"number\">0</span>] ].size+<span class=\"number\">1</span>,now=t[now].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> now=t[now].son[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">get_kth</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span>   <span class=\"comment\">//查树中的第 k 个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[ t[now].son[<span class=\"number\">0</span>] ].size==x<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t[ t[now].son[<span class=\"number\">0</span>] ].size&gt;=x) now=t[now].son[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x-=t[ t[now].son[<span class=\"number\">0</span>] ].size+<span class=\"number\">1</span>,now=t[now].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt=<span class=\"number\">2</span>,root=<span class=\"number\">1</span>;</span><br><span class=\"line\">    t[<span class=\"number\">1</span>].num=-inf,t[<span class=\"number\">1</span>].size=<span class=\"number\">2</span>,t[<span class=\"number\">1</span>].son[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">    t[<span class=\"number\">2</span>].num=inf,t[<span class=\"number\">2</span>].size=<span class=\"number\">1</span>,t[<span class=\"number\">2</span>].fa=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    RG <span class=\"type\">int</span> type,x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;type,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type==<span class=\"number\">1</span>) <span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">2</span>) <span class=\"built_in\">erase</span>( <span class=\"built_in\">get_num</span>(x) );</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">get_rank</span>(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,t[ <span class=\"built_in\">get_kth</span>(x+<span class=\"number\">1</span>) ].num);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,t[<span class=\"built_in\">get_kth</span>(<span class=\"built_in\">get_rank</span>(x))].num);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,t[<span class=\"built_in\">get_kth</span>(<span class=\"built_in\">get_rank</span>(x+<span class=\"number\">1</span>)+<span class=\"number\">1</span>)].num);<span class=\"comment\">//注意此处 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Treap"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/",
            "url": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/",
            "title": "洛谷:P1486 [NOI2004]郁闷的出纳员",
            "date_published": "2018-04-09T14:23:00.000Z",
            "content_html": "<p>原题地址:<a href=\"https://www.luogu.org/problemnew/show/P1486\">https://www.luogu.org/problemnew/show/P1486</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>一个序列a，初始为空。<br>随时插入一个数，查询第k大，全体加，全体减。<br>但是如果任何数在任何时刻低于给定的下界MIN，则立即移除出序列。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>插入，查询第k大，容易发现是BST题。于是上Treap。<br>全体加全体减暴力加肯定不行，考虑用变量delta储存变化情况。全体加n就是delta+&#x3D;n（n为负就是减）<br>于是每个数实际的值是：树里储存该数的值+delta  ——①<br>减了之后可能会有数低于下界，查找最小的数判断是不是小于MIN，是的话删除，重复直到不再小于MIN。<br>注意新插入的数不应该受之前的加减影响，所以将一个数字num插入树中时，如果直接把num插入树中，就变成num+delta了。<br>实际应该插入的是num-delta，这样结合上文①，现在这个数实际的值就是num本身了。<br>提供一个指针实现的Treap，不推荐使用其实，调的时候快把我搞吐血。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MAXN=<span class=\"number\">200010</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d,rnd,size;</span><br><span class=\"line\">        Node *ch[<span class=\"number\">2</span>],*pa;</span><br><span class=\"line\">    &#125;pool[MAXN],*root;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Node *p=&amp;pool[++tot];</span><br><span class=\"line\">        p-&gt;d=d;p-&gt;rnd=<span class=\"built_in\">rand</span>();p-&gt;size=<span class=\"number\">1</span>;</span><br><span class=\"line\">        p-&gt;ch[<span class=\"number\">0</span>]=p-&gt;ch[<span class=\"number\">1</span>]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p?p-&gt;size:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p-&gt;size=<span class=\"built_in\">size</span>(p-&gt;ch[<span class=\"number\">0</span>])+<span class=\"built_in\">size</span>(p-&gt;ch[<span class=\"number\">1</span>])+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(Node *p,<span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Node *pa=p-&gt;pa,*gp=pa-&gt;pa,*son=p-&gt;ch[t^<span class=\"number\">1</span>];</span><br><span class=\"line\">        pa-&gt;ch[t]=son;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(son)son-&gt;pa=pa;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(gp)gp-&gt;ch[pa==gp-&gt;ch[<span class=\"number\">1</span>]]=p;</span><br><span class=\"line\">        p-&gt;pa=gp;</span><br><span class=\"line\">        p-&gt;ch[t^<span class=\"number\">1</span>]=pa;</span><br><span class=\"line\">        pa-&gt;pa=p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa==root)root=p;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(pa);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">treap</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==root || p-&gt;rnd &gt;= p-&gt;pa-&gt;rnd)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p,p==p-&gt;pa-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *r,Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            root=p;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> f=(p-&gt;d &gt;= r-&gt;d);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!r-&gt;ch[f])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r-&gt;ch[f]=p;</span><br><span class=\"line\">            p-&gt;pa=r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(r-&gt;ch[f],p);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">find</span><span class=\"params\">(Node *r,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>]))<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(r-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(r-&gt;ch[<span class=\"number\">1</span>],x-<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;ch[<span class=\"number\">0</span>] &amp;&amp; !p-&gt;ch[<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==root)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                root=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Node *pa=p-&gt;pa;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pa)</span><br><span class=\"line\">                pa-&gt;ch[p==pa-&gt;ch[<span class=\"number\">1</span>]]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p!=root)</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(p=p-&gt;pa);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;ch[<span class=\"number\">0</span>] &amp;&amp; p-&gt;ch[<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> f=(p-&gt;ch[<span class=\"number\">1</span>]-&gt;rnd &lt; p-&gt;ch[<span class=\"number\">0</span>]-&gt;rnd);</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p-&gt;ch[f],f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> f=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;ch[<span class=\"number\">0</span>])f=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p-&gt;ch[f],f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">del</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(Node *r,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>]))<span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(r-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> r-&gt;d;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(r-&gt;ch[<span class=\"number\">1</span>],x-<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">getUpper</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c=<span class=\"built_in\">getchar</span>())</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(c))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">srand</span>((<span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> Q,Min,x;</span><br><span class=\"line\">        <span class=\"type\">char</span> op;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;Q,&amp;Min);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>,delta=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(Q--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            op=<span class=\"built_in\">getUpper</span>();</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(op)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x&lt;Min)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    Node *p=<span class=\"built_in\">newnode</span>(x-delta);</span><br><span class=\"line\">                    <span class=\"built_in\">insert</span>(root,p);</span><br><span class=\"line\">                    <span class=\"built_in\">treap</span>(p);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">                    delta+=x;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    delta-=x;</span><br><span class=\"line\">                    <span class=\"type\">int</span> xtq=<span class=\"built_in\">size</span>(root);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=xtq;i++)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">kth</span>(root,<span class=\"number\">1</span>)+delta&lt;Min)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">del</span>(<span class=\"built_in\">find</span>(root,<span class=\"number\">1</span>));</span><br><span class=\"line\">                            ans++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x&gt;<span class=\"built_in\">size</span>(root))<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">kth</span>(root,<span class=\"built_in\">size</span>(root)-x+<span class=\"number\">1</span>)+delta);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Treap",
                "BST"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/",
            "url": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/",
            "title": "洛谷:P3384 [HNOI2004]宠物收养场",
            "date_published": "2018-04-09T14:05:00.000Z",
            "content_html": "<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P3384</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一些序列<strong>（没有重复数字）</strong>，每个序列支持：<br>给定一些数k<strong>（对于每个序列不重复）</strong>，每次在序列里找到最接近k的数删除（如果有2个数字与k差一样，即分别是k-b和k+b，则选择较小的k-b），累加与k的差，输出。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>其实关键就是维护一个有序序列，支持插入，查询前继后继，删除指定数字。<br>自然我们会想到手打平衡树，Treap&#x2F;Splay皆可。（这里只有旋转实现的Treap，非旋Treap（Split+Merge）和Splay日后加上）<br>Tips:为了防止越界等问题以及方便提取区间（尤其是Splay），序列前后一般塞上一个-INF和INF<br>然而作为C++选手，我们应该妙用STL。set可以实现这样的功能，内部是红黑树实现的也很快。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ol>\n<li>旋转实现的Treap(160ms,3.03MB)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF=<span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">randad</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">114514</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">2147483647</span>);<span class=\"comment\">//48271使得随机数有完全周期，即2147483647内取遍不重复 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> delta=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pri,val,ch[<span class=\"number\">2</span>],size,tot;</span><br><span class=\"line\"><span class=\"comment\">//pri:Treap的随机数</span></span><br><span class=\"line\"><span class=\"comment\">//val:数字</span></span><br><span class=\"line\"><span class=\"comment\">//ch[0,1]:左孩子右孩子</span></span><br><span class=\"line\"><span class=\"comment\">//size:以该节点为根的子树里有几个数字</span></span><br><span class=\"line\"><span class=\"comment\">//tot:这个数字出现了几次（本题无用）</span></span><br><span class=\"line\">&#125;T[<span class=\"number\">111111</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> k,size=<span class=\"number\">0</span>,ANS,ans;<span class=\"comment\">//k:根节点，size:树的大小,ANS:临时，ans:赶走了几个人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;T[k].size=T[T[k].ch[<span class=\"number\">0</span>]].size+T[T[k].ch[<span class=\"number\">1</span>]].size+T[k].tot;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rturn</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//右旋，把k旋到右边，k左孩子提到根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=T[k].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">    T[k].ch[<span class=\"number\">0</span>]=T[t].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[t].ch[<span class=\"number\">1</span>]=k;</span><br><span class=\"line\">    T[t].size=T[k].size;</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(k);</span><br><span class=\"line\">    k=t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lturn</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//左旋，把k旋到左边，k右孩子提到根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=T[k].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[k].ch[<span class=\"number\">1</span>]=T[t].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">    T[t].ch[<span class=\"number\">0</span>]=k;</span><br><span class=\"line\">    T[t].size=T[k].size;</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(k);</span><br><span class=\"line\">    k=t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> val)</span> <span class=\"comment\">//插入</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        k=size;</span><br><span class=\"line\">        T[k].pri=<span class=\"built_in\">randad</span>();</span><br><span class=\"line\">        T[k].val=val;</span><br><span class=\"line\">        T[k].size=T[k].tot=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T[k].size++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T[k].val==val) T[k].tot++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val&gt;T[k].val) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(T[k].ch[<span class=\"number\">1</span>],val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[T[k].ch[<span class=\"number\">1</span>]].pri&lt;T[k].pri) <span class=\"built_in\">lturn</span>(k);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(T[k].ch[<span class=\"number\">0</span>],val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[T[k].ch[<span class=\"number\">0</span>]].pri&lt;T[k].pri) <span class=\"built_in\">rturn</span>(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> val)</span><span class=\"comment\">//删除值为val的数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T[k].val==val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[k].tot&gt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            T[k].tot--;</span><br><span class=\"line\">            T[k].size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[k].ch[<span class=\"number\">0</span>]==<span class=\"number\">0</span>||T[k].ch[<span class=\"number\">1</span>]==<span class=\"number\">0</span>) k=T[k].ch[<span class=\"number\">0</span>]+T[k].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T[T[k].ch[<span class=\"number\">0</span>]].pri&lt;T[T[k].ch[<span class=\"number\">1</span>]].pri) <span class=\"built_in\">rturn</span>(k),<span class=\"built_in\">del</span>(k,val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">lturn</span>(k),<span class=\"built_in\">del</span>(k,val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val&gt;T[k].val) T[k].size--,<span class=\"built_in\">del</span>(T[k].ch[<span class=\"number\">1</span>],val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> T[k].size--,<span class=\"built_in\">del</span>(T[k].ch[<span class=\"number\">0</span>],val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">xth</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询第x小的数是什么 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>||x==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=T[T[k].ch[<span class=\"number\">0</span>]].size) <span class=\"keyword\">return</span> <span class=\"built_in\">xth</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;T[T[k].ch[<span class=\"number\">0</span>]].size+T[k].tot) <span class=\"keyword\">return</span> <span class=\"built_in\">xth</span>(T[k].ch[<span class=\"number\">1</span>],x-T[T[k].ch[<span class=\"number\">0</span>]].size-T[k].tot);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> T[k].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询第x小数在树中位置 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>||x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=T[T[k].ch[<span class=\"number\">0</span>]].size)<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==T[T[k].ch[<span class=\"number\">0</span>]].size+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(T[k].ch[<span class=\"number\">1</span>],x-T[T[k].ch[<span class=\"number\">0</span>]].size<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询不比x大的且最接近x的数所在位置（x前继）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[k].val&lt;x) ANS=k,<span class=\"built_in\">pre</span>(T[k].ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">pre</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询不比x小的且最接近x的数所在位置（x后继）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[k].val&gt;x) ANS=k,<span class=\"built_in\">next</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">next</span>(T[k].ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Catch</span><span class=\"params\">(<span class=\"type\">int</span> num)</span><span class=\"comment\">//匹配宠物和饲养人</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">pre</span>(k,num),a=T[ANS].val; </span><br><span class=\"line\">    <span class=\"built_in\">next</span>(k,num), b=T[ANS].val;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num-a&lt;=b-num &amp;&amp; a != -INF) &#123;</span><br><span class=\"line\">            ans += num-a;</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(k,a);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans += b-num;</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(k,b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans %= <span class=\"number\">1000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"type\">int</span> cur;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(k,-INF),<span class=\"built_in\">ins</span>(k,INF);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[k].size == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                cur=a;<span class=\"comment\">//cur：当前是宠物等人认领还是人在等着接受宠物（看原题，不然谁看得懂啊= =）</span></span><br><span class=\"line\">                <span class=\"built_in\">ins</span>(k,b);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a == cur) <span class=\"built_in\">ins</span>(k,b);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">Catch</span>(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"number\">2.</span> set实现(<span class=\"number\">304</span>ms,<span class=\"number\">2.57</span>MB)  </span><br><span class=\"line\">```cpp</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1111111</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">1000000000</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, ans;</span><br><span class=\"line\">set &lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt;::iterator left=--s.<span class=\"built_in\">lower_bound</span>(x),right=s.<span class=\"built_in\">lower_bound</span>(x);<span class=\"comment\">//lower_bound的实现是二分查找，迭代器指向不比x小的且最接近x的数的位置，所以left就是前继，right就是后继</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x-*left&lt;=*right-x&amp;&amp;*left!=-INF) &#123;</span><br><span class=\"line\">        ans+=x-*left;</span><br><span class=\"line\">        s.<span class=\"built_in\">erase</span>(left);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ans+=*right-x;</span><br><span class=\"line\">        s.<span class=\"built_in\">erase</span>(right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans%=<span class=\"number\">1000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"type\">int</span> cur;</span><br><span class=\"line\">    s.<span class=\"built_in\">insert</span>(-INF),s.<span class=\"built_in\">insert</span>(INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">size</span>()==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            cur=a;</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(b);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==cur) s.<span class=\"built_in\">insert</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Treap",
                "Splay"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20[HNOI2002]%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/",
            "url": "http://cubicy.icu/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20[HNOI2002]%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/",
            "title": "洛谷:P2234  [HNOI2002]营业额统计",
            "date_published": "2018-02-27T15:58:00.000Z",
            "content_html": "<p>原题地址：<a href=\"//www.luogu.org/problemnew/show/P2234\">https://www.luogu.org/problemnew/show/P2234</a></p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一个序列，对于每一个数都要查询：序列中在这个数前与这个数最接近的数是什么？然后将最接近的数字与这个数字的差累加。（序列第一个数字直接加自己）  </p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查询在这个数之前与这个数最接近的数，我们很容易想到用二叉搜索树（BST）来做。<br><del>虽然数据略水暴力排序每次查询从一个数往左右找也能过。</del><br>每次插入一个数字，然后查询，我用Treap实现（还是弱化版的，只有插入查询）。<br>Treap的核心其实就是打乱顺序插入防止被卡（粗糙理解）。具体实现方法不难，请百度。（我之后会写一篇专门介绍下各种BST的。）<br>PS：Treap树完整版之后写。这题用STL的vector也行，vector理论每次插入渐进时间复杂度是O(n)但是听说实际是对数级别的？   </p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">randad</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">114</span>; <span class=\"comment\">//seed可以随便取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">2147483647</span>);<span class=\"comment\">//48271使得其有完全周期，即2147483647内取遍不重复 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Treap</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> key,pri,son[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;T[<span class=\"number\">33333</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt=<span class=\"number\">1</span>,rt=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> p,<span class=\"type\">int</span> &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=T[rt].son[p];</span><br><span class=\"line\">    T[rt].son[p]=T[y].son[!p];</span><br><span class=\"line\">    T[y].son[!p]=rt;</span><br><span class=\"line\">    rt=y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"type\">int</span> key,<span class=\"type\">int</span> &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rt==<span class=\"number\">0</span>)</span><br><span class=\"line\">    \tT[rt=cnt++] = (Treap)&#123;key,<span class=\"built_in\">randad</span>()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p=key&gt;T[rt].key;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(key,T[rt].son[p]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[rt].son[p]].pri&gt;T[rt].pri)</span><br><span class=\"line\">        \t<span class=\"built_in\">rotate</span>(p,rt);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nowMin</span><span class=\"params\">(<span class=\"type\">int</span> key,<span class=\"type\">int</span> rt)</span><span class=\"comment\">//查询现在最接近key的数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rt==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">666666666</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"built_in\">abs</span>(key-T[rt].key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key&gt;T[rt].key) res=<span class=\"built_in\">min</span>(res,<span class=\"built_in\">nowMin</span>(key,T[rt].son[<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key&lt;T[rt].key) res=<span class=\"built_in\">min</span>(res,<span class=\"built_in\">nowMin</span>(key,T[rt].son[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,tot=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i==<span class=\"number\">1</span>) tot+=num;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tot+=<span class=\"built_in\">nowMin</span>(num,rt);<span class=\"comment\">//rt是当前根</span></span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(num,rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,tot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>",
            "tags": [
                "Treap"
            ]
        }
    ]
}