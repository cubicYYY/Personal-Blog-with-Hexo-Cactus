{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"stack\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\nLearning: Electric guitar\n❤❤❤ CTF, toy projects, anime\n✖✖✖ Technological supremacy\n✔✔✔ Independent thinking\nResume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/",
            "url": "http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/",
            "title": "洛谷:P1901 发射站",
            "date_published": "2018-09-28T05:11:00.000Z",
            "content_html": "<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P1901</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>有 N 个能量发射站排成一行，每个都有**不相同的高度 $H_i$**，能向两边（当然两端的只能向一边）同时发射能量值为$V_i$ 的能量，并且发出的能量只被两边最近的且比它高的发射站接收。</p>\n<p>显然，每个发射站发来的能量有可能被0或1或2个其他发射站所接受，求接收最多能量的发射站接收的能量是多少。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>每个能量塔射出的能量被左右第一个比其高的塔所拦截。隐隐约约觉得可以用单调栈搞……<br>维护一个高度单调不升栈，考虑<strong>依次</strong>将能量塔i加入栈：  </p>\n<ol>\n<li>如果高度比栈顶元素大或栈空，栈顶元素能量加上$V_i$，压入栈;  </li>\n<li>如果高度比栈顶元素小（栈顶元素编号记为top），当前能量塔i接收的能量加上$V_{top}$，弹出栈顶元素。重复执行直到符合情况1，按1的处理方法处理。<br>最后直接扫描一遍最大值，输出。</li>\n</ol>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> s1[<span class=\"number\">1000010</span>],h[<span class=\"number\">1000010</span>],v[<span class=\"number\">1000010</span>],sum[<span class=\"number\">1000010</span>],ans,n,top;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;h[i],&amp;v[i]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top&amp;&amp;h[s1[top]]&lt;h[i])</span><br><span class=\"line\">            sum[i]+=v[s1[top]],top--;</span><br><span class=\"line\">        sum[s1[top]]+=v[i];</span><br><span class=\"line\">        top++;</span><br><span class=\"line\">        s1[top]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        ans=<span class=\"built_in\">max</span>(ans,sum[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Stack"
            ]
        }
    ]
}