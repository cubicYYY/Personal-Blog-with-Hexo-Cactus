{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"数链剖分\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\n❤❤❤ CTF, toy projects, electric guitar\n✖✖✖ Technological supremacy\n\nRésumé👉 [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/",
            "url": "http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/",
            "title": "洛谷:P3950 部落冲突",
            "date_published": "2018-10-28T12:00:00.000Z",
            "content_html": "<p>原题地址:<a href=\"https://www.luogu.org/problemnew/show/P3950\">https://www.luogu.org/problemnew/show/P3950</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一棵树，每次给定一个操作，有如下两种：  </p>\n<ol>\n<li>将某条边染黑<br>2.询问给定的u,v两点间是否有边被染黑</li>\n</ol>\n<hr>\n<p>###思路<br>询问两点间是否有边被染黑只需要在求LCA时判一下就行。所以直接上树链剖分即可。<br>本题不需要使用线段树，使用树状数组查询路径上是否有任意一段区间和不为0即可。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) x&amp;-x</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">P war[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[maxn], dep[maxn], val[maxn], sz[maxn], top[maxn], son[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> tre[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> tot;</span><br><span class=\"line\"><span class=\"type\">int</span> cntw;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ch, x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>) &amp;&amp; ch != <span class=\"string\">&#x27;-&#x27;</span>) ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    ch == <span class=\"string\">&#x27;-&#x27;</span> ? f = <span class=\"number\">-1</span>, ch = <span class=\"built_in\">getchar</span>() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + ch - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, len, nxt;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>(<span class=\"type\">int</span> _to, <span class=\"type\">int</span> _len, <span class=\"type\">int</span> _nxt):<span class=\"built_in\">to</span>(_to), <span class=\"built_in\">len</span>(_len), <span class=\"built_in\">nxt</span>(_nxt) &#123;&#125;</span><br><span class=\"line\">&#125;E[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> h[maxn], cnte;</span><br><span class=\"line\"><span class=\"type\">int</span> L[maxn], R[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x;i &lt;= maxn; i += <span class=\"built_in\">lowbit</span>(i)) tre[i] += add;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>; <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x; i; i -= <span class=\"built_in\">lowbit</span>(i)) ans += tre[i]; <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    E[++cnte] = <span class=\"built_in\">Edge</span>(v, w, h[u]), h[u] = cnte;</span><br><span class=\"line\">    E[++cnte] = <span class=\"built_in\">Edge</span>(u, w, h[v]), h[v] = cnte;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sz[x] = <span class=\"number\">1</span>; dep[x] = dep[fa[x]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = E[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[to] = x;val[x] = E[i].len;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(to);</span><br><span class=\"line\">        sz[x] += sz[to];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz[to] &gt; sz[son[x]]) son[x] = to;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    L[x] = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == son[fa[x]]) top[x] = top[fa[x]];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> top[x] = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x]) <span class=\"built_in\">dfs2</span>(son[x]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = E[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa[x] || to == son[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    R[x] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L[x] &lt; L[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(L[x], <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L[x] &lt; L[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(L[x], <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">qsum</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;<span class=\"comment\">//其实可以查到有1就退出，不用查完和</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x] != top[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]] &lt; dep[top[y]])<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        ans += (<span class=\"built_in\">query</span>(L[x]) - <span class=\"built_in\">query</span>(L[top[x]] - <span class=\"number\">1</span>));</span><br><span class=\"line\">        x = fa[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x] &lt; dep[y])<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x!=y)</span><br><span class=\"line\">\t\tans += (<span class=\"built_in\">query</span>(L[x]) - <span class=\"built_in\">query</span>(L[y]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) <span class=\"built_in\">add_edge</span>(<span class=\"built_in\">read</span>(), <span class=\"built_in\">read</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> s[<span class=\"number\">50</span>];</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;C&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = <span class=\"built_in\">read</span>(), v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            <span class=\"built_in\">cut</span>(u, v);</span><br><span class=\"line\">            war[++cntw] = <span class=\"built_in\">P</span>(u, v);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;U&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> w = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            <span class=\"built_in\">connect</span>(war[w].first, war[w].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">qsum</span>(<span class=\"built_in\">read</span>(), <span class=\"built_in\">read</span>()) != <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "数链剖分",
                "树状数组",
                "LCA"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/",
            "url": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/",
            "title": "洛谷:P3384 【模板】树链剖分",
            "date_published": "2018-02-21T16:08:00.000Z",
            "content_html": "<p>原题地址:<a href=\"//www.luogu.org/problemnew/show/P3384\">https://www.luogu.org/problemnew/show/P3384</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>已知一棵包含N个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：  </p>\n<ol>\n<li>格式： 1 x y z 表示将树从x到y结点最短路径上所有节点的值都加上z  </li>\n<li>格式： 2 x y 表示求树从x到y结点最短路径上所有节点的值之和  </li>\n<li>格式： 3 x z 表示将以x为根节点的子树内所有节点值都加上z  </li>\n<li>格式： 4 x 表示求以x为根节点的子树内所有节点值之和</li>\n</ol>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>树链剖分裸题。做题时看到与四种操作中的任何一种极为相似的操作，就应该立刻想到树链剖分（并且考虑是否结合线段树解答）。<br>关于树链剖分的介绍请看此处：<a href=\"//www.cnblogs.com/yyy2015c01/p/8457795.html\">信息学竞赛相关优秀文章合集</a>  </p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>具体介绍在注释里。<br>来源：洛谷用户<a href=\"//www.luogu.org/space/show?uid=47062\">@zengqinyi</a>  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Rint register int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mem(a,b) memset(a,(b),sizeof(a))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Temp template<span class=\"string\">&lt;typename T&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"function\">Temp <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(T &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=<span class=\"number\">0</span>;T w=<span class=\"number\">1</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(ch)&amp;&amp;ch!=<span class=\"string\">&#x27;-&#x27;</span>)ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>)w=<span class=\"number\">-1</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(ch))x=(x&lt;&lt;<span class=\"number\">3</span>)+(x&lt;&lt;<span class=\"number\">1</span>)+(ch^<span class=\"string\">&#x27;0&#x27;</span>),ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    x=x*w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> len (r-l+1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">200000</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,r,mod;</span><br><span class=\"line\"><span class=\"comment\">//见题意 </span></span><br><span class=\"line\"><span class=\"type\">int</span> e,beg[maxn],nex[maxn],to[maxn],w[maxn],wt[maxn];</span><br><span class=\"line\"><span class=\"comment\">//链式前向星数组，w[]、wt[]初始点权数组 </span></span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn&lt;&lt;<span class=\"number\">2</span>],laz[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">//线段树数组、lazy操作 </span></span><br><span class=\"line\"><span class=\"type\">int</span> son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],siz[maxn],top[maxn]; </span><br><span class=\"line\"><span class=\"comment\">//son[]重儿子编号,id[]新编号,fa[]父亲节点,cnt dfs_clock/dfs序,dep[]深度,siz[]子树大小,top[]当前链顶端节点 </span></span><br><span class=\"line\"><span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//查询答案 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span> <span class=\"comment\">//链式前向星加边 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    to[++e]=y;</span><br><span class=\"line\">    nex[e]=beg[x];</span><br><span class=\"line\">    beg[x]=e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//-------------------------------------- 以下为线段树 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> lenn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    laz[rt&lt;&lt;<span class=\"number\">1</span>]+=laz[rt];</span><br><span class=\"line\">    laz[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=laz[rt];</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>]+=laz[rt]*(lenn-(lenn&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=laz[rt]*(lenn&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>]%=mod;</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]%=mod;</span><br><span class=\"line\">    laz[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)&#123;</span><br><span class=\"line\">        a[rt]=wt[l];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[rt]&gt;mod)a[rt]%=mod;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(lson);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rson);</span><br><span class=\"line\">    a[rt]=(a[rt&lt;&lt;<span class=\"number\">1</span>]+a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>])%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class=\"line\">    \tres+=a[rt];</span><br><span class=\"line\">    \tres%=mod;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(laz[rt])<span class=\"built_in\">pushdown</span>(rt,len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L&lt;=mid)<span class=\"built_in\">query</span>(lson,L,R);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R&gt;mid)<span class=\"built_in\">query</span>(rson,L,R);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class=\"line\">        laz[rt]+=k;</span><br><span class=\"line\">        a[rt]+=k*len;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(laz[rt])<span class=\"built_in\">pushdown</span>(rt,len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L&lt;=mid)<span class=\"built_in\">update</span>(lson,L,R,k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R&gt;mid)<span class=\"built_in\">update</span>(rson,L,R,k);</span><br><span class=\"line\">        a[rt]=(a[rt&lt;&lt;<span class=\"number\">1</span>]+a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>])%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//---------------------------------以上为线段树 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">qRange</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y]) &#123;<span class=\"comment\">//当两个点不在同一条链上 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class=\"line\">        \t<span class=\"built_in\">swap</span>(x,y);<span class=\"comment\">//把x点改为所在链顶端的深度更深的那个点</span></span><br><span class=\"line\">        res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[top[x]],id[x]);<span class=\"comment\">//ans加上x点到x所在链顶端 这一段区间的点权和</span></span><br><span class=\"line\">        ans+=res;</span><br><span class=\"line\">        ans%=mod;<span class=\"comment\">//按题意取模 </span></span><br><span class=\"line\">        x=fa[top[x]];<span class=\"comment\">//把x跳到x所在链顶端的那个点的上面一个点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//直到两个点处于一条链上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x]&gt;dep[y])<span class=\"built_in\">swap</span>(x,y);<span class=\"comment\">//把x点深度更深的那个点</span></span><br><span class=\"line\">    res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[y]);<span class=\"comment\">//这时再加上此时两个点的区间和即可</span></span><br><span class=\"line\">    ans+=res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">updRange</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> k)</span> <span class=\"comment\">//同上</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    k%=mod;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class=\"line\">        \t<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[top[x]],id[x],k);</span><br><span class=\"line\">        x=fa[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x]&gt;dep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[y],k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">qSon</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[x]+siz[x]<span class=\"number\">-1</span>);<span class=\"comment\">//子树区间右端点为id[x]+siz[x]-1 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">updSon</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span> <span class=\"comment\">//同上</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">update</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[x]+siz[x]<span class=\"number\">-1</span>,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> deep)</span> <span class=\"comment\">//x当前节点，f父亲，deep深度 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    dep[x]=deep;<span class=\"comment\">//标记每个点的深度 </span></span><br><span class=\"line\">    fa[x]=f;<span class=\"comment\">//标记每个点的父亲 </span></span><br><span class=\"line\">    siz[x]=<span class=\"number\">1</span>;<span class=\"comment\">//标记每个非叶子节点的子树大小 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxson=<span class=\"number\">-1</span>;<span class=\"comment\">//记录重儿子的儿子数 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=beg[x];i;i=nex[i]) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=to[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==f)</span><br><span class=\"line\">        \t<span class=\"keyword\">continue</span>;<span class=\"comment\">//若为父亲则continue </span></span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(y,x,deep+<span class=\"number\">1</span>);<span class=\"comment\">//dfs其儿子 </span></span><br><span class=\"line\">        siz[x]+=siz[y];<span class=\"comment\">//把它的儿子数加到它身上 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[y]&gt;maxson)son[x]=y,maxson=siz[y];<span class=\"comment\">//标记每个非叶子节点的重儿子编号 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> topf)</span> <span class=\"comment\">//x当前节点，topf当前链的最顶端的节点 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    id[x]=++cnt;<span class=\"comment\">//标记每个点的新编号 </span></span><br><span class=\"line\">    wt[cnt]=w[x];<span class=\"comment\">//把每个点的初始值赋到新编号上来 </span></span><br><span class=\"line\">    top[x]=topf;<span class=\"comment\">//这个点所在链的顶端 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!son[x])</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span>;<span class=\"comment\">//如果没有儿子则返回 </span></span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(son[x],topf);<span class=\"comment\">//按先处理重儿子，再处理轻儿子的顺序递归处理 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=beg[x];i;i=nex[i]) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=to[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==fa[x]||y==son[x])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(y,y);<span class=\"comment\">//对于每一个轻儿子都有一条从它自己开始的链 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(r);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(mod);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(w[i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=<span class=\"number\">1</span>;i&lt;n;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(a);<span class=\"built_in\">read</span>(b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);<span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(r,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(r,r);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k,x,y,z;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);<span class=\"built_in\">read</span>(y);<span class=\"built_in\">read</span>(z);</span><br><span class=\"line\">            <span class=\"built_in\">updRange</span>(x,y,z);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);<span class=\"built_in\">read</span>(y);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">qRange</span>(x,y));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);<span class=\"built_in\">read</span>(y);</span><br><span class=\"line\">            <span class=\"built_in\">updSon</span>(x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">qSon</span>(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "数链剖分"
            ]
        }
    ]
}