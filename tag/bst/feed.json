{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"bst\" tag",
    "description": "CTF, life, thoughts and waifus.\n\n I'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\n Learning: Violin and electric guitar\n ❤❤❤ CTF, toy projects, anime\n ✖✖✖ Technological supremacy\n ✔✔✔ Independent thinking\n Resume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/",
            "url": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/",
            "title": "洛谷:P1486 [NOI2004]郁闷的出纳员",
            "date_published": "2018-04-09T14:23:00.000Z",
            "content_html": "<p>原题地址:<a href=\"https://www.luogu.org/problemnew/show/P1486\">https://www.luogu.org/problemnew/show/P1486</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>一个序列a，初始为空。<br>随时插入一个数，查询第k大，全体加，全体减。<br>但是如果任何数在任何时刻低于给定的下界MIN，则立即移除出序列。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>插入，查询第k大，容易发现是BST题。于是上Treap。<br>全体加全体减暴力加肯定不行，考虑用变量delta储存变化情况。全体加n就是delta+&#x3D;n（n为负就是减）<br>于是每个数实际的值是：树里储存该数的值+delta  ——①<br>减了之后可能会有数低于下界，查找最小的数判断是不是小于MIN，是的话删除，重复直到不再小于MIN。<br>注意新插入的数不应该受之前的加减影响，所以将一个数字num插入树中时，如果直接把num插入树中，就变成num+delta了。<br>实际应该插入的是num-delta，这样结合上文①，现在这个数实际的值就是num本身了。<br>提供一个指针实现的Treap，不推荐使用其实，调的时候快把我搞吐血。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MAXN=<span class=\"number\">200010</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d,rnd,size;</span><br><span class=\"line\">        Node *ch[<span class=\"number\">2</span>],*pa;</span><br><span class=\"line\">    &#125;pool[MAXN],*root;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Node *p=&amp;pool[++tot];</span><br><span class=\"line\">        p-&gt;d=d;p-&gt;rnd=<span class=\"built_in\">rand</span>();p-&gt;size=<span class=\"number\">1</span>;</span><br><span class=\"line\">        p-&gt;ch[<span class=\"number\">0</span>]=p-&gt;ch[<span class=\"number\">1</span>]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p?p-&gt;size:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p-&gt;size=<span class=\"built_in\">size</span>(p-&gt;ch[<span class=\"number\">0</span>])+<span class=\"built_in\">size</span>(p-&gt;ch[<span class=\"number\">1</span>])+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(Node *p,<span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Node *pa=p-&gt;pa,*gp=pa-&gt;pa,*son=p-&gt;ch[t^<span class=\"number\">1</span>];</span><br><span class=\"line\">        pa-&gt;ch[t]=son;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(son)son-&gt;pa=pa;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(gp)gp-&gt;ch[pa==gp-&gt;ch[<span class=\"number\">1</span>]]=p;</span><br><span class=\"line\">        p-&gt;pa=gp;</span><br><span class=\"line\">        p-&gt;ch[t^<span class=\"number\">1</span>]=pa;</span><br><span class=\"line\">        pa-&gt;pa=p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa==root)root=p;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(pa);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">treap</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==root || p-&gt;rnd &gt;= p-&gt;pa-&gt;rnd)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p,p==p-&gt;pa-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *r,Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            root=p;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> f=(p-&gt;d &gt;= r-&gt;d);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!r-&gt;ch[f])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r-&gt;ch[f]=p;</span><br><span class=\"line\">            p-&gt;pa=r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(r-&gt;ch[f],p);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">find</span><span class=\"params\">(Node *r,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>]))<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(r-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(r-&gt;ch[<span class=\"number\">1</span>],x-<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;ch[<span class=\"number\">0</span>] &amp;&amp; !p-&gt;ch[<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==root)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                root=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Node *pa=p-&gt;pa;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pa)</span><br><span class=\"line\">                pa-&gt;ch[p==pa-&gt;ch[<span class=\"number\">1</span>]]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p!=root)</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(p=p-&gt;pa);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;ch[<span class=\"number\">0</span>] &amp;&amp; p-&gt;ch[<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> f=(p-&gt;ch[<span class=\"number\">1</span>]-&gt;rnd &lt; p-&gt;ch[<span class=\"number\">0</span>]-&gt;rnd);</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p-&gt;ch[f],f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> f=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;ch[<span class=\"number\">0</span>])f=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p-&gt;ch[f],f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">del</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(Node *r,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>]))<span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(r-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> r-&gt;d;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(r-&gt;ch[<span class=\"number\">1</span>],x-<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">getUpper</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c=<span class=\"built_in\">getchar</span>())</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(c))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">srand</span>((<span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> Q,Min,x;</span><br><span class=\"line\">        <span class=\"type\">char</span> op;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;Q,&amp;Min);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>,delta=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(Q--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            op=<span class=\"built_in\">getUpper</span>();</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(op)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x&lt;Min)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    Node *p=<span class=\"built_in\">newnode</span>(x-delta);</span><br><span class=\"line\">                    <span class=\"built_in\">insert</span>(root,p);</span><br><span class=\"line\">                    <span class=\"built_in\">treap</span>(p);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">                    delta+=x;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    delta-=x;</span><br><span class=\"line\">                    <span class=\"type\">int</span> xtq=<span class=\"built_in\">size</span>(root);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=xtq;i++)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">kth</span>(root,<span class=\"number\">1</span>)+delta&lt;Min)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">del</span>(<span class=\"built_in\">find</span>(root,<span class=\"number\">1</span>));</span><br><span class=\"line\">                            ans++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x&gt;<span class=\"built_in\">size</span>(root))<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">kth</span>(root,<span class=\"built_in\">size</span>(root)-x+<span class=\"number\">1</span>)+delta);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Treap",
                "BST"
            ]
        }
    ]
}