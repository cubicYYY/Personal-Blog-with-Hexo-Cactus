{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"rust\" tag",
    "description": "CTF, life, thoughts and waifus.\n\n I'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\n Learning: Violin and electric guitar\n ❤❤❤ CTF, toy projects, anime\n ✖✖✖ Technological supremacy\n ✔✔✔ Independent thinking\n Resume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2023/09/05/rust-lifetime/",
            "url": "http://cubicy.icu/2023/09/05/rust-lifetime/",
            "title": "Rust类型系统中的生命周期",
            "date_published": "2023-09-04T16:14:45.000Z",
            "content_html": "<h1 id=\"Rust类型系统中的生命周期\"><a href=\"#Rust类型系统中的生命周期\" class=\"headerlink\" title=\"Rust类型系统中的生命周期\"></a>Rust类型系统中的生命周期</h1><p>Rust的生命周期应被视为类型系统的一部分。这是我的粗浅理解，理解错误难免，若发现恳请斧正！<br>以下几节试图渐进地、但从不同角度理解该问题；只要看懂一节也许就足够了，所以可以都看看？<br><strong>提示：如果您有函数式编程基础，这篇文章看起来会很幼稚。“不就是一堆monad吗？”</strong></p>\n<hr>\n<p>一开始看到生命周期和泛型写在一起也许会感到诧异：但事实上生命周期就是类型系统的一部分，泛型指明某一值能进行什么运算，生命周期指明某一值在什么区间内才有效、才可以参与运算。既然能接受泛型加入类型系统并参与类型的运算，生命周期也应同理。<br>贴段代码大伙大概感受一下：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::fmt::Display;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">longest_with_an_announcement</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt;(x: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>, y: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>, ann: T) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span></span><br><span class=\"line\">    <span class=\"keyword\">where</span> T: Display</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Announcement! &#123;&#125;&quot;</span>, ann);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.<span class=\"title function_ invoke__\">len</span>() &gt; y.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">        x</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>x,y是字符串slice，在C&#x2F;C++中对应字符串指针；在C语言中，这样的<strong>指针在字符串失效后有可能仍被调用（悬垂指针）</strong>，就带来危险。而Rust如何解决这一问题呢？答案是通过所有权机制和生命周期，确认值的有效期究竟何时开始，何时结束（这就称为<strong>生命周期</strong>），禁止在值的生命周期外进行引用、读取、修改等操作。<br>Rust里没有“赋值”，只有“绑定”：我们把一个变量名绑定到一个值上，因此这些生命周期注解，仍旧针对的是值：它是一些实际存在的值（字面量、变量储存的值、函数、闭包……）的固有属性，不是虚无缥缈的。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据现代Rust自带的一些约束推导规则，~95%的情况下生命周期注解能被编译器自动推断。但手动的注解有时无法避免：尤其是结构体中。  </span><br></pre></td></tr></table></figure>\n<p>在这个例子中，由于这个if的存在，Rust编译器无法判断返回值的有效期到底和x一样还是和y一样。<br>我们要添加类型推断（是的，生命周期也是一种泛型），x、y具有同名的生命周期注解’a，根据规则’a取x和y生命周期的交集：x,y都有效时，返回值一定有效！这样就避免了C&#x2F;C++中悬垂指针带来的危险。  </p>\n<hr>\n<p>也许有人会问，为什么调用该函数时，如果传入的参数生命周期不同，会取较短的？<br>我们要在集合论的角度考虑：我们说想要一只动物，那么给与可爱的猫是可以接受的，因为猫是动物的子集。事实上，子集（$\\subseteq$）<strong>是</strong>一种偏序关系。而生命周期也<strong>存在</strong>一种偏序关系：我们把<strong>这种关系叫subtype</strong>。假设对于两个生命周期L1和生命周期L2，且有L1是L2的subtype，那我们就记作<code>&#39;L1&lt;:&#39;L2</code>，<em>vice versa</em>.<br>显然，生命周期越长越“好”（也就是泛用）。所以一开始我们就知道<code>&#39;long &lt;: &#39;short</code>，也就是长寿的可以自裁(cast过去)变成短命的，但是短命的没法强行续命变成长命的。<br>当然，还有一个显然：<code>&#39;static</code>是所有类型的subtype.<br>(不用太纠结为什么是<code>&#39;long &lt;: &#39;short</code>，偏序关系倒过来没有本质区别，这边只是强调<code>&#39;long</code>更好，物以稀为贵，所以“更少”就放左边了)<br>什么意思呢？<strong>简而言之，L1的约束比L2更松</strong>。我们看一个例子，讨论<strong>函数间</strong>的偏序关系：</p>\n<ul>\n<li>假设有函数f1(x)和f2(x)，唯一的区别是f1对传进来的x的生命周期的最低要求更长，那么能用f1的地方就能用f2，但能用f2的地方不一定能用f1，因此f2更泛用，f2≼f1</li>\n<li>假设有函数f1()-&gt;x和f2()-&gt;x，唯一的区别是f1的返回值x的已知生命周期比f2的长，那么需要返回值的地方能用f2就一定能用f1，反之则不然，因此f1更泛用，f1≼f2</li>\n<li>思考题：那<code>mut&amp;&#39;a T</code>和<code>T</code>呢？见下文</li>\n<li><strong>就像int32可以转int64（数据范围更难满足-&gt;数据范围更易满足）而反之不行一样单向，subtype可以向右侧cast（长命百岁-&gt;至少活10年）；但反之是不安全的。</strong></li>\n<li>因此，约束关系推导出来的最终生命周期是最严格的，宁可错杀一千也不会放过一个；就是可能有些人工检查过，可以保证安全的操作会被笨笨的生命周期约束拦下：这时就需要你动用unsafe黑魔法了</li>\n</ul>\n<hr>\n<p>所以现在我们要把生命周期理解为类型系统的一部分时，困惑可能来源于为什么不像整形一样规则简单（小int永远是大int的subtype），而包含生命周期的类型系统则有时并不如此：可能不存在这个偏序关系，也可能反过来下克上。<br><strong>我们要明确，函数签名之类的是对类型进行的一种运算</strong>。你可以理解为函数对值运算，而函数签名对类型进行运算。是不是有点像物理上的<strong>量纲分析！</strong>。<br>换言之，这些带泛型或者生命周期的东西（不管是<code>Vec&lt;T&gt;</code>还是<code>&lt;T&gt;T-&gt;T</code>，别忘了函数也是类型一种类型，也属于<code>T</code>），本质上是类型之间的Functor.<br>因此，我们可以把上一节的<code>f1</code> <code>f2</code>都拆开来看，当作一种运算，看看他对生命周期做了什么。<br>例如，对于函数参数，参数受较短生命周期的约束——如上一节分析的那样——我们发现<code>&#39;long &lt;: &#39;short</code> &#x3D;&gt; <code>F(&#39;short) &lt;: F(&#39;long)</code> (颠倒了！)，而长寿者可以降级为短命者；而对返回值来说，恰恰相反：我们只知道至少可以活多么久，活更长对于使用返回值的表达式来说也一定可以接受，此时<code>&#39;long &lt;: &#39;short</code> &#x3D;&gt; <code>(F()-&gt;&#39;long) &lt;: (F()-&gt;&#39;short)</code>（关系保持！）……其中，<code>&lt;:</code>左右两侧的表达式——或者说函数签名——正对应上一节的<code>f1</code> <code>f2</code>，我们只是把<code>≼</code>换成了<code>&lt;:</code>。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">颠倒了的就是contravariant，不变就是covariant，根本没法推出关系的就是invariant.</span><br></pre></td></tr></table></figure>\n<p>invariant就是上面思考题那种。至于原因，最后一节会有个特别轻松易懂的解释<code>:)</code>  </p>\n<hr>\n<p>为什么要搞得这么离散数学？因为当类型系统的偏序关系网浮出水面，系统里隐含的约束也就能被自然推导。<br><strong>如果对于用到的类型，这个偏序集合是格（有上下确界），那么编译器会开心的帮你标记好一切生命周期</strong>；<br><strong>如果没有办法cast导致编译器在约束求解中无法找出某些类型的上下确界，甚至出现了环——不好意思，还是得另请高明（程序员）来标清楚。</strong><br>例如上面那段代码为两个参数都标注<code>&#39;a</code>其实等效于在a、b固有的、不受约束的生命周期（远古版本反人体工程学rust必须写明所有生命周期，现在能自动推导绝大部分）中添加了两条约束：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">longer</span>&lt;<span class=\"symbol\">&#x27;a</span>, <span class=\"symbol\">&#x27;b</span>&gt;(s1: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>, s2: &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span> <span class=\"keyword\">where</span> <span class=\"symbol\">&#x27;a</span>:<span class=\"symbol\">&#x27;b</span>, <span class=\"symbol\">&#x27;b</span>:<span class=\"symbol\">&#x27;a</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s2.<span class=\"title function_ invoke__\">len</span>() &gt; s1.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">        s2</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        s1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是对x和y分别绑定的值，其生命周期’a与’b有{‘a≼’b,’b≼’a}，也就是{‘a:’b, ‘b:’a}（显然可以推出’a&#x3D;&#x3D;’b）。<br>因此在手动指定后，在需要用到生命周期的地方，这两个参数以及返回值的生命周期就可以被推导啦：为了让他们相等，编译器要根据基本法把长的生命周期cast到短的上。<br>最终效果就是取传参生命周期较短者。注意这时我们在谈论的是参数，不是整个函数发生了什么质变。<br>……是的，其实日常根本就没有多少情况需要你操心函数参数的那个contravariant！可以松口气了。<br>当然，根据上文所述，这样<strong>推导出来的生命周期约束是怎么严格怎么来</strong>，但记住：<strong>如果你被搞晕了，那就相信你的直觉；程序是人设计为人服务的，因此绝大部分情况下生命周期的限制是符合直觉的</strong>（也就是你可以使用“显然”这一词）。<br>What a relief.</p>\n<hr>\n<p>有没有想过一些运算过后，偏序关系不一定会保留&#x2F;颠倒，还有可能会直接丢失！<br>那么对这种情况，非常推荐阅读关于subtyping, <strong>variance(covariant, invariant, contravariant)</strong> 的参考资料：<br><a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\">Subtyping and Variance - The Rustonomicon</a><br>然后你会发现倒过来（contravariant, 逆变）的其实<strong>就只有</strong>这个函数返回值。<br>然后你还会注意到，那些invariant的不变量是不是都提供内部不变性，换言之，本质上都是一种指针？<br><strong>我可以提供一个绝妙的角度：想想C&#x2F;C++的指针类型定义, 指针本身是不是const，这和指针的内容（指向的对象）是不是const有啥关系吗？当然没有！</strong><br>所以某种意义上，<strong>你可以把const理解为很粗糙的生命周期约束，我们Rust更精细的系统里，他叫<code>&#39;static</code>.</strong></p>\n",
            "tags": [
                "Rust",
                "Lifetime",
                "Code",
                "ProgrammingLanguage"
            ]
        }
    ]
}