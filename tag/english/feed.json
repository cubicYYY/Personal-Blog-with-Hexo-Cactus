{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"english\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\nLearning: Electric guitar\n❤❤❤ CTF, toy projects, anime\n✖✖✖ Technological supremacy\nResume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/overclocking-zen3/",
            "url": "http://cubicy.icu/overclocking-zen3/",
            "title": "Overclocking AMD Zen3 with PBO2 Done Right FULL GUIDE",
            "date_published": "2024-04-26T17:36:26.000Z",
            "content_html": "<h1 id=\"Overclocking-AMD-Zen3-Series-with-PBO2-Ryzen-5600X-5800X-5900X-5950X-overclocking\"><a href=\"#Overclocking-AMD-Zen3-Series-with-PBO2-Ryzen-5600X-5800X-5900X-5950X-overclocking\" class=\"headerlink\" title=\"Overclocking AMD Zen3 Series with PBO2: Ryzen 5600X&#x2F;5800X&#x2F;5900X&#x2F;5950X overclocking\"></a>Overclocking AMD Zen3 Series with PBO2: Ryzen 5600X&#x2F;5800X&#x2F;5900X&#x2F;5950X overclocking</h1><p>This guide aims to overclock Zen3 CPUs with Precision Boost Overdrive 2 (PBO2), gaining extra performance in the single-core score(about <strong>5% - 15%</strong>) while maintaining or even increasing the multi-core score. The solution may also apply to the Zen4 series, but the args cannot be a valid reference.</p>\n<h2 id=\"Before-the-overclocking\"><a href=\"#Before-the-overclocking\" class=\"headerlink\" title=\"Before the overclocking\"></a>Before the overclocking</h2><h3 id=\"Mindset\"><a href=\"#Mindset\" class=\"headerlink\" title=\"Mindset\"></a>Mindset</h3><p>Zen3 series is super hot, so you lower the voltage, lower the temperature, and more performance can be obtained under the temperature limit. The heat gets heavily trapped inside the chip, so <strong>a good cooler can help a lot!</strong><br>Ideal idle temperature: 40-60 Celsius</p>\n<p>Although <strong>you always overclock with your risks</strong>, here’s a point worth mentioning: <strong>PBO2 itself is SAFE,</strong> since it never actually changes the voltage for different cores under different frequencies(the CPU requires a voltage from the motherboard, so it physically cannot allocate different voltage for each core precisely). Instead, it changes the frequency of each core under a certain voltage (i.e. changes the frequency-voltage <em>curve</em>)! We’ll see how to adjust the <em>curve</em> later.</p>\n<p><strong>Note: Even though it’s not the voltage that changes, we still use the term “increase&#x2F;decrease voltage” in this article because it’s easier to understand.</strong></p>\n<p>What we need to spend time adjusting:</p>\n<ul>\n<li>EDC</li>\n<li>Curve Optimizer</li>\n<li>CPU Offset Voltage (if needed)</li>\n</ul>\n<h3 id=\"Know-the-quality-of-your-chip-Optional\"><a href=\"#Know-the-quality-of-your-chip-Optional\" class=\"headerlink\" title=\"Know the quality of your chip (Optional)\"></a>Know the quality of your chip (Optional)</h3><p>A specific CPU chip has its <em>quality</em>, indicating the potential performance gain from overclocking. If you are using an ASUS motherboard, try this before the overclocking to know your silicon quality: <a href=\"https://www.cybermania.ws/apps/amd-ryzen-silicon-tester-amd-v-f/\">AMD Ryzen Silicon Tester (AMD V&#x2F;F)</a>. Remember to have everything in <strong>default(no overclocking, no PBO2).</strong> and have as few background tasks as possible.<br>Reference table:</p>\n<table>\n<thead>\n<tr>\n<th>Score</th>\n<th>Quality</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;110</td>\n<td>Bad</td>\n</tr>\n<tr>\n<td>110-115</td>\n<td>Normal</td>\n</tr>\n<tr>\n<td>115-125</td>\n<td>Good</td>\n</tr>\n<tr>\n<td>&gt;125</td>\n<td>Excellent</td>\n</tr>\n</tbody></table>\n<h3 id=\"All-in-One-Solution-Optional\"><a href=\"#All-in-One-Solution-Optional\" class=\"headerlink\" title=\"All in One Solution (Optional)\"></a>All in One Solution (Optional)</h3><p>If you are finding good initial values for tweaking (or even only use args generated by an automatic tool), have a look → <a href=\"https://www.techpowerup.com/download/amd-ryzen-clock-tuner-ctr-1usmus/\">Clock Tuner</a></p>\n<h3 id=\"Software-Tools-to-Prepare\"><a href=\"#Software-Tools-to-Prepare\" class=\"headerlink\" title=\"Software&#x2F;Tools to Prepare\"></a>Software&#x2F;Tools to Prepare</h3><ul>\n<li><a href=\"https://github.com/sp00n/corecycler/releases/tag/v0.9.4.2\">Corecycler</a> (To test the stability of your overclock settings)</li>\n<li>AMD Ryzen Master (provided by the AMD)</li>\n<li>CPU-Z or other benchmark tools</li>\n</ul>\n<h2 id=\"Detailed-Steps\"><a href=\"#Detailed-Steps\" class=\"headerlink\" title=\"Detailed Steps\"></a>Detailed Steps</h2><p>Platform used: ASUS TUF B550M</p>\n<h3 id=\"Set-BIOS-args\"><a href=\"#Set-BIOS-args\" class=\"headerlink\" title=\"Set BIOS args\"></a>Set BIOS args</h3><p>Reboot and enter the BIOS, here’s some key settings. The actual path may vary from different motherboards&#x2F;BIOS. So if an item cannot be found after your carefully searching, just ignore it.</p>\n<ul>\n<li>Ai Overclock Tuner: Manual or DOCP if XMP for the RAM enabled</li>\n<li>Performance Enhancement: ALWAYS OFF.</li>\n<li>Spread Spectrum: ALWAYS OFF.<ul>\n<li><img src=\"/overclocking-zen3/DOCP.png\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>CPU Core Ratio: <code>Auto</code><ul>\n<li>May change to offset mode if you need to. Continue reading for details<br> <img src=\"/overclocking-zen3/cpu-voffset.jpg\" alt=\"CPU Voltage\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>Ai Tweaker&#x2F;DIGI+ VRM<ul>\n<li>VDDCR CPU Current Capability: <code>130%</code> or <code>140%</code> or more, as high as possible</li>\n<li>VDDCR SOC Current Capability (if exists, maybe in a different path): <code>130%</code> or <code>140%</code> or more, as high as possible</li>\n<li>Loadline Calibration: ALL <code>Auto</code> . It’s almost meaningless to change it unless you have a fixed frequency and CPU voltage, or you always get BSoD after every try in PBO2.</li>\n<li>Set all other options to <code>Extreme</code> if possible<br> <img src=\"/overclocking-zen3/DIGI-VRM.jpg\" alt=\"DIGI+ VRM\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>Advanced&#x2F;AMD CBS&#x2F;NBIO Common Options&#x2F;SMU Common Options<ul>\n<li>CPPC: ON! √√√</li>\n<li>CPPC preferred cores: ON&#x2F;OFF, not sure. (I leave it ENABLED, but Windows scheduler sucks so it may make applications stuttery when switching between cores. Test it by yourself after everything is done, if you like!)<br> <img src=\"/overclocking-zen3/cppc.jpg\" alt=\"CPPC\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>Fmax Enhancer: ALWAYS OFF.</li>\n<li><strong>PBO settings under the “Ai Tweaker” tab (if exists): ALL <code>Auto</code> !</strong><ul>\n<li><img src=\"/overclocking-zen3/ai-tweaker-PBO.jpg\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>PBO settings under the “Advanced” tab:<ul>\n<li>Precision Boost Overdrive: <code>Manual</code></li>\n<li>PBO Limits: <code>Manual</code></li>\n<li>PPT&#x2F;TDC&#x2F;<strong>EDC</strong> (this is an important arg)<ul>\n<li>Reference for 5600X&#x2F;5800X: 350&#x2F;140&#x2F;160</li>\n<li>Reference for 5900X&#x2F;5950X: 350&#x2F;150&#x2F;190</li>\n<li>PPT makes little difference, set it to a reasonably high number (300 is enough, I take 350 here)</li>\n<li>TDC should be lower than EDC about 20~45.</li>\n<li><strong>EDC is important!</strong> If it is too low, not enough energy to feed the chip; if it is too high, the PBO2 algorithm can be extremely aggressive so the CPU is always thermal throttling, leading to worse performance. For 5600X&#x2F;5800X, it is about 150~170; for 5900X&#x2F;5950X, it is about 170~210. Test different values until you find that the frequency reached a maximum during CPU-Z all-core testing.</li>\n</ul>\n</li>\n<li>PBO Scalar: Manual &#x2F; 10X (If your cooler sucks, make this arg lower)</li>\n<li>Max CPU Boost Clock Override: 200MHz (If your cooler sucks, make this arg lower too)</li>\n<li>Thermal limit: auto or a high value. This arg can only lower the temperature limit set by the manufacturer, so it makes no difference</li>\n<li><strong>Curve Optimizer: Per Core, and the NEGATIVE values for each core are all we have to determine in the next step. Leave it all 0 now.</strong><br> <img src=\"/overclocking-zen3/advanced-PBO.jpg\" alt=\"Advanced PBO\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>Advanced&#x2F;CPU Configuration&#x2F;PSS Support: ON! With some cores sleeping, the working cores can boost more since the chip is cooler.<ul>\n<li><img src=\"/overclocking-zen3/pss.jpg\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>Advanced&#x2F;AMD CBS&#x2F;Global C-State Control: ON! For the same reason.<ul>\n<li><img src=\"/overclocking-zen3/C-state.jpg\" loading=\"lazy\"></li>\n</ul>\n</li>\n</ul>\n<p><code>F10</code> or the key to save the BIOS setting and enter the system to ensure your settings work.</p>\n<h3 id=\"Curve-Optimizer-Downvoltaging\"><a href=\"#Curve-Optimizer-Downvoltaging\" class=\"headerlink\" title=\"Curve Optimizer: Downvoltaging\"></a>Curve Optimizer: Downvoltaging</h3><p><strong>The key idea: lower the voltage curve (for each frequency) to have more thermal and power space for boosting.</strong><br>So we need negative values here.<br>(We say <code>-25</code> is more negative than <code>-20</code>, so you know “make the value more negative” will make a negative number even further from zero)</p>\n<ol>\n<li><p>Enter the system, open the Ryzen Master, check for the 1st and 2nd fastest core, and remember the core number (start from 1. e.g. #1 and #5) <img src=\"/overclocking-zen3/fastest-cores.png\" loading=\"lazy\"></p>\n</li>\n<li><p>Restart and enter the BIOS, find <code>Advanced/PBO/Curve Optimizer</code> or another path if you are using a different motherboard</p>\n</li>\n<li><p>Set all the cores to negative <code>-30</code> (if your chip score is not so good, set it to <code>-25</code> or something) except for the 1st and 2nd fastest core.</p>\n</li>\n<li><p>For the 1st and 2nd fastest core(numbers start from 0 in many BIOS, in that case, please do a trivial convert for the number. e.g. #1-&gt;#0 and #5-&gt;#4), set the value to <code>-25</code>(if your chip score is not so good, set it to <code>-20</code> or something): they need higher voltage to boost higher.</p>\n</li>\n<li><p>Apply changes and restart, try to enter the system and check stability:</p>\n<ul>\n<li>Unstable - Can even not enter the system: make the value less negative (increase the voltage) of all cores</li>\n<li>Unstable - Entered the system and got BSoD: Restart and try to finish these steps before a BSoD again:<ol>\n<li>Open the Windows Event Viewer, go to System, and look for errors from WHEA-logger with ID&#x3D;18.</li>\n<li>If found, check the APIC ID in detail. APIC ID is the number of the logic core that failed, so you need to convert it into physical core number. For example, my 5800X has 2 threads per core, so APIC ID 9 means physical CPU core #floor(9&#x2F;2)&#x3D;#4 (start from #0) failed. <img src=\"/overclocking-zen3/WHEA18.png\" loading=\"lazy\"></li>\n<li>Restart and enter the BIOS, make the value less negative (increase the voltage) of this specific core</li>\n</ol>\n</li>\n<li>Unstable - Start a fast verification using CoreCycler(with <code>config.ini</code> args set to runtimePerCore&#x3D;60, maxIterations&#x3D;3), but failed: make the value less negative (increase the voltage) of cores reporting errors<ul>\n<li>You can check the log files: <img src=\"/overclocking-zen3/Corecycler-error-log.png\" loading=\"lazy\"> <img src=\"/overclocking-zen3/Corecycler-error-log2.png\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>Everything is ok and the CoreCycler test passed: can be more aggressive, make the value more negative (decrease the voltage) of all cores by a small value (e.g. <code>5</code> or <code>3</code> or <code>1</code>, up to you)<ul>\n<li>Tips: If you hit the minimum value (typically <code>-30</code>) that you can set in Curve Optimizer, but you still want to dig deeper, then you can change <code>VDDCR CPU Voltage</code> from <code>Auto</code> to <code>Offset</code>, and set negative values for your CPU. In this way, you can decrease the CPU voltage (globally) even more when combined with the Curve Optimizer downvoltaging.</li>\n<li>Note: If your chip sucks, you may even need to set some cores working at <em>positive</em> values (higher voltage than default)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Repeat step 5 until you find the best args!</p>\n</li>\n</ol>\n<p>My results (5800X): <code>-15</code> for the fastest 2 cores and <code>-28</code>~<code>-30</code> for others; CPU voltage offset <code>-0.04375</code><br><img src=\"/overclocking-zen3/curve.jpg\" alt=\"Curve Optimizer\" loading=\"lazy\"><br>CPU-Z Score:</p>\n<ul>\n<li>Single-core&#x3D; 678.0</li>\n<li>Multi-cores&#x3D; 6823.6</li>\n</ul>\n<h3 id=\"Verify-Stability\"><a href=\"#Verify-Stability\" class=\"headerlink\" title=\"Verify Stability\"></a>Verify Stability</h3><p>If the following condition is met, then you made it!</p>\n<ul>\n<li>Leave the computer idle (low workload), and open a webpage normally</li>\n<li>Run Corecycler for like 4 hours with no errors:<ul>\n<li>runtimePerCore &#x3D; 360</li>\n<li>maxIterations &#x3D; 10000</li>\n<li><img src=\"/overclocking-zen3/Corecycler.png\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>Run CPU-Z for a score!</li>\n<li>Run a benchmark tool and see the args changing on the Ryzen Master panel</li>\n<li>Play a game or do what you want without BSoD and WHEA 18 event in your event viewer</li>\n</ul>\n<p>If any error occurrs, you know what to do from the paragraph above: increase the voltage.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[Chinese]<a href=\"https://www.bilibili.com/video/BV15b4y1R7EV/\">AMD RYZEN5000系列体质测试工具分享</a><br>[Chinese]<a href=\"https://www.bilibili.com/read/cv16285050/\">5800X PBO和Curve Optimizer的测试与优化</a><br>[Chinese]<a href=\"https://www.bilibili.com/read/cv13796433/\">AMD 5000系Ryzen平台锐龙处理器 全面超频快速调教指南</a><br>[Chinese]<a href=\"https://www.bilibili.com/read/cv10267893/\">关于EDC对Ryzen5000系列CPU效能的影响</a><br><a href=\"https://www.youtube.com/watch?v=QCyZ-QYwsFY\">AMD. What’s New with Precision Boost Overdrive 2.</a></p>\n",
            "tags": [
                "English",
                "Overclocking"
            ]
        },
        {
            "id": "http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/",
            "url": "http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/",
            "title": "ACTF2022 - FFSK - Official WriteUp",
            "date_published": "2022-07-03T15:43:00.000Z",
            "content_html": "<p><del>众所周知歪歪歪英文很烂求轻喷</del>  </p>\n<h2 id=\"0-Intro\"><a href=\"#0-Intro\" class=\"headerlink\" title=\"0. Intro\"></a>0. Intro</h2><p>In the game period, only one team had solved this problem: MapleBacon, a genius team at the University of British Columbia. I’m happy about their praise, but after checking their solution I think what truly “impressive” is their creativity and persistence.</p>\n<p><strong>Strongly recommend reading their awesome solution: <a href=\"https://maplebacon.org/2022/06/actf-ffsk/\">https://maplebacon.org/2022/06/actf-ffsk/</a></strong></p>\n<p>FSK &#x3D; Frequency-shift keying.</p>\n<p>FFSK &#x3D; Double FSK or Fast FSK, whatever.</p>\n<p>This problem is designed to invite participants to have a look at <em>the principle of communication</em>.</p>\n<h2 id=\"1-Description\"><a href=\"#1-Description\" class=\"headerlink\" title=\"1. Description\"></a>1. Description</h2><p>A journey to solve a misc problem always begins from a problem description. Here’s it:</p>\n<blockquote>\n<p>I’ve bought the <strong>second commercial modem</strong> for computers in a big city of the UK.</p>\n<blockquote>\n<p>激情澎湃的球迷迷恋这个地方。遇上球赛季，酒吧里的热情、呐喊、啤酒、摇滚，足球让这个城市充满活力和希望。<br>从三万英尺的云端望去，往日的生活成了一个遥远微小的地图。<br>阳光明媚的日子，开始出发，北京时间00:50 开始起飞，一个梦的距离，就可以到达荷兰阿姆斯特丹，短暂停留之后，然后转机飞往英国<br>南航的飞机配置完备，全程可以充电，还有wifi，影视屏有面前最新的电影。睡睡醒醒，在飞机上觅到一部《北京爱情故事》，让我在三万英尺的空中哭的稀里哗啦。</p>\n</blockquote>\n</blockquote>\n<p>Just Google it, and you’ll realize what it means:</p>\n<ul>\n<li><p><strong>second commercial modem→Bell 103, corresponds with the file name “modem.wav”</strong></p>\n</li>\n<li><p>a big city in the UK: <strong>Manchester</strong>, which refers to the famous coding method.</p>\n</li>\n<li><p>The source of the long Chinese paragraph: <a href=\"https://kknews.cc/zh-hk/travel/e6yjp34.html\">https://kknews.cc/zh-hk/travel/e6yjp34.html</a></p>\n<p>  It describes a trip to Manchester, which is indeed a big city in the UK.</p>\n</li>\n</ul>\n<h2 id=\"2-Bell-103\"><a href=\"#2-Bell-103\" class=\"headerlink\" title=\"2. Bell 103\"></a>2. Bell 103</h2><p>Here’s an article that shows how the Bell 103 protocol works: <a href=\"https://vigrey.com/blog/emulating-bell-103-modem\">https://vigrey.com/blog/emulating-bell-103-modem</a></p>\n<p>So two key points need your attention. First, characters are stored in ASCII code and are <strong>little-endian;</strong> second, it has 2 channels for communication: one for the server-side(2025&#x2F;2225 Hz), and another for the client-side(1070&#x2F;1270 Hz).</p>\n<p>You can also find it from the spectrogram of the .wav file.</p>\n<h2 id=\"3-Server-channel\"><a href=\"#3-Server-channel\" class=\"headerlink\" title=\"3. Server channel\"></a>3. Server channel</h2><p>Using the <code>minimodem</code>tool (See MapleBacon’s write-up) is functional.</p>\n<p>Also, you can find some useful tools in GitHub: <a href=\"https://github.com/laurenschneider/audiodecoder\">https://github.com/laurenschneider/audiodecoder</a></p>\n<p>It may be a faster way. In fact, the <code>solve.py</code> is based on its code.</p>\n<p>After all, you’ll see this on the server channel:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HINT_Hamming@ddddPdddddddPdddPdPP(20).ECCode; Content: Why do you use such</span><br><span class=\"line\">a slow method with a high Bit Error Ratio for communication? It took me a lot of</span><br><span class=\"line\">effort to correct bit-flips, making sure the communication was less</span><br><span class=\"line\">error-prone...that is 2 say, THE ORIGINAL PROTOCOL IS WRAPPED BY SOME OTHER</span><br><span class=\"line\">TRANSFORMATIONS! Fortunately, we can now communicate properly on another channel</span><br><span class=\"line\">while enjoying a vacation in this BIG CITY--I mean, IEEE 802.3.....Wait, what is</span><br><span class=\"line\">the new protocol? Guess by yourself!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Client-channel\"><a href=\"#4-Client-channel\" class=\"headerlink\" title=\"4. Client channel\"></a>4. Client channel</h2><p>We can extract the bit string on this channel using the same method but just make some tweaks of frequency. You’ll get a bit string of 53640 bits.</p>\n<p>Notice that the bit string contains only “01” “10”, that is what <strong>Manchester is</strong> all about. The <code>IEEE 802.3</code>mentioned in the server channel message is actually to make sure you decode in the right way: there are 2 opposite ways to map 01&#x2F;10 to 1&#x2F;0, but what is widely used is defined in IEEE 802.3, which says “01”→1 and “10”→0</p>\n<p>Then the key problem is to solve Hamming code. From the given information, you’ll realize the block size is 20bits. Implement it by yourself or just Google&#x2F;GitHub&#x2F;StackOverflow it.</p>\n<p>Find every “1” bit in a block, XOR their <strong>positions</strong>, and magically you got the error bit position(0 if no error) which is a well-designed feature of Hamming code, then just flip the bit.</p>\n<p>Actually, every block has, and only has an error bit: that’s an intended design to notify you that you’re on the right way :)</p>\n<h2 id=\"5-Final-Step\"><a href=\"#5-Final-Step\" class=\"headerlink\" title=\"5. Final Step\"></a>5. Final Step</h2><p>Now you’ve got the cipher bit string: just applied Bell 103 decoder to it once again.</p>\n<p>It’ll yield a string that starts with <code>data:image/png;base64,</code></p>\n<p>An experienced CTFer will immediately put it into the browser (like what MapleBacon did). Or you can find a random online converter to recover this Base64-encoded image. It’s a QR Code. Scan it, and got the flag.</p>\n<h2 id=\"6-Hints-Explanation\"><a href=\"#6-Hints-Explanation\" class=\"headerlink\" title=\"6. Hints Explanation\"></a>6. Hints Explanation</h2><ol>\n<li><p><code>所有人都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端。可是当今皇帝的祖父 时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝， 就下了一道敕令，命令全体臣民吃鸡蛋时打破鸡蛋较小的一端，违令者重罚。 老百姓们 对这项命令极为反感。历史告诉我们，由此曾发生过六次叛乱，其中一个皇帝送了命，另 一个丢了王位…关于这一争端，曾出版过几百本大部著作，不过大端派的书一直是受禁的 ，法律也规定该派的任何人不得做官。 ——乔纳森·斯威夫特，《格列佛游记》</code></p>\n<p> It is a quote from Gulliver’s Travels.  Fun fact: this paragraph is <strong>exactly the original source of the 2 words used in modern computer science: “big-endian” &amp; “little-endian”.</strong></p>\n<p> This hint is intended to guide those who are stuck because of their ignorance of the contents(especially the coding method) of the Bell 103 protocol.</p>\n</li>\n<li><p><code>Hamming code block size: 20bits</code></p>\n<p> Noticed that minimodem may yield partly corrupt text and mislead participants. This hint is to make sure they see the hint hidden at the beginning of the service-side channel message.</p>\n</li>\n<li><p><code>Bell 103</code></p>\n<p> For those who ignored the problem description.</p>\n</li>\n</ol>\n<h2 id=\"6-Script-to-Solve\"><a href=\"#6-Script-to-Solve\" class=\"headerlink\" title=\"6. Script to Solve\"></a>6. Script to Solve</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># goertzel.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Module to create a Goertzel filter</span></span><br><span class=\"line\"><span class=\"string\">Original source: https://github.com/laurenschneider/audiodecoder</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Goertzel</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, rate, freq</span>):</span><br><span class=\"line\">        self.normalize = <span class=\"number\">0</span></span><br><span class=\"line\">        self.coeffs = <span class=\"number\">0</span></span><br><span class=\"line\">        self.sample_rate = rate</span><br><span class=\"line\">        self.target_freq = freq</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_coeff</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Precompute coefficients needed for filter equation.</span></span><br><span class=\"line\"><span class=\"string\">        Coeff formulas courtesy of Prof. Massey</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        n = <span class=\"number\">160</span></span><br><span class=\"line\"></span><br><span class=\"line\">        w0 = (<span class=\"number\">2</span> * np.pi * self.target_freq) / self.sample_rate</span><br><span class=\"line\">        self.normalize = np.exp(<span class=\"number\">1j</span> * w0 * n)</span><br><span class=\"line\">        self.coeffs = np.array([np.exp((-<span class=\"number\">1j</span>) * w0 * k) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter</span>(<span class=\"params\">self, samples</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Goertzel filter equation</span></span><br><span class=\"line\"><span class=\"string\">        :param samples: array of samples</span></span><br><span class=\"line\"><span class=\"string\">        :returns: amplitude</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        y = self.normalize * <span class=\"number\">160</span> * np.dot(self.coeffs, samples)</span><br><span class=\"line\">        ampl = np.<span class=\"built_in\">abs</span>(y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ampl</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># decode.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Decode a wav file using a Goertzel filter.</span></span><br><span class=\"line\"><span class=\"string\">Modified from https://github.com/laurenschneider/audiodecoder</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> goertzel <span class=\"keyword\">import</span> Goertzel</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> wavfile</span><br><span class=\"line\"></span><br><span class=\"line\">DATA = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">filepath = os.path.join(DATA, <span class=\"string\">&quot;filename.wav&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Read sample rate and data from audio file</span></span><br><span class=\"line\">rate, data = wavfile.read(filepath)</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">bit_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">mark_freq = <span class=\"number\">2225</span></span><br><span class=\"line\">space_freq = <span class=\"number\">2025</span></span><br><span class=\"line\">mark_filter = Goertzel(rate, mark_freq)</span><br><span class=\"line\">space_filter = Goertzel(rate, space_freq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calculate coefficients for each filter</span></span><br><span class=\"line\">mark_filter.calculate_coeff()</span><br><span class=\"line\">space_filter.calculate_coeff()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(data.size + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># for each chunk of 160 samples</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i%<span class=\"number\">160</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = i - <span class=\"number\">160</span></span><br><span class=\"line\">        end = i</span><br><span class=\"line\">        samples = data[start:end]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get amplitutes of sample set</span></span><br><span class=\"line\">        mark_amp = mark_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\">        space_amp = space_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mark_amp &gt; space_amp:</span><br><span class=\"line\">            <span class=\"comment\"># bit is 1</span></span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># bit is zero</span></span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        bit_string = to_add + bit_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"built_in\">len</span>(bit_string)+<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%<span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = x - <span class=\"number\">9</span></span><br><span class=\"line\">        end = x - <span class=\"number\">1</span></span><br><span class=\"line\">        message = <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bit_string[start:end],<span class=\"number\">2</span>)) + message</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set target frequencies</span></span><br><span class=\"line\">mark_freq = <span class=\"number\">1270</span></span><br><span class=\"line\">space_freq = <span class=\"number\">1070</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create two filters</span></span><br><span class=\"line\">mark_filter = Goertzel(rate, mark_freq)</span><br><span class=\"line\">space_filter = Goertzel(rate, space_freq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calculate coefficients for each filter</span></span><br><span class=\"line\">mark_filter.calculate_coeff()</span><br><span class=\"line\">space_filter.calculate_coeff()</span><br><span class=\"line\"></span><br><span class=\"line\">bit_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">message = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(data.size + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># for each chunk of 160 samples</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i%<span class=\"number\">160</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = i - <span class=\"number\">160</span></span><br><span class=\"line\">        end = i</span><br><span class=\"line\">        samples = data[start:end]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get amplitutes of sample set</span></span><br><span class=\"line\">        mark_amp = mark_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\">        space_amp = space_filter.<span class=\"built_in\">filter</span>(samples)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mark_amp &gt; space_amp:</span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            to_add = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        bit_string = to_add + bit_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingBolck</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(message)==<span class=\"number\">15</span>)</span><br><span class=\"line\">    message=message[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    code = <span class=\"number\">0</span></span><br><span class=\"line\">    m_pos = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ind+<span class=\"number\">1</span>)&amp;(ind): <span class=\"comment\"># Not parity check bit</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">int</span>(message[m_pos],<span class=\"number\">2</span>):</span><br><span class=\"line\">                code = code ^ (<span class=\"number\">1</span>&lt;&lt;ind)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b1</span>)&lt;&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b10</span>)&lt;&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b100</span>)&lt;&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">                code = code ^ (((ind+<span class=\"number\">1</span>)&amp;<span class=\"number\">0b1000</span>)&lt;&lt;<span class=\"number\">4</span>)</span><br><span class=\"line\">            m_pos = m_pos + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code = code ^ (<span class=\"number\">1</span>&lt;&lt;random.randint(<span class=\"number\">0</span>,<span class=\"number\">19</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&#123;0:020b&#125;&quot;</span>.<span class=\"built_in\">format</span>(code)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;from &quot;</span>+message+<span class=\"string\">&quot; to &quot;</span>+retStr)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingBolckInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(message)==<span class=\"number\">20</span>)</span><br><span class=\"line\">    code = <span class=\"built_in\">int</span>(message,<span class=\"number\">2</span>)</span><br><span class=\"line\">    wrong = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span>&lt;&lt;ind)&amp;code:</span><br><span class=\"line\">            wrong = wrong ^ (ind+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> wrong:</span><br><span class=\"line\">        code = code ^ (<span class=\"number\">1</span>&lt;&lt;(wrong-<span class=\"number\">1</span>))</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ind+<span class=\"number\">1</span>)&amp;(ind): <span class=\"comment\"># Not parity check bit</span></span><br><span class=\"line\">            retStr = retStr + (<span class=\"string\">&quot;1&quot;</span> <span class=\"keyword\">if</span> code&amp;(<span class=\"number\">1</span>&lt;&lt;ind) <span class=\"keyword\">else</span> <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Hamming</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(message),<span class=\"number\">15</span>):</span><br><span class=\"line\">        retStr = retStr + HammingBolck(message[ind:ind+<span class=\"number\">15</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HammingInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(message),<span class=\"number\">20</span>):</span><br><span class=\"line\">        retStr = retStr + HammingBolckInv(message[ind:ind+<span class=\"number\">20</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manchester</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> message:</span><br><span class=\"line\">        retStr += <span class=\"string\">&quot;01&quot;</span> <span class=\"keyword\">if</span> char==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manchesterInv</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    retStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(message), <span class=\"number\">2</span>):</span><br><span class=\"line\">        char = message[ind]</span><br><span class=\"line\">        retStr += <span class=\"string\">&quot;0&quot;</span> <span class=\"keyword\">if</span> char==<span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr</span><br><span class=\"line\"></span><br><span class=\"line\">bit_string=bit_string[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">bit_string = HammingInv(manchesterInv(bit_string))[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"built_in\">len</span>(bit_string)+<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%<span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start = x - <span class=\"number\">9</span></span><br><span class=\"line\">        end = x - <span class=\"number\">1</span></span><br><span class=\"line\">        message = <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bit_string[start:end],<span class=\"number\">2</span>)) + message</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Final-Words\"><a href=\"#7-Final-Words\" class=\"headerlink\" title=\"7. Final Words\"></a>7. Final Words</h3><p>In my eyes, a good misc problem should not be an annoying puzzle. Steps to solve a misc problem have to be reasonable. For example, in this problem, Manchester coding is applied after the application of Hamming coding: that’s because the former is channel coding, and the latter is source coding. We shouldn’t just pick some random encryption and apply it to plaintext.</p>\n<p> I have made my best to make the solving process more natural. I hope you enjoy digging deep into the problem. You’ll earn much more fun than those who can just use tools written by others without understanding fundamental principles (like me).</p>\n<p>ご武運を！</p>\n",
            "tags": [
                "Misc",
                "Write-Up",
                "出题",
                "English"
            ]
        }
    ]
}