{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"afl\" tag",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\nLearning: Electric guitar\n❤❤❤ CTF, toy projects, anime\n✖✖✖ Technological supremacy\nResume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/carpet-fuzz/",
            "url": "http://cubicy.icu/carpet-fuzz/",
            "title": "论文精炼：CarpetFuzz",
            "date_published": "2023-09-22T11:24:29.000Z",
            "content_html": "<h1 id=\"论文精炼：CarpetFuzz\"><a href=\"#论文精炼：CarpetFuzz\" class=\"headerlink\" title=\"论文精炼：CarpetFuzz\"></a>论文精炼：CarpetFuzz</h1><h1 id=\"CarpetFuzz\"><a href=\"#CarpetFuzz\" class=\"headerlink\" title=\"CarpetFuzz\"></a>CarpetFuzz</h1><h2 id=\"Automatic-Program-Option-Constraint-Extraction-from\"><a href=\"#Automatic-Program-Option-Constraint-Extraction-from\" class=\"headerlink\" title=\"Automatic Program Option Constraint Extraction from\"></a>Automatic Program Option Constraint Extraction from</h2><p>Documentation for Fuzzing</p>\n<h2 id=\"核心Idea\"><a href=\"#核心Idea\" class=\"headerlink\" title=\"核心Idea\"></a>核心Idea</h2><p>现代的大规模软件项目往往存在大量程序选项。有些漏洞需要特定参数的组合触发。然而我们不能简单地穷举这些参数的排列组合，因为这会导致工作量指数级别的膨胀。我们注意到许多参数之间存在互斥、依赖等关系，而这些关系正记录在Manual中。因此本篇文章通过NLP的手段从文档中提取参数关系并应用于Fuzzing（基于AFL）中（名为CarpetFuzz，<strong>开源</strong>）。</p>\n<p>关键参数：</p>\n<p>参数组合准确性？Precision: 96.10%  Recall: 88.85%</p>\n<p>和暴力排列相比减少的工作量？68%</p>\n<p>和一般的Fuzz相比，额外的路径？46%</p>\n<p><strong>这篇paper是比较工程性的工作？</strong></p>\n<p>精华所在是对隐式的选项关系进行提炼，而核心思路是找到不同选项描述中结构类似的句子对，从而得出两个选项的冲突关系。</p>\n<h2 id=\"行文逻辑\"><a href=\"#行文逻辑\" class=\"headerlink\" title=\"行文逻辑\"></a>行文逻辑</h2><ul>\n<li>大型项目（Kernel&#x2F;Apache&#x2F;…）结构极其复杂，攻击面广，利用链深。人工审阅代码几乎已经不可能。<strong>自动化是所有软件测试方法的大势所趋，</strong>包括Fuzz在内的自动化技术被官方探索应用。</li>\n<li>对于Fuzz而言，覆盖率是金标准（之一）。然而许多项目的覆盖率不够理想，文章认为其中一个原因是<strong>忽视了程序命令行参数</strong>对程序运行的影响。某些代码块只有在特定参数组合下才存在遍历的可能。</li>\n<li>然而简单的穷举不可行：ImageMagick有242个不同的选项。参数的常见组合也许是个好想法，文章的idea则是只保留<strong>可行</strong>组合，而非像先前的一些工作直接把参数纳入变异。</li>\n<li>难点：选项间的依赖关系在文档中以自然语言描述。Solution：<strong>NLP</strong><ul>\n<li>刁钻的示例（强context）<ul>\n<li>依赖：<code>-o在-g启用时将添加额外调试输出</code></li>\n<li>冲突：<code>xx选项仅在正式环境中启用……要切换到正式环境请使用—release</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NLP具体方法\"><a href=\"#NLP具体方法\" class=\"headerlink\" title=\"NLP具体方法\"></a>NLP具体方法</h2><ol>\n<li>给定一个程序的文档</li>\n<li>CarpetFuzz解析“OPTIONS”部分提取出所有选项及其相应的statement</li>\n<li>CarpetFuzz使用机器学习来确定statement中是否声明了某种关系<ol>\n<li>由于这样的statement在文档中占比小，文章使用基于熵的不确定性采样（主动学习），来减少人工标记训练数据的工作量。</li>\n<li>针对上述的隐晦的自然语言statement，解决方案是让CarpetFuzz总结一系列“隐含statement”的特征，并利用NLP找到满足这些特征的所有<strong>“sentence pairs”</strong></li>\n</ol>\n</li>\n<li>这样依赖关系就可以被确定，从而构建一个依赖树</li>\n<li><strong>CarpetFuzz正向&#x2F;反向遍历依赖树中找到与关系相关的节点</strong>*<ol>\n<li>（说实话我没看懂这边）</li>\n</ol>\n</li>\n<li><strong>CarpetFuzz基于语言学，利用polarity-based的有限状态机确定具体的关系</strong>*<ol>\n<li>(其实就是双重否定表肯定这种比较简单的状态机)</li>\n</ol>\n</li>\n<li>CarpetFuzz最终得以筛选出所有可用参数组合</li>\n</ol>\n<h2 id=\"背景工作\"><a href=\"#背景工作\" class=\"headerlink\" title=\"背景工作\"></a>背景工作</h2><p><img src=\"/carpet-fuzz/process.png\" alt=\"经典Fuzzing流程，Option预定义好并固定不参与实际执行\" loading=\"lazy\"></p>\n<p>经典Fuzzing流程，Option预定义好并固定不参与实际执行</p>\n<h3 id=\"关于命令行参数相关Fuzzing的其他工作\"><a href=\"#关于命令行参数相关Fuzzing的其他工作\" class=\"headerlink\" title=\"关于命令行参数相关Fuzzing的其他工作\"></a>关于命令行参数相关Fuzzing的其他工作</h3><p><code>AFLargv</code>：限制命令行参数的数量和范围；</p>\n<p>Song等 ：通过检查参数对程序运行的影响来判断有效性；</p>\n<p>Zeller等人 ：通过特定选项解析模块推断。</p>\n<p><strong>局限性：效率低</strong></p>\n<p><code>ConfigFuzz</code> ：手动检查，需要熟悉测试的目标软件用法，对测试人员以及大规模测试是无法接受的。</p>\n<h3 id=\"基于NLP的其他工作\"><a href=\"#基于NLP的其他工作\" class=\"headerlink\" title=\"基于NLP的其他工作\"></a>基于NLP的其他工作</h3><p>主要方向：代码注释+严格格式化文档，局限性强</p>\n<h2 id=\"程序结构\"><a href=\"#程序结构\" class=\"headerlink\" title=\"程序结构\"></a>程序结构</h2><p><img src=\"/carpet-fuzz/construction.png\" alt=\"Untitled\" loading=\"lazy\"></p>\n<p>Overview of CarpetFuzz. <strong>EDR: explicitly declared<br>relationships, IDR: implicitly declared relationships.</strong></p>\n<p>R&#x3D;Relationship</p>\n<p>数据集来源：<code>man</code> 命令的说明页面</p>\n<p>拆分句子→识别包含选项关系的句子（<strong>R句子</strong>）</p>\n<p><strong>关系：冲突、依赖、（蕴含、相似和取代 &#x3D;冲突，因为复用不能有效增加覆盖率）</strong></p>\n<p><img src=\"/carpet-fuzz/sentence-search.png\" alt=\"寻找R句子\" loading=\"lazy\"></p>\n<p>寻找R句子</p>\n<p>添加主语是为了避免NLP的解析错误。</p>\n<p>还有一个预处理是把选项名字替换为自定义标识符以免干扰分析（这怎么发现的？）。</p>\n<p>某个选项的关键是<strong>谓词（效果）与目标（作用对象）</strong>。</p>\n<h3 id=\"隐式的冲突参数\"><a href=\"#隐式的冲突参数\" class=\"headerlink\" title=\"隐式的冲突参数\"></a>隐式的冲突参数</h3><p>实际上，<strong>隐式的描述语句只涉及冲突：例如，-B和-L选项的描述分别是“Force output to be written with Big-Endian byte order”和“Force output to be written with Little-Endian byte order”</strong></p>\n<p>那么这些句子的语法树结构是相同的。因此这些“sentence pairs”很关键，需要被提取识别。</p>\n<p>同时还有一些常见的冲突写法，例如用<code>|</code> 分隔。当然这也可能是别名，具体看描述句子中是“这些参数”还是“这个参数”来确定到底是别名还是一些冲突的参数。</p>\n<h3 id=\"极性分析\"><a href=\"#极性分析\" class=\"headerlink\" title=\"极性分析\"></a>极性分析</h3><p>情感分析常用，这里用来解析参数之间的冲突</p>\n<p><img src=\"/carpet-fuzz/nlp.png\" alt=\"Untitled\" loading=\"lazy\"></p>\n<p>例如主语A对(B&amp;C)呈现negative的极性，我们就可以认为A不能与B&#x2F;C一起使用。</p>\n<p><a href=\"https://github.com/JackKuo666/NLP_basis/blob/master/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89%E4%BE%9D%E5%AD%98%E5%88%86%E6%9E%90.md\"></a></p>\n<aside>\n💡 个人认为这个做法效果不错的原因可能是文章提到的\"combine with\"、\"imply\"、\"like\"、\"ignore”这些关键词，技术文档的语法还是相对好分析的，对复杂的语句可能会有问题。\n所以如果把软件技术讨论社区的相关博文丢进大模型是不是会有更丰富的信息蒸馏出来？\n\n</aside>\n\n<p>神经网络实现的分类器来判断一个句子有多大可能是R句子。准确率是比较高的，但召回率比我想的多。</p>\n<h2 id=\"实际测试\"><a href=\"#实际测试\" class=\"headerlink\" title=\"实际测试\"></a>实际测试</h2><p>文章首先认为参数数量超过一定数量没有实际意义（大部分生产环境下也用不到更多的）。测试也表明基本上超过6个参数就很难有新的发现。所以使用6-wise</p>\n<p>为了找到更有价值的参数组合，测试器会关注参数的变化能够引导出多少新的代码路径覆盖率；对于太低价值的组合会逐渐被剪枝掉。</p>\n<p>那这边实际上是Song.的工作的Idea了。</p>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>剩下的主要是一些对实现细节（例如模型超参数、预处理工作）的一些描述。</p>\n<p>然后还有就是有效性度量，主要是准确率和性能速度。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Q1. CarpetFuzz的性能如何？</span><br><span class=\"line\">Q2. 关系识别的准确性如何？（那必须好）</span><br><span class=\"line\">Q3. 关系提取的准确性如何？（那必须好）</span><br><span class=\"line\">**Q4. CarpetFuzz的优先级排序技术的有效性如何？</span><br><span class=\"line\">\t“结果显示，相比随机抽样，我们的剪枝技术可以减少更多组合（<span class=\"number\">98.91</span>%），</span><br><span class=\"line\">同时仅略微损失边的覆盖率（<span class=\"number\">2.54</span>%）”**</span><br><span class=\"line\">Q5. 与最先进技术相比，CarpetFuzz的模糊测试性能如何？（那必须好，因为前人的工作看起来确实比较粗糙）</span><br><span class=\"line\">Q6. CarpetFuzz能否发现真实世界的漏洞？（事实证明可以）</span><br></pre></td></tr></table></figure>\n\n<p>在5次48h的fuzzing中，</p>\n<blockquote>\n<p>结果显示，平均有94.59%的CarpetFuzz的唯一边没有被其他模糊器发现，CarpetFuzz平均能够帮助AFL发现多出45.97%的边。</p>\n</blockquote>\n<p>边指的是构成代码路径的jmp之类的跳转？</p>\n<p>“唯一边”这个性能指标确实可以展示其能发现新的未被探索过的代码路径。</p>\n<p>Real-world测试也发现了很多特殊的crash，然后搞到43个0day</p>\n<h2 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h2><p>这篇文章也指出局限性主要来自NLP模型的准确率问题（猜到了）。不过好在这基本只会导致跑太多无效的测试，并不怎么漏报。</p>\n<p>还有一个问题是缺乏人类常识，例如他不知道水平和垂直是反义词。解决方案是知识图谱（是否有点太古典机器学习了）</p>\n<p><strong>我怎么觉得这俩问题都是大语言模型最擅长的？</strong></p>\n<h2 id=\"文章总结\"><a href=\"#文章总结\" class=\"headerlink\" title=\"文章总结\"></a>文章总结</h2><p>原文摘抄如下：</p>\n<blockquote>\n<p>我们设计并实现了CarpetFuzz，一种基于自然语言处理的模糊测试辅助技术，用于提取程序选项约束。通过采用主动学习、机器学习和自然语言处理技术，CarpetFuzz能够准确地从文档中提取选项之间的关系，并过滤掉67.91%的组合选项。借助经过修剪的有效组合，CarpetFuzz帮助AFL在20个常用程序中找到了其他模糊器无法发现的路径的增加了45.97%，并发现了57个独特的崩溃，其中30个被分配了CVE ID。此外，CarpetFuzz在之前的基准测试中发现了94个独特的崩溃，是之前工作的1.71倍。</p>\n</blockquote>\n<p>感谢您的阅读🙂</p>\n",
            "tags": [
                "NLP",
                "Fuzzing",
                "AFL"
            ]
        }
    ]
}