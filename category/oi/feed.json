{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cubic Y³ • All posts by \"oi\" category",
    "description": "Notes, CTF, DIY, thoughts and waifus.\n\nI'm CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.\nLearning: Electric guitar\n❤❤❤ CTF, toy projects, anime\n✖✖✖ Technological supremacy\n✔✔✔ Independent thinking\nResume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&target=resume.tex&command=xelatex).",
    "home_page_url": "http://cubicy.icu",
    "items": [
        {
            "id": "http://cubicy.icu/2019/10/08/%E6%B4%9B%E8%B0%B7P5072%20[Ynoi2015]%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/",
            "url": "http://cubicy.icu/2019/10/08/%E6%B4%9B%E8%B0%B7P5072%20[Ynoi2015]%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/",
            "title": "洛谷:P5072 [Ynoi2015]盼君勿忘",
            "date_published": "2019-10-08T12:13:00.000Z",
            "content_html": "<p>原题地址:<a href=\"https://www.luogu.org/problem/P5072\">https://www.luogu.org/problem/P5072</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一个序列，每次查询一个区间[l,r]中所有子序列分别去重后的和mod p</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我们考虑每个数的贡献。即该区间内含有这个数的子序列个数。用补集转化为不含这个数的子序列个数。<br>那么，假设这个数在[l,r]内出现了k次，则一共有2^(r-l+1) -2^(r-l+1-k)个子序列包含这个数。<br>本题可以离线，因此选择使用莫队，过程中维护cnt[k]表示区间内恰好出现k次的数字个数，维护sum[j]表示区间内恰好出现j次的数字之和（区间内出现次数相同的数，对于这些数，区间中包含这些数的子序列个数都相同，因此存数字之和就行）。<br>然而这样时间复杂度为O(询问次数*单次询问复杂度)&#x3D;O(n*max(sqrt(n),n))&#x3D;O(nm)，并不可行。我们发现时间瓶颈不在莫队的sqrt(n)，而是在单次查询中求解的复杂度n。<br>有2个套路可供使用：出现次数大于sqrt(n)的数不超过sqrt(n)个，值不为0的cnt[k]少于2*sqrt(n)个（反证易得，本质类似）。 </p>\n<ul>\n<li>对于第一个套路，我们分类讨论：出现次数小于等于sqrt(n)，则统计每个出现次数的数字之和；大于sqrt(n)的用哈希表(unordered_set,C++11)存下具体的数字和其出现次数。这样每次查询是sqrt(n)。  </li>\n<li>笔者使用的则是第二个套路：val[x]表示出现次数恰好为x的数字之和（同上文的sum[j]）。随着莫队l,r指针的移动，把所有可能变为非0的val[x]记下来，指针移动完毕后再对其进行筛选，把确实非0的val[x]保留，其他去除。这样计算单次答案的复杂度就等同于单次查询中莫队指针移动的平均步数：都是sqrt(n)级别。这样做不需要用到哈希表之类的，常数小了很多，甚至不需要读入优化也能轻松过。</li>\n</ul>\n<p>还没完。我们发现模数是不定的，为了保证单次查询的复杂度压在sqrt(n)以内，我们还有最后一件事情要做：在sqrt(n)的时间内求出2^(r-l+1) 和所有的2^(r-l+1-k)。这里安利一个神奇的方式：每次查询只需要做一次时间复杂度为sqrt(n)的预处理就可以O(1)查询了。<br>假设查询区间长度为len(len&#x3D;r-l+1)，我们记siz&#x3D;sqrt(len)，而后计算2^0 , 2^1 , 2^2 … 2^sqrt(len)，存在数组pow1中；再计算2^sqrt(len) , 2^(2*sqrt(len)) , 2^(3*sqrt(len)) , 2^(4*sqrt(len))… , 2^(sqrt(len)*sqrt(len))，存在数组pow[2]中。以上计算都在mod p意义下进行。<br>这样求2的任意次方都可以O(1)出解:2^k &#x3D;2^(k&#x2F;siz) *2^(k%siz)&#x3D;pow2[k&#x2F;siz]*pow1[k%siz]（记得模p）。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXN 100005 </span></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[MAXN],val[MAXN*<span class=\"number\">2</span>],cnt[MAXN],ans[MAXN];</span><br><span class=\"line\"><span class=\"type\">int</span> tot,blosiz,powsiz;</span><br><span class=\"line\"><span class=\"type\">int</span> bel[MAXN],pow1[MAXN],pow2[MAXN];</span><br><span class=\"line\"><span class=\"type\">bool</span> calced[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> sum[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">query</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> id,l,r,p;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> query &amp;sb) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bel[l]!=bel[sb.l] ? bel[l]&lt;bel[sb.l] : (bel[l]&amp;<span class=\"number\">1</span> ? r&lt;sb.r : r&gt;sb.r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; q[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tsum[cnt[x]]-=x;</span><br><span class=\"line\">\tcnt[x]++;</span><br><span class=\"line\">\tsum[cnt[x]]+=x;</span><br><span class=\"line\">\t++tot;</span><br><span class=\"line\">\tval[tot]=cnt[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tsum[cnt[x]]-=x;</span><br><span class=\"line\">\tcnt[x]--;</span><br><span class=\"line\">\tsum[cnt[x]]+=x;</span><br><span class=\"line\">\t++tot;</span><br><span class=\"line\">\tval[tot]=cnt[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1LL</span>*pow1[x%powsiz]*pow2[x/powsiz]%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\tblosiz=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]),bel[i]=(i<span class=\"number\">-1</span>)/blosiz;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;q[i].l,&amp;q[i].r,&amp;q[i].p),q[i].id=i;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(q+<span class=\"number\">1</span>,q+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l&gt;q[i].l) <span class=\"built_in\">add</span>(a[--l]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r&lt;q[i].r) <span class=\"built_in\">add</span>(a[++r]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l&lt;q[i].l) <span class=\"built_in\">del</span>(a[l++]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r&gt;q[i].r) <span class=\"built_in\">del</span>(a[r--]);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"type\">int</span> newtot=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len=r-l+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=tot;j++) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (val[j]&amp;&amp;sum[val[j]]!=<span class=\"number\">0</span>&amp;&amp;!calced[val[j]]) </span><br><span class=\"line\">\t\t\t\tcalced[val[j]]=<span class=\"number\">1</span>,val[++newtot]=val[j];</span><br><span class=\"line\">\t\ttot=newtot;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpowsiz=<span class=\"built_in\">sqrt</span>(len)+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tpow1[<span class=\"number\">0</span>]=pow2[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=powsiz;j++) </span><br><span class=\"line\">\t\t\tpow1[j]=(pow1[j<span class=\"number\">-1</span>]+pow1[j<span class=\"number\">-1</span>])%q[i].p;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j*powsiz&lt;=len;j++) </span><br><span class=\"line\">\t\t\tpow2[j]=<span class=\"number\">1LL</span>*pow2[j<span class=\"number\">-1</span>]*pow1[powsiz]%q[i].p;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> powLen=<span class=\"built_in\">power</span>(len,q[i].p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=tot;j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">long</span> <span class=\"type\">long</span> num=sum[val[j]]%q[i].p;</span><br><span class=\"line\">\t\t\tans[q[i].id]=(ans[q[i].id]+num*(powLen-<span class=\"built_in\">power</span>(len-val[j],q[i].p)))%q[i].p;</span><br><span class=\"line\">\t\t\tcalced[val[j]]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans[q[i].id]+=q[i].p;</span><br><span class=\"line\">\t\tans[q[i].id]%=q[i].p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "分块",
                "哈希"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/",
            "url": "http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/",
            "title": "洛谷:P3950 部落冲突",
            "date_published": "2018-10-28T12:00:00.000Z",
            "content_html": "<p>原题地址:<a href=\"https://www.luogu.org/problemnew/show/P3950\">https://www.luogu.org/problemnew/show/P3950</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一棵树，每次给定一个操作，有如下两种：  </p>\n<ol>\n<li>将某条边染黑<br>2.询问给定的u,v两点间是否有边被染黑</li>\n</ol>\n<hr>\n<p>###思路<br>询问两点间是否有边被染黑只需要在求LCA时判一下就行。所以直接上树链剖分即可。<br>本题不需要使用线段树，使用树状数组查询路径上是否有任意一段区间和不为0即可。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) x&amp;-x</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">P war[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[maxn], dep[maxn], val[maxn], sz[maxn], top[maxn], son[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> tre[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> tot;</span><br><span class=\"line\"><span class=\"type\">int</span> cntw;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ch, x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>) &amp;&amp; ch != <span class=\"string\">&#x27;-&#x27;</span>) ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    ch == <span class=\"string\">&#x27;-&#x27;</span> ? f = <span class=\"number\">-1</span>, ch = <span class=\"built_in\">getchar</span>() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + ch - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, len, nxt;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>(<span class=\"type\">int</span> _to, <span class=\"type\">int</span> _len, <span class=\"type\">int</span> _nxt):<span class=\"built_in\">to</span>(_to), <span class=\"built_in\">len</span>(_len), <span class=\"built_in\">nxt</span>(_nxt) &#123;&#125;</span><br><span class=\"line\">&#125;E[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> h[maxn], cnte;</span><br><span class=\"line\"><span class=\"type\">int</span> L[maxn], R[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x;i &lt;= maxn; i += <span class=\"built_in\">lowbit</span>(i)) tre[i] += add;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>; <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x; i; i -= <span class=\"built_in\">lowbit</span>(i)) ans += tre[i]; <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    E[++cnte] = <span class=\"built_in\">Edge</span>(v, w, h[u]), h[u] = cnte;</span><br><span class=\"line\">    E[++cnte] = <span class=\"built_in\">Edge</span>(u, w, h[v]), h[v] = cnte;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sz[x] = <span class=\"number\">1</span>; dep[x] = dep[fa[x]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = E[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[to] = x;val[x] = E[i].len;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(to);</span><br><span class=\"line\">        sz[x] += sz[to];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz[to] &gt; sz[son[x]]) son[x] = to;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    L[x] = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == son[fa[x]]) top[x] = top[fa[x]];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> top[x] = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x]) <span class=\"built_in\">dfs2</span>(son[x]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; i; i = E[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = E[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa[x] || to == son[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    R[x] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L[x] &lt; L[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(L[x], <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L[x] &lt; L[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(L[x], <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">qsum</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;<span class=\"comment\">//其实可以查到有1就退出，不用查完和</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x] != top[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]] &lt; dep[top[y]])<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        ans += (<span class=\"built_in\">query</span>(L[x]) - <span class=\"built_in\">query</span>(L[top[x]] - <span class=\"number\">1</span>));</span><br><span class=\"line\">        x = fa[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x] &lt; dep[y])<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x!=y)</span><br><span class=\"line\">\t\tans += (<span class=\"built_in\">query</span>(L[x]) - <span class=\"built_in\">query</span>(L[y]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) <span class=\"built_in\">add_edge</span>(<span class=\"built_in\">read</span>(), <span class=\"built_in\">read</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> s[<span class=\"number\">50</span>];</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;C&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = <span class=\"built_in\">read</span>(), v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            <span class=\"built_in\">cut</span>(u, v);</span><br><span class=\"line\">            war[++cntw] = <span class=\"built_in\">P</span>(u, v);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;U&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> w = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            <span class=\"built_in\">connect</span>(war[w].first, war[w].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">qsum</span>(<span class=\"built_in\">read</span>(), <span class=\"built_in\">read</span>()) != <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "数链剖分",
                "树状数组",
                "LCA"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/",
            "url": "http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/",
            "title": "洛谷:P1967 货车运输",
            "date_published": "2018-09-28T05:48:00.000Z",
            "content_html": "<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P1902</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一个n个点m条边的无向带权图，每次询问2点u,v的联通情况，不联通则输出-1。<br>如果联通，不妨将一条联通u,v的路径上的最小权值记为w，则该次询问输出所有可能的w中的最大值。<br>共有q次询问。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>对于任意两点u&amp;v，我们需要找出能使得w最大的一条最优路径。<br>因此需要生成一个新图，使得原图中联通<strong>任意两点之间只存在一条</strong>能使得w最大的最优路径。<br>因此这是一棵树……<br>又因为要使w最大，应尽量选择边权大的边作为路径……  然后就突然发觉：这不就是Kruskal算法的过程吗？只不过最小生成树优先选择边权小的边，此时优先选择边权大的。<br>因此要求的新图就是一颗<strong>最大生成树</strong>……Kruskal可破。<br>然后就是求任意两点LCA了。此处使用倍增，也方便维护某节点向树根爬的时候路上的最小权值。<br>（用树链剖分+线段树维护也行…………）<br>更具体的看代码注释。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inf 1000000005</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v,w;<span class=\"comment\">//两点u&amp;v以及边权</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> Node &amp;b) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w&lt;b.w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector &lt;Node&gt; e[<span class=\"number\">50005</span>];<span class=\"comment\">//e[u]储存节点u相连的边集。</span></span><br><span class=\"line\">priority_queue &lt;Node&gt; Q;<span class=\"comment\">//边权越大的优先级越高</span></span><br><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">50005</span>];<span class=\"comment\">//Kruskal的御用并查集，fa[u]代表u点所处集合</span></span><br><span class=\"line\"><span class=\"type\">bool</span> vis[<span class=\"number\">50005</span>];<span class=\"comment\">//是否已经被dfs过程访问过</span></span><br><span class=\"line\"><span class=\"type\">int</span> fas[<span class=\"number\">50005</span>][<span class=\"number\">21</span>],minw[<span class=\"number\">50005</span>][<span class=\"number\">21</span>],deep[<span class=\"number\">50005</span>];</span><br><span class=\"line\"><span class=\"comment\">//fas[u][j]代表u点在所处树中的第2^j级父亲编号</span></span><br><span class=\"line\"><span class=\"comment\">//minw[u][j]代表u点在所处树中至第2^j级父亲的路径上最小边权</span></span><br><span class=\"line\"><span class=\"comment\">//deep[u]代表u点在所处树中深度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span><span class=\"comment\">//查找x所在集合编号</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x==fa[x]) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> fa[x]=<span class=\"built_in\">find</span>(fa[x]);<span class=\"comment\">//路径压缩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">uni</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span> <span class=\"comment\">//合并a,b所在集合</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[<span class=\"built_in\">find</span>(a)]=<span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w)</span> <span class=\"comment\">//添加新图边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Node one;</span><br><span class=\"line\">    one.u=u;</span><br><span class=\"line\">    one.v=v;</span><br><span class=\"line\">    one.w=w;</span><br><span class=\"line\">    e[u].<span class=\"built_in\">push_back</span>(one);</span><br><span class=\"line\">    <span class=\"built_in\">uni</span>(u,v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> f,<span class=\"type\">int</span> k)</span><span class=\"comment\">//dfs，u代表当前点，f为当前点父亲，k为深度</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    deep[u]=k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;e[u].<span class=\"built_in\">size</span>();i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e[u][i].v==f) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(e[u][i].v,u,k+<span class=\"number\">1</span>);</span><br><span class=\"line\">            fas[e[u][i].v][<span class=\"number\">0</span>]=u;</span><br><span class=\"line\">            minw[e[u][i].v][<span class=\"number\">0</span>]=e[u][i].w;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> linked=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>()&amp;&amp;linked&lt;n<span class=\"number\">-1</span>) &#123;<span class=\"comment\">//边数m可能少于n-1，因此需要注意Q是否为空</span></span><br><span class=\"line\">        Node now=Q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        Q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> a=now.u,b=now.v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(a)==<span class=\"built_in\">find</span>(b)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            linked++;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(a,b,now.w);</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(b,a,now.w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span><span class=\"comment\">//求x，y的lca</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(x)!=<span class=\"built_in\">find</span>(y)) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//不在一个树里</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ans=inf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deep[y] &gt;deep[x]) <span class=\"built_in\">swap</span>(x,y);<span class=\"comment\">//较深的标记为x</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">20</span>;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"comment\">//令x跳到与y相同高度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[fas[x][i]]&gt;=deep[y])&#123;</span><br><span class=\"line\">            ans=<span class=\"built_in\">min</span>(ans,minw[x][i]);</span><br><span class=\"line\">            x=fas[x][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x==y) <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">20</span>; i&gt;=<span class=\"number\">0</span>; i--)<span class=\"comment\">//让x,y一起跳到lca节点下方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fas[x][i]!=fas[y][i])&#123;</span><br><span class=\"line\">            ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">min</span>(minw[x][i],minw[y][i]));</span><br><span class=\"line\">            x=fas[x][i]; </span><br><span class=\"line\">            y=fas[y][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ans=<span class=\"built_in\">min</span>(ans,<span class=\"built_in\">min</span>(minw[x][<span class=\"number\">0</span>],minw[y][<span class=\"number\">0</span>]));<span class=\"comment\">//统计最小边权</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        fa[i]=i;<span class=\"comment\">//并查集预处理，各个点都处于自己所代表的集合</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class=\"line\">        Node one;</span><br><span class=\"line\">        one.u=x;</span><br><span class=\"line\">        one.v=y;</span><br><span class=\"line\">        one.w=z;</span><br><span class=\"line\">        Q.<span class=\"built_in\">push</span>(one);<span class=\"comment\">//加入Kruskal御用队列Q</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Kruskal</span>();<span class=\"comment\">//最大生成树</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;<span class=\"comment\">//倍增数组初始化&amp;dfs</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vis[i]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">            fas[i][<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">            minw[i][<span class=\"number\">0</span>]=inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">20</span>;i++) &#123;<span class=\"comment\">//倍增预处理</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++) &#123;</span><br><span class=\"line\">            fas[j][i]=fas[fas[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            minw[j][i]=<span class=\"built_in\">min</span>(minw[j][i<span class=\"number\">-1</span>],minw[fas[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">lca</span>(a,b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "图论",
                "Kruskal"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/",
            "url": "http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/",
            "title": "洛谷:P1901 发射站",
            "date_published": "2018-09-28T05:11:00.000Z",
            "content_html": "<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P1901</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>有 N 个能量发射站排成一行，每个都有**不相同的高度 $H_i$**，能向两边（当然两端的只能向一边）同时发射能量值为$V_i$ 的能量，并且发出的能量只被两边最近的且比它高的发射站接收。</p>\n<p>显然，每个发射站发来的能量有可能被0或1或2个其他发射站所接受，求接收最多能量的发射站接收的能量是多少。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>每个能量塔射出的能量被左右第一个比其高的塔所拦截。隐隐约约觉得可以用单调栈搞……<br>维护一个高度单调不升栈，考虑<strong>依次</strong>将能量塔i加入栈：  </p>\n<ol>\n<li>如果高度比栈顶元素大或栈空，栈顶元素能量加上$V_i$，压入栈;  </li>\n<li>如果高度比栈顶元素小（栈顶元素编号记为top），当前能量塔i接收的能量加上$V_{top}$，弹出栈顶元素。重复执行直到符合情况1，按1的处理方法处理。<br>最后直接扫描一遍最大值，输出。</li>\n</ol>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> s1[<span class=\"number\">1000010</span>],h[<span class=\"number\">1000010</span>],v[<span class=\"number\">1000010</span>],sum[<span class=\"number\">1000010</span>],ans,n,top;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;h[i],&amp;v[i]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top&amp;&amp;h[s1[top]]&lt;h[i])</span><br><span class=\"line\">            sum[i]+=v[s1[top]],top--;</span><br><span class=\"line\">        sum[s1[top]]+=v[i];</span><br><span class=\"line\">        top++;</span><br><span class=\"line\">        s1[top]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        ans=<span class=\"built_in\">max</span>(ans,sum[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Stack"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "http://cubicy.icu/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "替罪羊树学习笔记",
            "date_published": "2018-08-03T08:53:00.000Z",
            "content_html": "<p>博客咕咕咕了好久……最近会逐步继续恢复更新博客的。<br>最近又在学习二叉搜索树。实测发现替罪羊树快的飞起(时间约Splay的1&#x2F;2)~写起来还比较简单，决定来一波。<br>（那为什么还要用Splay呢？因为Splay是序列之王！还能维护LCT！（你要用非旋Treap（FHQ-Treap）我也没意见））<br>替罪羊树的主要思想就是当出现重量失衡的时候，<strong>把罪魁祸首的那个子树拎出来，重新按最完美的方式（也就是近似完全二叉树）构造一遍再接回去</strong>。<br>如何定义某个子树不平衡：当这个子树的左右子树其中之一的“重量”（节点个数）超过了整个子树的α*100%时，我们认为这个子树不平衡。<br>举例：α&#x3D;0.75时，如果一个子树左子树有4个节点，右子树有1个，这个子树大小就是4+1+1&#x3D;6，左子树占比超过了α*100%（即75%），这个子树不平衡，需要重构。<br>显然，α取值介于0.5至1.0之间，越小树越平衡但重构次数越多，越大重构次数越少但树越不平衡。太大太小都会出事。<strong>一般而言，α取0.75</strong>。如果题目查询次数远大于插入次数，可略微降低α取值（比如α&#x3D;0.70）；若远小于，则略升高（如α&#x3D;0.80）。<br>下面以<a href=\"https://www.luogu.org/problemnew/show/P3369\">洛谷3369【模板】普通平衡树</a>为例：  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个板子有改进之处：比如删除节点可以打上删除懒标记，单个节点可以记录同一数字数量避免多余节点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inf (1&lt;&lt;30)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> maxn (2100000)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> db double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> il inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> db al=<span class=\"number\">0.75</span>;<span class=\"comment\">//α</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> son[<span class=\"number\">2</span>],fa,size,num;<span class=\"comment\">//左右孩子储存地址，节点父亲，以该节点为根子树的重量，该节点储存的数字</span></span><br><span class=\"line\">&#125; t[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n,cnt,root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">bool</span> <span class=\"title\">balance</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>   <span class=\"comment\">//判断子树是否平衡</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (db)(t[id].size*al&gt;=(db)t[ t[id].son[<span class=\"number\">0</span>] ].size) &amp;&amp; (db)( t[id].size*al&gt;=(db)t[t[ id].son[<span class=\"number\">1</span>] ].size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> cur[maxn],sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">recycle</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>    <span class=\"comment\">//压扁，把需要重构的子树拎出来先拍扁成序列</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[id].son[<span class=\"number\">0</span>]) <span class=\"built_in\">recycle</span>(t[id].son[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    cur[++sum]=id;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[id].son[<span class=\"number\">1</span>]) <span class=\"built_in\">recycle</span>(t[id].son[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">build</span><span class=\"params\">(RG <span class=\"type\">int</span> l,RG <span class=\"type\">int</span> r)</span>   <span class=\"comment\">//递归建树，使结构最优</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>,id=cur[mid];</span><br><span class=\"line\">    t[ t[id].son[<span class=\"number\">0</span>]=<span class=\"built_in\">build</span>(l,mid<span class=\"number\">-1</span>) ].fa=id;</span><br><span class=\"line\">    t[ t[id].son[<span class=\"number\">1</span>]=<span class=\"built_in\">build</span>(mid+<span class=\"number\">1</span>,r) ].fa=id;</span><br><span class=\"line\">    t[id].size=t[ t[id].son[<span class=\"number\">0</span>] ].size+t[ t[id].son[<span class=\"number\">1</span>] ].size+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>   <span class=\"comment\">//重构子树，再“接回去”</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">recycle</span>(id);</span><br><span class=\"line\">    RG <span class=\"type\">int</span> fa=t[id].fa,Son=( t[ t[id].fa ].son[<span class=\"number\">1</span>]==id );</span><br><span class=\"line\">    RG <span class=\"type\">int</span> cur=<span class=\"built_in\">build</span>(<span class=\"number\">1</span>,sum);</span><br><span class=\"line\">    t[ t[fa].son[Son]=cur ].fa=fa;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id==root) root=cur;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span><span class=\"comment\">//插入一个数字x</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root,cur=++cnt;</span><br><span class=\"line\">    t[cur].size=<span class=\"number\">1</span>,t[cur].num=x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123; <span class=\"comment\">//找到适合位置插入</span></span><br><span class=\"line\">        t[now].size++;</span><br><span class=\"line\">        RG <span class=\"type\">bool</span> Son=(x&gt;=t[now].num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( t[now].son[Son] ) now=t[now].son[Son];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            t[ t[now].son[Son]=cur ].fa=now;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=cur; i; i=t[i].fa) <span class=\"keyword\">if</span>(!<span class=\"built_in\">balance</span>(i)) flag=i;<span class=\"comment\">//注意：重建时取深度最浅的，以避免小子树重构完大子树还重构，浪费时间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">rebuild</span>(flag); <span class=\"comment\">//插入往往会导致不平衡,这时需要重建不平衡的子树即可</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">get_num</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span>   <span class=\"comment\">//查询 x 在树中的节点编号（在数组中储存位置下标）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[now].num==x) <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> now=t[now].son[ t[now].num&lt;x ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(RG <span class=\"type\">int</span> id)</span>   <span class=\"comment\">//删除</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[id].son[<span class=\"number\">0</span>] &amp;&amp; t[id].son[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        RG <span class=\"type\">int</span> cur=t[id].son[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t[cur].son[<span class=\"number\">1</span>]) cur=t[cur].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[id].num=t[cur].num;</span><br><span class=\"line\">        id=cur;</span><br><span class=\"line\">    &#125; <span class=\"comment\">//删除操作需要找到左子树的最后一个节点或右子树的第一个节点来顶替,优先找左子树</span></span><br><span class=\"line\">    RG <span class=\"type\">int</span> Son=(t[id].son[<span class=\"number\">0</span>]) ? t[id].son[<span class=\"number\">0</span>]:t[id].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">    RG <span class=\"type\">int</span> k=( t[ t[id].fa ].son[<span class=\"number\">1</span>]==id );</span><br><span class=\"line\">    t[ t[ t[id].fa ].son[k]=Son ].fa=t[id].fa;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=t[id].fa; i; i=t[i].fa) t[i].size--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id==root) root=Son;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">get_rank</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span>   <span class=\"comment\">//查 x 的排名</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(now) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[now].num&lt;x) ans+=t[ t[now].son[<span class=\"number\">0</span>] ].size+<span class=\"number\">1</span>,now=t[now].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> now=t[now].son[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">il <span class=\"type\">int</span> <span class=\"title\">get_kth</span><span class=\"params\">(RG <span class=\"type\">int</span> x)</span>   <span class=\"comment\">//查树中的第 k 个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    RG <span class=\"type\">int</span> now=root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[ t[now].son[<span class=\"number\">0</span>] ].size==x<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t[ t[now].son[<span class=\"number\">0</span>] ].size&gt;=x) now=t[now].son[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x-=t[ t[now].son[<span class=\"number\">0</span>] ].size+<span class=\"number\">1</span>,now=t[now].son[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt=<span class=\"number\">2</span>,root=<span class=\"number\">1</span>;</span><br><span class=\"line\">    t[<span class=\"number\">1</span>].num=-inf,t[<span class=\"number\">1</span>].size=<span class=\"number\">2</span>,t[<span class=\"number\">1</span>].son[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">    t[<span class=\"number\">2</span>].num=inf,t[<span class=\"number\">2</span>].size=<span class=\"number\">1</span>,t[<span class=\"number\">2</span>].fa=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    RG <span class=\"type\">int</span> type,x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;type,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type==<span class=\"number\">1</span>) <span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">2</span>) <span class=\"built_in\">erase</span>( <span class=\"built_in\">get_num</span>(x) );</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">get_rank</span>(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,t[ <span class=\"built_in\">get_kth</span>(x+<span class=\"number\">1</span>) ].num);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,t[<span class=\"built_in\">get_kth</span>(<span class=\"built_in\">get_rank</span>(x))].num);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,t[<span class=\"built_in\">get_kth</span>(<span class=\"built_in\">get_rank</span>(x+<span class=\"number\">1</span>)+<span class=\"number\">1</span>)].num);<span class=\"comment\">//注意此处 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Treap"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/",
            "url": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/",
            "title": "洛谷:P1486 [NOI2004]郁闷的出纳员",
            "date_published": "2018-04-09T14:23:00.000Z",
            "content_html": "<p>原题地址:<a href=\"https://www.luogu.org/problemnew/show/P1486\">https://www.luogu.org/problemnew/show/P1486</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>一个序列a，初始为空。<br>随时插入一个数，查询第k大，全体加，全体减。<br>但是如果任何数在任何时刻低于给定的下界MIN，则立即移除出序列。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>插入，查询第k大，容易发现是BST题。于是上Treap。<br>全体加全体减暴力加肯定不行，考虑用变量delta储存变化情况。全体加n就是delta+&#x3D;n（n为负就是减）<br>于是每个数实际的值是：树里储存该数的值+delta  ——①<br>减了之后可能会有数低于下界，查找最小的数判断是不是小于MIN，是的话删除，重复直到不再小于MIN。<br>注意新插入的数不应该受之前的加减影响，所以将一个数字num插入树中时，如果直接把num插入树中，就变成num+delta了。<br>实际应该插入的是num-delta，这样结合上文①，现在这个数实际的值就是num本身了。<br>提供一个指针实现的Treap，不推荐使用其实，调的时候快把我搞吐血。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MAXN=<span class=\"number\">200010</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d,rnd,size;</span><br><span class=\"line\">        Node *ch[<span class=\"number\">2</span>],*pa;</span><br><span class=\"line\">    &#125;pool[MAXN],*root;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Node *p=&amp;pool[++tot];</span><br><span class=\"line\">        p-&gt;d=d;p-&gt;rnd=<span class=\"built_in\">rand</span>();p-&gt;size=<span class=\"number\">1</span>;</span><br><span class=\"line\">        p-&gt;ch[<span class=\"number\">0</span>]=p-&gt;ch[<span class=\"number\">1</span>]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p?p-&gt;size:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        p-&gt;size=<span class=\"built_in\">size</span>(p-&gt;ch[<span class=\"number\">0</span>])+<span class=\"built_in\">size</span>(p-&gt;ch[<span class=\"number\">1</span>])+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(Node *p,<span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Node *pa=p-&gt;pa,*gp=pa-&gt;pa,*son=p-&gt;ch[t^<span class=\"number\">1</span>];</span><br><span class=\"line\">        pa-&gt;ch[t]=son;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(son)son-&gt;pa=pa;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(gp)gp-&gt;ch[pa==gp-&gt;ch[<span class=\"number\">1</span>]]=p;</span><br><span class=\"line\">        p-&gt;pa=gp;</span><br><span class=\"line\">        p-&gt;ch[t^<span class=\"number\">1</span>]=pa;</span><br><span class=\"line\">        pa-&gt;pa=p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa==root)root=p;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(pa);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">treap</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==root || p-&gt;rnd &gt;= p-&gt;pa-&gt;rnd)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p,p==p-&gt;pa-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *r,Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            root=p;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> f=(p-&gt;d &gt;= r-&gt;d);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!r-&gt;ch[f])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r-&gt;ch[f]=p;</span><br><span class=\"line\">            p-&gt;pa=r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(r-&gt;ch[f],p);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">find</span><span class=\"params\">(Node *r,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>]))<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(r-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(r-&gt;ch[<span class=\"number\">1</span>],x-<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(Node *p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;ch[<span class=\"number\">0</span>] &amp;&amp; !p-&gt;ch[<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==root)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                root=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Node *pa=p-&gt;pa;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pa)</span><br><span class=\"line\">                pa-&gt;ch[p==pa-&gt;ch[<span class=\"number\">1</span>]]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p!=root)</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(p=p-&gt;pa);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;ch[<span class=\"number\">0</span>] &amp;&amp; p-&gt;ch[<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> f=(p-&gt;ch[<span class=\"number\">1</span>]-&gt;rnd &lt; p-&gt;ch[<span class=\"number\">0</span>]-&gt;rnd);</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p-&gt;ch[f],f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> f=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;ch[<span class=\"number\">0</span>])f=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(p-&gt;ch[f],f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">del</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(Node *r,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>]))<span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(r-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> r-&gt;d;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(r-&gt;ch[<span class=\"number\">1</span>],x-<span class=\"built_in\">size</span>(r-&gt;ch[<span class=\"number\">0</span>])<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">getUpper</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c=<span class=\"built_in\">getchar</span>())</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(c))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">srand</span>((<span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> Q,Min,x;</span><br><span class=\"line\">        <span class=\"type\">char</span> op;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;Q,&amp;Min);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>,delta=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(Q--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            op=<span class=\"built_in\">getUpper</span>();</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(op)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x&lt;Min)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    Node *p=<span class=\"built_in\">newnode</span>(x-delta);</span><br><span class=\"line\">                    <span class=\"built_in\">insert</span>(root,p);</span><br><span class=\"line\">                    <span class=\"built_in\">treap</span>(p);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">                    delta+=x;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    delta-=x;</span><br><span class=\"line\">                    <span class=\"type\">int</span> xtq=<span class=\"built_in\">size</span>(root);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=xtq;i++)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">kth</span>(root,<span class=\"number\">1</span>)+delta&lt;Min)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">del</span>(<span class=\"built_in\">find</span>(root,<span class=\"number\">1</span>));</span><br><span class=\"line\">                            ans++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x&gt;<span class=\"built_in\">size</span>(root))<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">kth</span>(root,<span class=\"built_in\">size</span>(root)-x+<span class=\"number\">1</span>)+delta);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Treap",
                "BST"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/",
            "url": "http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/",
            "title": "洛谷:P3384 [HNOI2004]宠物收养场",
            "date_published": "2018-04-09T14:05:00.000Z",
            "content_html": "<p>原题地址:<a href>https://www.luogu.org/problemnew/show/P3384</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一些序列<strong>（没有重复数字）</strong>，每个序列支持：<br>给定一些数k<strong>（对于每个序列不重复）</strong>，每次在序列里找到最接近k的数删除（如果有2个数字与k差一样，即分别是k-b和k+b，则选择较小的k-b），累加与k的差，输出。</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>其实关键就是维护一个有序序列，支持插入，查询前继后继，删除指定数字。<br>自然我们会想到手打平衡树，Treap&#x2F;Splay皆可。（这里只有旋转实现的Treap，非旋Treap（Split+Merge）和Splay日后加上）<br>Tips:为了防止越界等问题以及方便提取区间（尤其是Splay），序列前后一般塞上一个-INF和INF<br>然而作为C++选手，我们应该妙用STL。set可以实现这样的功能，内部是红黑树实现的也很快。</p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ol>\n<li>旋转实现的Treap(160ms,3.03MB)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF=<span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">randad</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">114514</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">2147483647</span>);<span class=\"comment\">//48271使得随机数有完全周期，即2147483647内取遍不重复 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> delta=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pri,val,ch[<span class=\"number\">2</span>],size,tot;</span><br><span class=\"line\"><span class=\"comment\">//pri:Treap的随机数</span></span><br><span class=\"line\"><span class=\"comment\">//val:数字</span></span><br><span class=\"line\"><span class=\"comment\">//ch[0,1]:左孩子右孩子</span></span><br><span class=\"line\"><span class=\"comment\">//size:以该节点为根的子树里有几个数字</span></span><br><span class=\"line\"><span class=\"comment\">//tot:这个数字出现了几次（本题无用）</span></span><br><span class=\"line\">&#125;T[<span class=\"number\">111111</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> k,size=<span class=\"number\">0</span>,ANS,ans;<span class=\"comment\">//k:根节点，size:树的大小,ANS:临时，ans:赶走了几个人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;T[k].size=T[T[k].ch[<span class=\"number\">0</span>]].size+T[T[k].ch[<span class=\"number\">1</span>]].size+T[k].tot;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rturn</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//右旋，把k旋到右边，k左孩子提到根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=T[k].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">    T[k].ch[<span class=\"number\">0</span>]=T[t].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[t].ch[<span class=\"number\">1</span>]=k;</span><br><span class=\"line\">    T[t].size=T[k].size;</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(k);</span><br><span class=\"line\">    k=t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lturn</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//左旋，把k旋到左边，k右孩子提到根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=T[k].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">    T[k].ch[<span class=\"number\">1</span>]=T[t].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">    T[t].ch[<span class=\"number\">0</span>]=k;</span><br><span class=\"line\">    T[t].size=T[k].size;</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(k);</span><br><span class=\"line\">    k=t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> val)</span> <span class=\"comment\">//插入</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        k=size;</span><br><span class=\"line\">        T[k].pri=<span class=\"built_in\">randad</span>();</span><br><span class=\"line\">        T[k].val=val;</span><br><span class=\"line\">        T[k].size=T[k].tot=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T[k].size++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T[k].val==val) T[k].tot++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val&gt;T[k].val) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(T[k].ch[<span class=\"number\">1</span>],val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[T[k].ch[<span class=\"number\">1</span>]].pri&lt;T[k].pri) <span class=\"built_in\">lturn</span>(k);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(T[k].ch[<span class=\"number\">0</span>],val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[T[k].ch[<span class=\"number\">0</span>]].pri&lt;T[k].pri) <span class=\"built_in\">rturn</span>(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> val)</span><span class=\"comment\">//删除值为val的数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T[k].val==val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[k].tot&gt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            T[k].tot--;</span><br><span class=\"line\">            T[k].size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[k].ch[<span class=\"number\">0</span>]==<span class=\"number\">0</span>||T[k].ch[<span class=\"number\">1</span>]==<span class=\"number\">0</span>) k=T[k].ch[<span class=\"number\">0</span>]+T[k].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T[T[k].ch[<span class=\"number\">0</span>]].pri&lt;T[T[k].ch[<span class=\"number\">1</span>]].pri) <span class=\"built_in\">rturn</span>(k),<span class=\"built_in\">del</span>(k,val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">lturn</span>(k),<span class=\"built_in\">del</span>(k,val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val&gt;T[k].val) T[k].size--,<span class=\"built_in\">del</span>(T[k].ch[<span class=\"number\">1</span>],val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> T[k].size--,<span class=\"built_in\">del</span>(T[k].ch[<span class=\"number\">0</span>],val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">xth</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询第x小的数是什么 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>||x==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=T[T[k].ch[<span class=\"number\">0</span>]].size) <span class=\"keyword\">return</span> <span class=\"built_in\">xth</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;T[T[k].ch[<span class=\"number\">0</span>]].size+T[k].tot) <span class=\"keyword\">return</span> <span class=\"built_in\">xth</span>(T[k].ch[<span class=\"number\">1</span>],x-T[T[k].ch[<span class=\"number\">0</span>]].size-T[k].tot);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> T[k].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询第x小数在树中位置 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k==<span class=\"number\">0</span>||x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=T[T[k].ch[<span class=\"number\">0</span>]].size)<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==T[T[k].ch[<span class=\"number\">0</span>]].size+<span class=\"number\">1</span>)<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(T[k].ch[<span class=\"number\">1</span>],x-T[T[k].ch[<span class=\"number\">0</span>]].size<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询不比x大的且最接近x的数所在位置（x前继）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[k].val&lt;x) ANS=k,<span class=\"built_in\">pre</span>(T[k].ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">pre</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span><span class=\"comment\">//查询不比x小的且最接近x的数所在位置（x后继）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T[k].val&gt;x) ANS=k,<span class=\"built_in\">next</span>(T[k].ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">next</span>(T[k].ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Catch</span><span class=\"params\">(<span class=\"type\">int</span> num)</span><span class=\"comment\">//匹配宠物和饲养人</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">pre</span>(k,num),a=T[ANS].val; </span><br><span class=\"line\">    <span class=\"built_in\">next</span>(k,num), b=T[ANS].val;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num-a&lt;=b-num &amp;&amp; a != -INF) &#123;</span><br><span class=\"line\">            ans += num-a;</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(k,a);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans += b-num;</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(k,b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans %= <span class=\"number\">1000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"type\">int</span> cur;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(k,-INF),<span class=\"built_in\">ins</span>(k,INF);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[k].size == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                cur=a;<span class=\"comment\">//cur：当前是宠物等人认领还是人在等着接受宠物（看原题，不然谁看得懂啊= =）</span></span><br><span class=\"line\">                <span class=\"built_in\">ins</span>(k,b);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a == cur) <span class=\"built_in\">ins</span>(k,b);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">Catch</span>(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"number\">2.</span> set实现(<span class=\"number\">304</span>ms,<span class=\"number\">2.57</span>MB)  </span><br><span class=\"line\">```cpp</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1111111</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">1000000000</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, ans;</span><br><span class=\"line\">set &lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt;::iterator left=--s.<span class=\"built_in\">lower_bound</span>(x),right=s.<span class=\"built_in\">lower_bound</span>(x);<span class=\"comment\">//lower_bound的实现是二分查找，迭代器指向不比x小的且最接近x的数的位置，所以left就是前继，right就是后继</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x-*left&lt;=*right-x&amp;&amp;*left!=-INF) &#123;</span><br><span class=\"line\">        ans+=x-*left;</span><br><span class=\"line\">        s.<span class=\"built_in\">erase</span>(left);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ans+=*right-x;</span><br><span class=\"line\">        s.<span class=\"built_in\">erase</span>(right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans%=<span class=\"number\">1000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"type\">int</span> cur;</span><br><span class=\"line\">    s.<span class=\"built_in\">insert</span>(-INF),s.<span class=\"built_in\">insert</span>(INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">size</span>()==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            cur=a;</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(b);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==cur) s.<span class=\"built_in\">insert</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Treap",
                "Splay"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20[HNOI2002]%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/",
            "url": "http://cubicy.icu/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20[HNOI2002]%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/",
            "title": "洛谷:P2234  [HNOI2002]营业额统计",
            "date_published": "2018-02-27T15:58:00.000Z",
            "content_html": "<p>原题地址：<a href=\"//www.luogu.org/problemnew/show/P2234\">https://www.luogu.org/problemnew/show/P2234</a></p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>给定一个序列，对于每一个数都要查询：序列中在这个数前与这个数最接近的数是什么？然后将最接近的数字与这个数字的差累加。（序列第一个数字直接加自己）  </p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查询在这个数之前与这个数最接近的数，我们很容易想到用二叉搜索树（BST）来做。<br><del>虽然数据略水暴力排序每次查询从一个数往左右找也能过。</del><br>每次插入一个数字，然后查询，我用Treap实现（还是弱化版的，只有插入查询）。<br>Treap的核心其实就是打乱顺序插入防止被卡（粗糙理解）。具体实现方法不难，请百度。（我之后会写一篇专门介绍下各种BST的。）<br>PS：Treap树完整版之后写。这题用STL的vector也行，vector理论每次插入渐进时间复杂度是O(n)但是听说实际是对数级别的？   </p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">randad</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> seed=<span class=\"number\">114</span>; <span class=\"comment\">//seed可以随便取</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed=<span class=\"built_in\">int</span>(seed*<span class=\"number\">48271LL</span>%<span class=\"number\">2147483647</span>);<span class=\"comment\">//48271使得其有完全周期，即2147483647内取遍不重复 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Treap</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> key,pri,son[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;T[<span class=\"number\">33333</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt=<span class=\"number\">1</span>,rt=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> p,<span class=\"type\">int</span> &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=T[rt].son[p];</span><br><span class=\"line\">    T[rt].son[p]=T[y].son[!p];</span><br><span class=\"line\">    T[y].son[!p]=rt;</span><br><span class=\"line\">    rt=y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"type\">int</span> key,<span class=\"type\">int</span> &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rt==<span class=\"number\">0</span>)</span><br><span class=\"line\">    \tT[rt=cnt++] = (Treap)&#123;key,<span class=\"built_in\">randad</span>()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p=key&gt;T[rt].key;</span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(key,T[rt].son[p]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[rt].son[p]].pri&gt;T[rt].pri)</span><br><span class=\"line\">        \t<span class=\"built_in\">rotate</span>(p,rt);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nowMin</span><span class=\"params\">(<span class=\"type\">int</span> key,<span class=\"type\">int</span> rt)</span><span class=\"comment\">//查询现在最接近key的数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rt==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">666666666</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"built_in\">abs</span>(key-T[rt].key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key&gt;T[rt].key) res=<span class=\"built_in\">min</span>(res,<span class=\"built_in\">nowMin</span>(key,T[rt].son[<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key&lt;T[rt].key) res=<span class=\"built_in\">min</span>(res,<span class=\"built_in\">nowMin</span>(key,T[rt].son[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,tot=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i==<span class=\"number\">1</span>) tot+=num;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tot+=<span class=\"built_in\">nowMin</span>(num,rt);<span class=\"comment\">//rt是当前根</span></span><br><span class=\"line\">        <span class=\"built_in\">ins</span>(num,rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,tot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>",
            "tags": [
                "Treap"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/",
            "url": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/",
            "title": "洛谷:P3391 【模板】文艺平衡树（Splay）",
            "date_published": "2018-02-22T15:43:00.000Z",
            "content_html": "<p>原题地址:<a href=\"//www.luogu.org/problemnew/show/P3391\">https://www.luogu.org/problemnew/show/P3391</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：<br>翻转一个区间，例如原有序序列是5 4 3 2 1，翻转区间是[2,4]的话，结果是5 2 3 4 1</p>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>Splay是一种二叉搜索树。如果不知道的话……    </p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172651966-1911354100.png\" alt=\"百度啊\" loading=\"lazy\"><br>百度百科对BST的介绍：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。</span><br></pre></td></tr></table></figure>\n<p>首先明白Splay比起线段树能多干什么：</p>\n<ul>\n<li>可以在一个有序序列中任意数后面动态插入一串数（不能比a后面一个数还大）  </li>\n<li>可以删除一段区间</li>\n</ul>\n<p>可能描述不是很清楚，具体看这里面给的论文链接：<a href=\"//www.cnblogs.com/yyy2015c01/p/8457795.html\">信息学竞赛相关优秀文章合集</a><br>或者直接看这里：<a href=\"//files.cnblogs.com/files/yyy2015c01/%E8%BF%90%E7%94%A8%E4%BC%B8%E5%B1%95%E6%A0%91%E8%A7%A3%E5%86%B3%E6%95%B0%E5%88%97%E7%BB%B4%E6%8A%A4%E9%97%AE%E9%A2%98.pdf\">运用伸展树解决数列维护问题.pdf</a><br>如果搞不懂左旋右旋是什么，可以先看<a href=\"//www.cnblogs.com/yyy2015c01/p/8457795.html\">信息学竞赛相关优秀文章合集</a>里的AVL树介绍。<br>对于AVL树是一种为了防止树结构不够优导致深度过深时间复杂度退化，在保持二叉搜索树性质不变的前提下进行的一种变换。简单说就是把往一边沉的树弄的两边平衡些。<br>而在Splay中，将特定点旋转到一定位置可以进行提取区间等操作，同时各种旋转间接的使树**基本平衡(是的，可以构造数据卡掉。Treap树对此表示同情)**。  </p>\n<hr>\n<p>左旋（下面代码里的表达:把S往上转一次）→<img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235430206-1994690340.gif\" alt=\"左旋\" loading=\"lazy\">  </p>\n<hr>\n<p>右旋（下面代码里的表达:把E往上转一次）→<img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235503124-141509937.gif\" alt=\"右旋\" loading=\"lazy\">  </p>\n<hr>\n<p>图片来源：<a href=\"//blog.csdn.net/sun_tttt/article/details/65445754\">http://blog.csdn.net/sun_tttt&#x2F;article&#x2F;details&#x2F;65445754</a><br>(文章是介绍红黑树的但是这个左旋右旋操作二叉搜索树通用)<br>论文里讲的很详细~<br>具体到这道题，引用一下zcysky在题解里给出的解释：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Splay可以用来维护序列。这样的话是把Splay当作一棵区间树。  </span><br><span class=\"line\">所谓区间树和权值树的区别，大概就是区间树每个节点代表的是一段区间（典型代表就是一般的线段树）  </span><br><span class=\"line\">权值树好理解一点，就是每个点真的代表一个点。  </span><br><span class=\"line\">至于翻转操作我们可以利用Splay的过程实现。详见代码。(Splay能维护序列反转也是它作为LCT的辅助树的条件之一)</span><br></pre></td></tr></table></figure>\n<p>作为模板题没什么好说的。这边文章主要记录板子用。感谢zcysky的板子。   </p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172902355-916514534.gif\" loading=\"lazy\"></h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m; </span><br><span class=\"line\"><span class=\"type\">int</span> fa[N],ch[N][<span class=\"number\">2</span>],size[N],rev[N],rt;<span class=\"comment\">//fa[a]表示a的父亲</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> x)</span><span class=\"comment\">//维护节点大小</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    size[x]=size[ch[x][<span class=\"number\">0</span>]]+size[ch[x][<span class=\"number\">1</span>]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> x)</span><span class=\"comment\">//标记下传</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rev[x])&#123;<span class=\"comment\">//是否翻转了区间</span></span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ch[x][<span class=\"number\">0</span>],ch[x][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        rev[ch[x][<span class=\"number\">0</span>]]^=<span class=\"number\">1</span>;rev[ch[x][<span class=\"number\">1</span>]]^=<span class=\"number\">1</span>;rev[x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">isLeft</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> ch[fa[x]][<span class=\"number\">0</span>] == x;&#125;<span class=\"comment\">//判断x是不是左儿子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//旋转</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y=fa[x],z=fa[y];</span><br><span class=\"line\">\t<span class=\"type\">int</span> kind=<span class=\"built_in\">isLeft</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y==k)</span><br><span class=\"line\">        k=x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ch[z][!<span class=\"built_in\">isLeft</span>(y)]=x;</span><br><span class=\"line\">    ch[y][!kind]=ch[x][kind];</span><br><span class=\"line\">    </span><br><span class=\"line\">    fa[ch[y][!kind]]=y;</span><br><span class=\"line\">    ch[x][kind]=y;</span><br><span class=\"line\">    fa[y]=x;fa[x]=z;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);<span class=\"built_in\">pushup</span>(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> &amp;k)</span><span class=\"comment\">//伸展操作，将x一直旋转直到x就是k</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x!=k)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=fa[x],z=fa[y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y!=k)</span><br><span class=\"line\">        \t<span class=\"built_in\">isLeft</span>(x)^<span class=\"built_in\">isLeft</span>(y) ? <span class=\"built_in\">rotate</span>(x,k):<span class=\"built_in\">rotate</span>(y,k);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//该节点与父亲分别是他们爸的左孩子\\右孩子或者是右孩子\\左孩子旋转2次x</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//该节点与父亲同是他们爸的左孩子或同是右孩子先旋转一次y再旋转一次x</span></span><br><span class=\"line\">        <span class=\"built_in\">rotate</span>(x,k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> f)</span> <span class=\"comment\">//建立一颗完全平衡的二叉树</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    ch[f][!(mid&lt;f)]=mid;</span><br><span class=\"line\">    fa[mid]=f;</span><br><span class=\"line\">    size[mid]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,mid<span class=\"number\">-1</span>,mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(mid+<span class=\"number\">1</span>,r,mid);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(mid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span><span class=\"comment\">//寻找以x为根的子树里第k大的</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> s=size[ch[x][<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==s+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;=s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(ch[x][<span class=\"number\">0</span>],k);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(ch[x][<span class=\"number\">1</span>],k-s<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rever</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span><span class=\"comment\">//关于如何从Splay中提取区间请看上文思路中的论文</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"built_in\">find</span>(rt,l),y=<span class=\"built_in\">find</span>(rt,r+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(x,rt);</span><br><span class=\"line\">    <span class=\"built_in\">splay</span>(y,ch[x][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"type\">int</span> z=ch[y][<span class=\"number\">0</span>];</span><br><span class=\"line\">    rev[z]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    rt=(n+<span class=\"number\">3</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">2</span>,rt);<span class=\"comment\">//区间左右各多加1个数方便提取区间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> L,R;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;L,&amp;R);</span><br><span class=\"line\">        <span class=\"built_in\">rever</span>(L,R);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n+<span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,<span class=\"built_in\">find</span>(rt,i)<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Splay"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/",
            "url": "http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/",
            "title": "洛谷:P3384 【模板】树链剖分",
            "date_published": "2018-02-21T16:08:00.000Z",
            "content_html": "<p>原题地址:<a href=\"//www.luogu.org/problemnew/show/P3384\">https://www.luogu.org/problemnew/show/P3384</a>  </p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>已知一棵包含N个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：  </p>\n<ol>\n<li>格式： 1 x y z 表示将树从x到y结点最短路径上所有节点的值都加上z  </li>\n<li>格式： 2 x y 表示求树从x到y结点最短路径上所有节点的值之和  </li>\n<li>格式： 3 x z 表示将以x为根节点的子树内所有节点值都加上z  </li>\n<li>格式： 4 x 表示求以x为根节点的子树内所有节点值之和</li>\n</ol>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>树链剖分裸题。做题时看到与四种操作中的任何一种极为相似的操作，就应该立刻想到树链剖分（并且考虑是否结合线段树解答）。<br>关于树链剖分的介绍请看此处：<a href=\"//www.cnblogs.com/yyy2015c01/p/8457795.html\">信息学竞赛相关优秀文章合集</a>  </p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>具体介绍在注释里。<br>来源：洛谷用户<a href=\"//www.luogu.org/space/show?uid=47062\">@zengqinyi</a>  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Rint register int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mem(a,b) memset(a,(b),sizeof(a))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Temp template<span class=\"string\">&lt;typename T&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"function\">Temp <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(T &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=<span class=\"number\">0</span>;T w=<span class=\"number\">1</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(ch)&amp;&amp;ch!=<span class=\"string\">&#x27;-&#x27;</span>)ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>)w=<span class=\"number\">-1</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(ch))x=(x&lt;&lt;<span class=\"number\">3</span>)+(x&lt;&lt;<span class=\"number\">1</span>)+(ch^<span class=\"string\">&#x27;0&#x27;</span>),ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    x=x*w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> len (r-l+1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">200000</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,r,mod;</span><br><span class=\"line\"><span class=\"comment\">//见题意 </span></span><br><span class=\"line\"><span class=\"type\">int</span> e,beg[maxn],nex[maxn],to[maxn],w[maxn],wt[maxn];</span><br><span class=\"line\"><span class=\"comment\">//链式前向星数组，w[]、wt[]初始点权数组 </span></span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn&lt;&lt;<span class=\"number\">2</span>],laz[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">//线段树数组、lazy操作 </span></span><br><span class=\"line\"><span class=\"type\">int</span> son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],siz[maxn],top[maxn]; </span><br><span class=\"line\"><span class=\"comment\">//son[]重儿子编号,id[]新编号,fa[]父亲节点,cnt dfs_clock/dfs序,dep[]深度,siz[]子树大小,top[]当前链顶端节点 </span></span><br><span class=\"line\"><span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//查询答案 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span> <span class=\"comment\">//链式前向星加边 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    to[++e]=y;</span><br><span class=\"line\">    nex[e]=beg[x];</span><br><span class=\"line\">    beg[x]=e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//-------------------------------------- 以下为线段树 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> lenn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    laz[rt&lt;&lt;<span class=\"number\">1</span>]+=laz[rt];</span><br><span class=\"line\">    laz[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=laz[rt];</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>]+=laz[rt]*(lenn-(lenn&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=laz[rt]*(lenn&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>]%=mod;</span><br><span class=\"line\">    a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]%=mod;</span><br><span class=\"line\">    laz[rt]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)&#123;</span><br><span class=\"line\">        a[rt]=wt[l];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[rt]&gt;mod)a[rt]%=mod;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(lson);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rson);</span><br><span class=\"line\">    a[rt]=(a[rt&lt;&lt;<span class=\"number\">1</span>]+a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>])%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class=\"line\">    \tres+=a[rt];</span><br><span class=\"line\">    \tres%=mod;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(laz[rt])<span class=\"built_in\">pushdown</span>(rt,len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L&lt;=mid)<span class=\"built_in\">query</span>(lson,L,R);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R&gt;mid)<span class=\"built_in\">query</span>(rson,L,R);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> rt,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> L,<span class=\"type\">int</span> R,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class=\"line\">        laz[rt]+=k;</span><br><span class=\"line\">        a[rt]+=k*len;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(laz[rt])<span class=\"built_in\">pushdown</span>(rt,len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L&lt;=mid)<span class=\"built_in\">update</span>(lson,L,R,k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R&gt;mid)<span class=\"built_in\">update</span>(rson,L,R,k);</span><br><span class=\"line\">        a[rt]=(a[rt&lt;&lt;<span class=\"number\">1</span>]+a[rt&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>])%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//---------------------------------以上为线段树 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">qRange</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y]) &#123;<span class=\"comment\">//当两个点不在同一条链上 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class=\"line\">        \t<span class=\"built_in\">swap</span>(x,y);<span class=\"comment\">//把x点改为所在链顶端的深度更深的那个点</span></span><br><span class=\"line\">        res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[top[x]],id[x]);<span class=\"comment\">//ans加上x点到x所在链顶端 这一段区间的点权和</span></span><br><span class=\"line\">        ans+=res;</span><br><span class=\"line\">        ans%=mod;<span class=\"comment\">//按题意取模 </span></span><br><span class=\"line\">        x=fa[top[x]];<span class=\"comment\">//把x跳到x所在链顶端的那个点的上面一个点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//直到两个点处于一条链上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x]&gt;dep[y])<span class=\"built_in\">swap</span>(x,y);<span class=\"comment\">//把x点深度更深的那个点</span></span><br><span class=\"line\">    res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[y]);<span class=\"comment\">//这时再加上此时两个点的区间和即可</span></span><br><span class=\"line\">    ans+=res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">updRange</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> k)</span> <span class=\"comment\">//同上</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    k%=mod;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class=\"line\">        \t<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[top[x]],id[x],k);</span><br><span class=\"line\">        x=fa[top[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x]&gt;dep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[y],k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">qSon</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[x]+siz[x]<span class=\"number\">-1</span>);<span class=\"comment\">//子树区间右端点为id[x]+siz[x]-1 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">updSon</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span> <span class=\"comment\">//同上</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">update</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,id[x],id[x]+siz[x]<span class=\"number\">-1</span>,k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f,<span class=\"type\">int</span> deep)</span> <span class=\"comment\">//x当前节点，f父亲，deep深度 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    dep[x]=deep;<span class=\"comment\">//标记每个点的深度 </span></span><br><span class=\"line\">    fa[x]=f;<span class=\"comment\">//标记每个点的父亲 </span></span><br><span class=\"line\">    siz[x]=<span class=\"number\">1</span>;<span class=\"comment\">//标记每个非叶子节点的子树大小 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxson=<span class=\"number\">-1</span>;<span class=\"comment\">//记录重儿子的儿子数 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=beg[x];i;i=nex[i]) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=to[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==f)</span><br><span class=\"line\">        \t<span class=\"keyword\">continue</span>;<span class=\"comment\">//若为父亲则continue </span></span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(y,x,deep+<span class=\"number\">1</span>);<span class=\"comment\">//dfs其儿子 </span></span><br><span class=\"line\">        siz[x]+=siz[y];<span class=\"comment\">//把它的儿子数加到它身上 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[y]&gt;maxson)son[x]=y,maxson=siz[y];<span class=\"comment\">//标记每个非叶子节点的重儿子编号 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> topf)</span> <span class=\"comment\">//x当前节点，topf当前链的最顶端的节点 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    id[x]=++cnt;<span class=\"comment\">//标记每个点的新编号 </span></span><br><span class=\"line\">    wt[cnt]=w[x];<span class=\"comment\">//把每个点的初始值赋到新编号上来 </span></span><br><span class=\"line\">    top[x]=topf;<span class=\"comment\">//这个点所在链的顶端 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!son[x])</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span>;<span class=\"comment\">//如果没有儿子则返回 </span></span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(son[x],topf);<span class=\"comment\">//按先处理重儿子，再处理轻儿子的顺序递归处理 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=beg[x];i;i=nex[i]) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=to[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==fa[x]||y==son[x])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(y,y);<span class=\"comment\">//对于每一个轻儿子都有一条从它自己开始的链 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(r);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(mod);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(w[i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Rint i=<span class=\"number\">1</span>;i&lt;n;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(a);<span class=\"built_in\">read</span>(b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);<span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(r,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(r,r);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k,x,y,z;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);<span class=\"built_in\">read</span>(y);<span class=\"built_in\">read</span>(z);</span><br><span class=\"line\">            <span class=\"built_in\">updRange</span>(x,y,z);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);<span class=\"built_in\">read</span>(y);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">qRange</span>(x,y));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);<span class=\"built_in\">read</span>(y);</span><br><span class=\"line\">            <span class=\"built_in\">updSon</span>(x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(x);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">qSon</span>(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "数链剖分"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/21/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B%E7%9B%B8%E5%85%B3%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/",
            "url": "http://cubicy.icu/2018/02/21/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B%E7%9B%B8%E5%85%B3%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/",
            "title": "信息学竞赛相关优秀文章合集",
            "date_published": "2018-02-21T15:36:00.000Z",
            "content_html": "<p><a href=\"//blog.csdn.net/zearot/article/details/48299459\">线段树详解 （原理，实现与应用）</a><br><a href=\"//blog.csdn.net/lyd_7_29/article/details/51405469\">可持久化线段树 简介</a>  </p>\n<p><a href=\"//files.cnblogs.com/files/yyy2015c01/%E8%BF%90%E7%94%A8%E4%BC%B8%E5%B1%95%E6%A0%91%E8%A7%A3%E5%86%B3%E6%95%B0%E5%88%97%E7%BB%B4%E6%8A%A4%E9%97%AE%E9%A2%98.pdf\">运用伸展树解决数列维护问题.pdf</a><br><a href=\"//oi.men.ci/splay-notes-1/\">Splay 学习笔记（一）</a><br><a href=\"//oi.men.ci/splay-notes-2/\">Splay 学习笔记（二）</a><br><a href=\"//oi.men.ci/splay-notes-3/\">Splay 学习笔记（三）</a>   </p>\n<p><a href=\"//lib.csdn.net/article/datastructure/9204\">请要相信我，30分钟让你掌握AVL树（平衡二叉树）</a><br><a href=\"//blog.csdn.net/sun_tttt/article/details/65445754\">最容易懂的红黑树</a><br><a href=\"//www.cnblogs.com/Mathics/p/3971220.html\">三大平衡树（Treap + Splay + SBT）总结+模板</a><br><a href=\"//oi.men.ci/link-cut-tree-notes/\">Link-Cut Tree 学习笔记</a><br><a href=\"//files.cnblogs.com/files/yyy2015c01/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%A0%94%E7%A9%B6.pdf\">可持久化数据结构研究.pdf</a>  </p>\n<p><a href=\"//www.cnblogs.com/dalt/p/8206664.html\">树链剖分详解</a><br><a href=\"//www.cnblogs.com/chinhhh/p/7965433.html\">树链剖分详解（洛谷模板 P3384）</a>  </p>\n<p><a href=\"//blog.csdn.net/PomeCat/article/details/72832494\">动态规划（DP）优化之斜率优化讲解</a><br><a href=\"//www.cnblogs.com/MashiroSky/p/6009685.html\">斜率优化学习笔记</a><br><a href=\"//www.cnblogs.com/mlystdcall/p/6525962.html\">四边形不等式学习笔记</a><br><a href=\"//www.yhzq-blog.cc/%E6%8F%92%E5%A4%B4dp-%E4%BB%8E%E4%B8%8D%E4%BC%9A%E5%88%B0%E5%B4%A9%E6%BA%83/\">插头dp入门</a>  </p>\n<p><a href=\"//segmentfault.com/a/1190000003914228\">最长回文子串——Manacher 算法（人称“马拉车算法”）</a>  </p>\n<p><a href=\"//www.cnblogs.com/mlystdcall/p/6734852.html\">上下界网络流建模方法总结</a>   </p>\n<p><a href=\"//www.gatevin.moe/acm/fft%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">FFT算法学习笔记</a><br><a href=\"//www.cnblogs.com/tmzbot/p/4668158.html\">Fast Walsh-Hadamard Transform（快速沃尔什变换）</a>  </p>\n<p><a href=\"//www.cnblogs.com/mlystdcall/p/6219421.html\">简易CDQ分治教程&amp;学习笔记</a><br><a href=\"//www.cnblogs.com/mlystdcall/p/6232324.html\">四维偏序(CDQ套CDQ)</a></p>\n",
            "tags": []
        },
        {
            "id": "http://cubicy.icu/2018/02/20/%E6%B4%9B%E8%B0%B7P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84/",
            "url": "http://cubicy.icu/2018/02/20/%E6%B4%9B%E8%B0%B7P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84/",
            "title": "洛谷:P3919 【模板】可持久化数组（可持久化线段树/平衡树）",
            "date_published": "2018-02-20T15:36:00.000Z",
            "content_html": "<p>原题地址:<a href=\"//www.luogu.org/problemnew/show/P3919\">https://www.luogu.org/problemnew/show/P3919</a></p>\n<h3 id=\"题目简述\"><a href=\"#题目简述\" class=\"headerlink\" title=\"题目简述\"></a>题目简述</h3><p>维护一个长度为N的数组，支持如下几种操作：  </p>\n<ol>\n<li>在某个历史版本上修改某一个位置上的值  </li>\n<li>访问某个历史版本上的某一位置的值<br>此外，每进行一次操作（对于操作2，即为生成一个完全一样的版本，不作任何改动），就会生成一个新的版本。版本编号即为当前操作的编号（从1开始编号，版本0表示初始状态数组）</li>\n</ol>\n<hr>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先感谢来自<a href=\"https://www.luogu.org/space/show?uid=2978\">@zcysky</a>的模板。写的非常漂亮，封装也很精致。<br>这题是裸题，于是直接上模板就行了。注意此题输入数据大，需要读入优化。<br>关于可持久化线段树的介绍与总结，之后把坑填上。  </p>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1000005</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],n,q,rt[N*<span class=\"number\">20</span>];<span class=\"comment\">//空间复杂度O(mlogn) </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXB 50000000</span></span><br><span class=\"line\"><span class=\"type\">char</span> buf[MAXB],*cp=buf;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f=<span class=\"number\">1</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*cp&lt;<span class=\"string\">&#x27;0&#x27;</span>||*cp&gt;<span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*cp==<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        cp++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*cp&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;*cp&lt;=<span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x=x*<span class=\"number\">10</span>+*cp-<span class=\"string\">&#x27;0&#x27;</span>; </span><br><span class=\"line\">        cp++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f*x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Persistable_Segment_Tree</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> lc[N*<span class=\"number\">20</span>],rc[N*<span class=\"number\">20</span>],val[N*<span class=\"number\">20</span>],cnt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> &amp;o,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">        o=++cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==r) &#123;</span><br><span class=\"line\">            val[o]=a[l];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(lc[o],l,mid);</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(rc[o],mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"type\">int</span> &amp;o,<span class=\"type\">int</span> pre,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        o=++cnt;</span><br><span class=\"line\">        lc[o]=lc[pre];</span><br><span class=\"line\">        rc[o]=rc[pre];</span><br><span class=\"line\">        val[o]=val[pre];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==r) &#123;</span><br><span class=\"line\">            val[o]=v;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q&lt;=mid)</span><br><span class=\"line\">            <span class=\"built_in\">ins</span>(lc[o],lc[pre],l,mid,q,v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">            <span class=\"built_in\">ins</span>(rc[o],rc[pre],mid+<span class=\"number\">1</span>,r,q,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> o,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> q)</span></span>&#123;<span class=\"comment\">//类似二分的查询 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val[o];</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q&lt;=mid)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(lc[o],l,mid,q);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rc[o],mid+<span class=\"number\">1</span>,r,q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;T;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fread</span>(buf,<span class=\"number\">1</span>,MAXB,stdin);</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        a[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    T.<span class=\"built_in\">build</span>(rt[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> pre=<span class=\"built_in\">read</span>(),opt=<span class=\"built_in\">read</span>(),x=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt==<span class=\"number\">1</span>) &#123;<span class=\"comment\">//操作1:在版本pre的基础上将第x个数修改为v </span></span><br><span class=\"line\">            <span class=\"type\">int</span> v=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">            T.<span class=\"built_in\">ins</span>(rt[i],rt[pre],<span class=\"number\">1</span>,n,x,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt==<span class=\"number\">2</span>) &#123;<span class=\"comment\">//操作2:访问版本pre中第x个数的值 </span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,T.<span class=\"built_in\">query</span>(rt[pre],<span class=\"number\">1</span>,n,x));</span><br><span class=\"line\">            rt[i]=rt[pre];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "持久化",
                "线段树"
            ]
        },
        {
            "id": "http://cubicy.icu/2018/02/20/OI%E4%B8%AD%E7%9A%84IO%E4%BC%98%E5%8C%96/",
            "url": "http://cubicy.icu/2018/02/20/OI%E4%B8%AD%E7%9A%84IO%E4%BC%98%E5%8C%96/",
            "title": "OI中的IO优化",
            "date_published": "2018-02-20T13:09:00.000Z",
            "content_html": "<p>本文主要讲述常用的2种读入优化方法。<br>输出优化很少使用，在此简单提一下：也就是把输出的东西先放进字符串，再一次性puts\\printf出去。提升不大，不常用。<br>首先当然需要先知道，scanf&#x2F;printf比cin&#x2F;cout快不少。<br>读入优化： </p>\n<ol>\n<li>getchar<br>使用getchar一个一个读入字符，转化成数字。比scanf快一些。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f=<span class=\"number\">1</span>,x=<span class=\"number\">0</span>;<span class=\"comment\">//f是正负的标识</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f*x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n2.fread  （非常快！）<br>fread将stdin里的内容读到字符串里，然后利用指针处理。<br>首先定义指针和读入的数组：  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXB 10000000</span></span><br><span class=\"line\"><span class=\"comment\">//定义读入最长的长度</span></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[MAXB],*cp=buf;</span><br></pre></td></tr></table></figure>\n接下来是读入：  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fread</span>(buf,<span class=\"number\">1</span>,MAXB,stdin);<span class=\"comment\">//函数具体参数含义请善用搜索引擎</span></span><br></pre></td></tr></table></figure>\n最后是从中处理出数据（现在这个函数是为了处理int整型而设计）  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f=<span class=\"number\">1</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*cp&lt;<span class=\"string\">&#x27;0&#x27;</span>||*cp&gt;<span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*cp==<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        cp++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*cp&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;*cp&lt;=<span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x=x*<span class=\"number\">10</span>+*cp-<span class=\"string\">&#x27;0&#x27;</span>; </span><br><span class=\"line\">        cp++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f*x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": []
        }
    ]
}